BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"
mkdir -p "$BASE_DIR"

# 创建主README.md
cat > "$BASE_DIR/README.md" << 'EOF'
---
title: 音视频开发知识体系
icon: audio-video
order: 1
---

# 音视频开发知识体系

本知识库系统地整理了音视频开发工程师所需掌握的核心知识和技能，从基础概念到高级特性，从编解码原理到流媒体技术，全面覆盖音视频开发的各个方面。
EOF

# 创建第1章目录
mkdir -p "$BASE_DIR/第1章-课程导学与准备工作"

# 创建第1章README文件
cat > "$BASE_DIR/第1章-课程导学与准备工作/README.md" << 'EOF'
---
title: 课程导学与准备工作
icon: course-intro
order: 1
---

# 课程导学与准备工作

本章介绍音视频开发课程的整体内容和学习方法。
EOF

# 创建1.1课程导学文件
cat > "$BASE_DIR/第1章-课程导学与准备工作/1.1-课程导学.md" << 'EOF'
---
title: 课程导学
icon: course-guide
order: 1
---

# 课程导学

## 课程概述
- 课程目标
- 课程内容
- 学习路径
- 技能要求
- 预期收获

## 知识体系
- 基础理论
- 编解码技术
- 音视频处理
- 流媒体技术
- 实战项目

## 学习建议
- 学习方法
- 重点难点
- 实践要求
- 资源推荐
- 注意事项
EOF

# 创建1.2课程介绍及学习指导文件
cat > "$BASE_DIR/第1章-课程导学与准备工作/1.2-课程介绍及学习指导.md" << 'EOF'
---
title: 课程介绍及学习指导
icon: course-guide
order: 2
---

# 课程介绍及学习指导

## 课程内容
- 理论基础
- 实践项目
- 技术栈
- 应用场景
- 发展方向

## 学习方法
- 知识积累
- 实践操作
- 项目实战
- 问题解决
- 技能提升

## 学习建议
- 前置知识
- 学习计划
- 重点把握
- 资源利用
- 注意事项
EOF

# 创建第2章目录
mkdir -p "$BASE_DIR/第2章-音视频环境基础"

# 创建第2章README文件
cat > "$BASE_DIR/第2章-音视频环境基础/README.md" << 'EOF'
---
title: 音视频环境基础
icon: av-basics
order: 2
---

# 音视频环境基础

本章介绍音视频开发的基础环境和核心概念。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建2.1音视频应用场景文件
cat > "$BASE_DIR/第2章-音视频环境基础/2.1-音视频应用场景.md" << 'EOF'
---
title: 音视频应用场景
icon: av-scenarios
order: 1
---

# 音视频应用场景

## 直播应用
- 直播平台
- 在线教育
- 远程会议
- 游戏直播
- 社交直播

## 点播应用
- 视频网站
- 短视频
- 在线课程
- 影音娱乐
- 企业培训

## 实时通信
- 音视频通话
- 视频会议
- 远程协作
- 在线问诊
- 远程教学

## 技术要点
- 编解码技术
- 传输协议
- 延迟控制
- 画质优化
- 音画同步
EOF

# 创建2.2推流中断与画质问题解决文件
cat > "$BASE_DIR/第2章-音视频环境基础/2.2-推流中断与画质问题解决.md" << 'EOF'
---
title: 推流中断与画质问题解决
icon: streaming-issues
order: 2
---

# 推流中断与画质问题解决

## 推流中断
- 网络问题
- 服务器问题
- 编码问题
- 硬件问题
- 配置问题

## 画质问题
- 码率控制
- 分辨率
- 帧率
- 编码参数
- 传输质量

## 解决方案
- 网络优化
- 参数调优
- 硬件升级
- 服务器扩容
- 监控告警

## 最佳实践
- 问题排查
- 性能优化
- 质量监控
- 应急处理
- 预防措施
EOF

# 创建2.3Linux基础知识-1文件
cat > "$BASE_DIR/第2章-音视频环境基础/2.3-Linux基础知识-1.md" << 'EOF'
---
title: Linux基础知识-1
icon: linux-basic
order: 3
---

# Linux基础知识-1

## 系统基础
- 文件系统
- 用户权限
- 进程管理
- 内存管理
- 网络配置

## 常用命令
- 文件操作
- 目录管理
- 系统信息
- 网络工具
- 进程控制

## 环境配置
- 系统设置
- 环境变量
- 软件安装
- 服务管理
- 启动配置

## 实践应用
- 命令练习
- 问题解决
- 配置优化
- 性能调优
- 安全设置
EOF

# 创建2.4Linux基础知识-2文件
cat > "$BASE_DIR/第2章-音视频环境基础/2.4-Linux基础知识-2.md" << 'EOF'
---
title: Linux基础知识-2
icon: linux-advanced
order: 4
---

# Linux基础知识-2

## 系统管理
- 服务配置
- 日志管理
- 任务调度
- 备份恢复
- 性能监控

## 网络管理
- 网络配置
- 防火墙
- 远程访问
- 网络服务
- 安全策略

## 开发环境
- 编译工具
- 开发库
- 调试工具
- 版本控制
- 部署工具

## 实践应用
- 环境搭建
- 问题诊断
- 性能优化
- 安全加固
- 运维管理
EOF

# 创建2.5巩固Linux基本命令文件
cat > "$BASE_DIR/第2章-音视频环境基础/2.5-巩固Linux基本命令.md" << 'EOF'
---
title: 巩固Linux基本命令
icon: linux-commands
order: 5
---

# 巩固Linux基本命令

## 文件操作
- 文件管理
- 权限设置
- 查找搜索
- 压缩解压
- 文本处理

## 系统管理
- 进程管理
- 用户管理
- 磁盘管理
- 服务控制
- 系统监控

## 网络工具
- 网络配置
- 远程连接
- 网络诊断
- 流量监控
- 安全工具

## 实践应用
- 命令组合
- 脚本编写
- 问题排查
- 日常运维
- 技巧总结
EOF

# 创建2.6巩固vim的简单使用文件
cat > "$BASE_DIR/第2章-音视频环境基础/2.6-巩固vim的简单使用.md" << 'EOF'
---
title: 巩固vim的简单使用
icon: vim-basic
order: 6
---

# 巩固vim的简单使用

## 基本操作
- 模式切换
- 光标移动
- 编辑命令
- 查找替换
- 复制粘贴

## 高级功能
- 多文件编辑
- 分屏操作
- 宏录制
- 代码折叠
- 自动补全

## 配置优化
- 基本设置
- 快捷键映射
- 插件管理
- 主题美化
- 个性化定制

## 实践应用
- 编辑技巧
- 效率提升
- 常见问题
- 使用心得
- 进阶建议
EOF

# 创建2.7Mac环境变量设置文件
cat > "$BASE_DIR/第2章-音视频环境基础/2.7-Mac环境变量设置.md" << 'EOF'
---
title: Mac环境变量设置
icon: mac-env
order: 7
---

# Mac环境变量设置

## 环境变量基础
- 变量类型
- 配置文件
- 作用域
- 优先级
- 生效机制

## 配置方法
- 临时设置
- 永久设置
- 用户级别
- 系统级别
- 应用级别

## 常见配置
- PATH设置
- 开发环境
- 工具路径
- 系统变量
- 应用变量

## 实践应用
- 配置示例
- 问题解决
- 最佳实践
- 调试方法
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第3章目录
mkdir -p "$BASE_DIR/第3章-在不同系统上编译ffmpeg"

# 创建第3章README文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/README.md" << 'EOF'
---
title: 在不同系统上编译ffmpeg
icon: ffmpeg-compile
order: 3
---

# 在不同系统上编译ffmpeg

本章详细介绍如何在不同操作系统平台上编译ffmpeg。
EOF

# 创建3.1Mac或Linux下编译ffmpeg文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/3.1-Mac或Linux下编译ffmpeg.md" << 'EOF'
---
title: Mac或Linux下编译ffmpeg
icon: unix-compile
order: 1
---

# Mac或Linux下编译ffmpeg

## 环境准备
- 开发工具
- 依赖库
- 编译工具
- 系统配置
- 源码下载

## 编译步骤
- 配置选项
- 编译命令
- 安装过程
- 测试验证
- 问题排查

## 优化配置
- 编码优化
- 硬件加速
- 功能裁剪
- 性能调优
- 调试支持

## 最佳实践
- 编译技巧
- 常见问题
- 性能优化
- 调试方法
- 注意事项
EOF

# 创建3.2Windows下编译ffmpeg文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/3.2-Windows下编译ffmpeg.md" << 'EOF'
---
title: Windows下编译ffmpeg
icon: windows-compile
order: 2
---

# Windows下编译ffmpeg

## 环境准备
- Visual Studio
- MSYS2环境
- 依赖库
- 编译工具
- 源码准备

## 编译步骤
- 环境配置
- 编译选项
- 构建过程
- 测试验证
- 问题处理

## 优化配置
- 编译优化
- 功能定制
- 性能调优
- 调试配置
- 依赖管理

## 最佳实践
- 编译技巧
- 常见问题
- 性能优化
- 调试方法
- 注意事项
EOF

# 创建3.3Cygwin环境搭建文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/3.3-Cygwin环境搭建.md" << 'EOF'
---
title: Cygwin环境搭建
icon: cygwin-setup
order: 3
---

# Cygwin环境搭建

## 安装配置
- 下载安装
- 包管理
- 环境变量
- 基础工具
- 开发工具

## 环境设置
- 系统配置
- 用户配置
- 路径设置
- 权限管理
- 网络配置

## 开发环境
- 编译工具
- 开发库
- 调试工具
- 版本控制
- 辅助工具

## 最佳实践
- 配置优化
- 常见问题
- 使用技巧
- 性能调优
- 注意事项
EOF

# 创建3.4Cygwin下安装ffmpeg文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/3.4-Cygwin下安装ffmpeg.md" << 'EOF'
---
title: Cygwin下安装ffmpeg
icon: cygwin-ffmpeg
order: 4
---

# Cygwin下安装ffmpeg

## 安装准备
- 环境检查
- 依赖安装
- 源码获取
- 工具配置
- 编译环境

## 安装步骤
- 配置选项
- 编译过程
- 安装验证
- 环境配置
- 问题处理

## 优化配置
- 功能定制
- 性能优化
- 调试支持
- 依赖管理
- 环境变量

## 最佳实践
- 安装技巧
- 常见问题
- 性能优化
- 调试方法
- 注意事项
EOF

# 创建3.5msys2环境搭建文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/3.5-msys2环境搭建.md" << 'EOF'
---
title: msys2环境搭建
icon: msys2-setup
order: 5
---

# msys2环境搭建

## 安装配置
- 下载安装
- 包管理
- 环境变量
- 基础工具
- 开发工具

## 环境设置
- 系统配置
- 用户配置
- 路径设置
- 权限管理
- 网络配置

## 开发环境
- 编译工具
- 开发库
- 调试工具
- 版本控制
- 辅助工具

## 最佳实践
- 配置优化
- 常见问题
- 使用技巧
- 性能调优
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建3.6msys2+mingw编译ffmpeg文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/3.6-msys2+mingw编译ffmpeg.md" << 'EOF'
---
title: msys2+mingw编译ffmpeg
icon: mingw-compile
order: 6
---

# msys2+mingw编译ffmpeg

## 环境配置
- MSYS2安装
- MinGW配置
- 依赖安装
- 工具链设置
- 环境变量

## 编译步骤
- 源码准备
- 配置选项
- 编译过程
- 安装验证
- 问题处理

## 优化配置
- 编译优化
- 功能定制
- 性能调优
- 调试支持
- 依赖管理

## 最佳实践
- 编译技巧
- 常见问题
- 性能优化
- 调试方法
- 注意事项
EOF

# 创建3.7msys2+vs编译ffmpeg文件
cat > "$BASE_DIR/第3章-在不同系统上编译ffmpeg/3.7-msys2+vs编译ffmpeg.md" << 'EOF'
---
title: msys2+vs编译ffmpeg
icon: vs-compile
order: 7
---

# msys2+vs编译ffmpeg

## 环境配置
- Visual Studio安装
- MSYS2配置
- 工具链设置
- 依赖安装
- 环境变量

## 编译步骤
- 源码准备
- 配置选项
- 编译过程
- 安装验证
- 问题处理

## 优化配置
- 编译优化
- 功能定制
- 性能调优
- 调试支持
- 依赖管理

## 最佳实践
- 编译技巧
- 常见问题
- 性能优化
- 调试方法
- 注意事项
EOF

# 创建第4章目录
mkdir -p "$BASE_DIR/第4章-C语言回顾"

# 创建第4章README文件
cat > "$BASE_DIR/第4章-C语言回顾/README.md" << 'EOF'
---
title: C语言回顾
icon: c-language
order: 4
---

# C语言回顾

本章回顾C语言的基础知识，为音视频开发打好基础。
EOF

# 创建4.1C语言HelloWorld文件
cat > "$BASE_DIR/第4章-C语言回顾/4.1-C语言HelloWorld.md" << 'EOF'
---
title: C语言HelloWorld
icon: c-hello
order: 1
---

# C语言HelloWorld

## 基础概念
- 程序结构
- 编译过程
- 运行机制
- 标准库
- 输入输出

## 开发环境
- 编译器
- IDE选择
- 环境配置
- 调试工具
- 项目管理

## 编程规范
- 代码风格
- 命名规则
- 注释规范
- 错误处理
- 最佳实践

## 实践应用
- 示例代码
- 常见问题
- 调试技巧
- 优化方法
- 注意事项
EOF

# 创建4.2基本类型与逻辑运算文件
cat > "$BASE_DIR/第4章-C语言回顾/4.2-基本类型与逻辑运算.md" << 'EOF'
---
title: 基本类型与逻辑运算
icon: c-basics
order: 2
---

# 基本类型与逻辑运算

## 基本类型
- 整型
- 浮点型
- 字符型
- 布尔型
- 空类型

## 运算符
- 算术运算
- 关系运算
- 逻辑运算
- 位运算
- 赋值运算

## 类型转换
- 隐式转换
- 显式转换
- 类型提升
- 精度损失
- 注意事项

## 实践应用
- 示例代码
- 常见问题
- 调试技巧
- 优化方法
- 注意事项
EOF

# 创建4.3高级类型-数组结构体枚举文件
cat > "$BASE_DIR/第4章-C语言回顾/4.3-高级类型-数组结构体枚举.md" << 'EOF'
---
title: 高级类型-数组结构体枚举
icon: c-advanced
order: 3
---

# 高级类型-数组结构体枚举

## 数组
- 一维数组
- 多维数组
- 数组操作
- 内存管理
- 常见应用

## 结构体
- 定义声明
- 成员访问
- 内存布局
- 嵌套结构
- 位域操作

## 枚举类型
- 定义方法
- 使用场景
- 类型转换
- 内存占用
- 最佳实践

## 实践应用
- 示例代码
- 常见问题
- 调试技巧
- 优化方法
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建4.4指针文件
cat > "$BASE_DIR/第4章-C语言回顾/4.4-指针.md" << 'EOF'
---
title: 指针
icon: c-pointer
order: 4
---

# 指针

## 基础概念
- 指针定义
- 内存地址
- 指针类型
- 空指针
- 野指针

## 指针操作
- 取址运算
- 解引用
- 指针运算
- 类型转换
- 指针比较

## 指针应用
- 数组指针
- 函数指针
- 指针数组
- 多级指针
- 常量指针

## 最佳实践
- 使用规范
- 常见问题
- 调试技巧
- 优化方法
- 注意事项
EOF

# 创建4.5指针的使用文件
cat > "$BASE_DIR/第4章-C语言回顾/4.5-指针的使用.md" << 'EOF'
---
title: 指针的使用
icon: pointer-usage
order: 5
---

# 指针的使用

## 基本应用
- 参数传递
- 动态内存
- 数组操作
- 字符串处理
- 结构体指针

## 高级应用
- 回调函数
- 链表操作
- 树结构
- 内存管理
- 指针优化

## 常见问题
- 内存泄漏
- 悬垂指针
- 越界访问
- 空指针
- 类型安全

## 最佳实践
- 编程规范
- 调试方法
- 性能优化
- 安全考虑
- 注意事项
EOF

# 创建4.6内存管理与分配文件
cat > "$BASE_DIR/第4章-C语言回顾/4.6-内存管理与分配.md" << 'EOF'
---
title: 内存管理与分配
icon: memory-management
order: 6
---

# 内存管理与分配

## 内存模型
- 栈内存
- 堆内存
- 全局区
- 常量区
- 代码区

## 内存操作
- malloc
- free
- calloc
- realloc
- memset

## 内存问题
- 内存泄漏
- 内存碎片
- 越界访问
- 重复释放
- 野指针

## 最佳实践
- 分配策略
- 释放规范
- 调试方法
- 性能优化
- 安全考虑
EOF

# 创建4.7条件判断与循环文件
cat > "$BASE_DIR/第4章-C语言回顾/4.7-条件判断与循环.md" << 'EOF'
---
title: 条件判断与循环
icon: control-flow
order: 7
---

# 条件判断与循环

## 条件语句
- if语句
- switch语句
- 三目运算
- 短路运算
- 嵌套条件

## 循环语句
- for循环
- while循环
- do-while循环
- break语句
- continue语句

## 流程控制
- 循环嵌套
- 跳转语句
- 异常处理
- 返回语句
- 标签语句

## 最佳实践
- 代码优化
- 性能考虑
- 可读性
- 调试技巧
- 注意事项
EOF

# 创建4.8函数文件
cat > "$BASE_DIR/第4章-C语言回顾/4.8-函数.md" << 'EOF'
---
title: 函数
icon: c-function
order: 8
---

# 函数

## 函数基础
- 函数定义
- 参数传递
- 返回值
- 函数原型
- 作用域

## 函数类型
- 内联函数
- 递归函数
- 回调函数
- 可变参数
- 库函数

## 函数指针
- 定义使用
- 函数回调
- 函数表
- 动态调用
- 类型安全

## 最佳实践
- 设计原则
- 性能优化
- 调试技巧
- 代码规范
- 注意事项
EOF

# 创建4.9文件操作文件
cat > "$BASE_DIR/第4章-C语言回顾/4.9-文件操作.md" << 'EOF'
---
title: 文件操作
icon: file-operation
order: 9
---

# 文件操作

## 文件基础
- 文件概念
- 文件类型
- 文件指针
- 文件模式
- 缓冲区

## 文件操作
- 打开关闭
- 读写操作
- 定位操作
- 错误处理
- 文件状态

## 高级操作
- 二进制操作
- 随机访问
- 文件流
- 目录操作
- 文件属性

## 最佳实践
- 操作规范
- 错误处理
- 性能优化
- 安全考虑
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第5章目录
mkdir -p "$BASE_DIR/第5章-音频基础知识"

# 创建第5章README文件
cat > "$BASE_DIR/第5章-音频基础知识/README.md" << 'EOF'
---
title: 音频基础知识
icon: audio-basics
order: 5
---

# 音频基础知识

本章介绍音频开发的基础知识和核心概念。
EOF

# 创建5.1音视频处理流程文件
cat > "$BASE_DIR/第5章-音频基础知识/5.1-音视频处理流程.md" << 'EOF'
---
title: 音视频处理流程
icon: av-process
order: 1
---

# 音视频处理流程

## 采集阶段
- 音频采集
- 视频采集
- 设备控制
- 参数设置
- 数据缓冲

## 处理阶段
- 数据编码
- 格式转换
- 滤镜处理
- 特效添加
- 音视频同步

## 传输阶段
- 数据封装
- 网络传输
- 流媒体协议
- 缓冲控制
- 错误处理

## 播放阶段
- 解码播放
- 同步控制
- 渲染显示
- 音频输出
- 性能优化
EOF

# 创建5.2声音的产生与传播文件
cat > "$BASE_DIR/第5章-音频基础知识/5.2-声音的产生与传播.md" << 'EOF'
---
title: 声音的产生与传播
icon: sound-basics
order: 2
---

# 声音的产生与传播

## 声音本质
- 振动原理
- 波动特性
- 传播介质
- 声波特征
- 能量转换

## 传播特性
- 传播速度
- 反射折射
- 衍射干涉
- 多普勒效应
- 声音衰减

## 声学特性
- 频率特性
- 响度特性
- 音色特性
- 相位特性
- 空间特性

## 应用实践
- 声音采集
- 声音处理
- 声音合成
- 声音识别
- 声音增强
EOF

# 创建5.3声音的三要素文件
cat > "$BASE_DIR/第5章-音频基础知识/5.3-声音的三要素.md" << 'EOF'
---
title: 声音的三要素
icon: sound-elements
order: 3
---

# 声音的三要素

## 音调
- 频率特性
- 音高变化
- 音阶关系
- 音调测量
- 音调处理

## 音量
- 振幅特性
- 分贝计算
- 响度曲线
- 音量控制
- 动态范围

## 音色
- 谐波结构
- 频谱分析
- 音色特征
- 音色识别
- 音色合成

## 应用实践
- 音频处理
- 音效制作
- 音质增强
- 音频分析
- 音频合成
EOF

# 创建5.4模数转换文件
cat > "$BASE_DIR/第5章-音频基础知识/5.4-模数转换.md" << 'EOF'
---
title: 模数转换
icon: adc-conversion
order: 4
---

# 模数转换

## 采样原理
- 采样定理
- 采样频率
- 量化精度
- 采样误差
- 抗混叠

## 量化过程
- 量化等级
- 量化噪声
- 动态范围
- 线性量化
- 非线性量化

## 编码方式
- PCM编码
- 压缩编码
- 差分编码
- 自适应编码
- 无损编码

## 实践应用
- 转换技术
- 误差控制
- 性能优化
- 质量评估
- 应用场景
EOF

# 创建5.5PCM与WAV文件
cat > "$BASE_DIR/第5章-音频基础知识/5.5-PCM与WAV.md" << 'EOF'
---
title: PCM与WAV
icon: audio-format
order: 5
---

# PCM与WAV

## PCM格式
- 数据结构
- 采样格式
- 存储方式
- 位深度
- 通道数

## WAV格式
- 文件结构
- 头部信息
- 数据块
- 格式标识
- 扩展信息

## 格式转换
- PCM转WAV
- WAV解析
- 数据处理
- 格式验证
- 质量控制

## 实践应用
- 音频采集
- 音频处理
- 音频播放
- 格式转换
- 性能优化
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第6章目录
mkdir -p "$BASE_DIR/第6章-实战音频采集"

# 创建第6章README文件
cat > "$BASE_DIR/第6章-实战音频采集/README.md" << 'EOF'
---
title: 实战音频采集
icon: audio-capture
order: 6
---

# 实战音频采集

本章介绍音频采集的实战应用，包括命令行采集和Mac应用开发。
EOF

# 创建6.1命令行采集音频数据文件
cat > "$BASE_DIR/第6章-实战音频采集/6.1-命令行采集音频数据.md" << 'EOF'
---
title: 命令行采集音频数据
icon: cli-capture
order: 1
---

# 命令行采集音频数据

## 采集基础
- 设备选择
- 参数配置
- 数据格式
- 缓冲设置
- 错误处理

## 实现流程
- 设备初始化
- 数据采集
- 数据处理
- 数据存储
- 资源释放

## 命令行工具
- 参数解析
- 交互设计
- 进度显示
- 错误提示
- 日志记录

## 最佳实践
- 性能优化
- 异常处理
- 资源管理
- 调试技巧
- 注意事项
EOF

# 创建6.2Swift语法一文件
cat > "$BASE_DIR/第6章-实战音频采集/6.2-Swift语法一.md" << 'EOF'
---
title: Swift语法一
icon: swift-basic
order: 2
---

# Swift语法一

## 基础语法
- 变量常量
- 基本类型
- 运算符
- 控制流
- 函数定义

## 集合类型
- 数组
- 字典
- 集合
- 元组
- 序列

## 面向对象
- 类定义
- 属性方法
- 继承多态
- 构造析构
- 访问控制

## 最佳实践
- 代码规范
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.3Swift语法二文件
cat > "$BASE_DIR/第6章-实战音频采集/6.3-Swift语法二.md" << 'EOF'
---
title: Swift语法二
icon: swift-advanced
order: 3
---

# Swift语法二

## 高级特性
- 泛型
- 协议
- 扩展
- 错误处理
- 并发编程

## 函数式编程
- 闭包
- 高阶函数
- 函数式特性
- 链式调用
- 响应式编程

## 内存管理
- ARC机制
- 循环引用
- 弱引用
- 未占用引用
- 内存泄漏

## 最佳实践
- 设计模式
- 代码优化
- 调试技巧
- 性能优化
- 注意事项
EOF

# 创建6.4创建Mac App文件
cat > "$BASE_DIR/第6章-实战音频采集/6.4-创建Mac App.md" << 'EOF'
---
title: 创建Mac App
icon: mac-app
order: 4
---

# 创建Mac App

## 项目创建
- 工程配置
- 目录结构
- 资源管理
- 依赖设置
- 编译配置

## 界面设计
- 窗口布局
- 控件使用
- 事件处理
- 动画效果
- 主题样式

## 功能实现
- 业务逻辑
- 数据处理
- 网络通信
- 本地存储
- 多线程处理

## 最佳实践
- 架构设计
- 性能优化
- 调试技巧
- 发布部署
- 注意事项
EOF

# 创建6.5创建Button文件
cat > "$BASE_DIR/第6章-实战音频采集/6.5-创建Button.md" << 'EOF'
---
title: 创建Button
icon: button-design
order: 5
---

# 创建Button

## 基础实现
- 按钮创建
- 属性设置
- 样式定制
- 事件绑定
- 状态管理

## 交互设计
- 点击效果
- 状态切换
- 动画效果
- 手势识别
- 无障碍支持

## 高级特性
- 自定义样式
- 图文混排
- 边框效果
- 渐变背景
- 阴影效果

## 最佳实践
- 复用设计
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.6Swift调用C语言文件
cat > "$BASE_DIR/第6章-实战音频采集/6.6-Swift调用C语言.md" << 'EOF'
---
title: Swift调用C语言
icon: swift-c
order: 6
---

# Swift调用C语言

## 基础知识
- 桥接原理
- 类型映射
- 函数调用
- 指针操作
- 内存管理

## 实现方法
- 桥接头文件
- 模块封装
- 数据转换
- 错误处理
- 性能优化

## 高级应用
- 回调函数
- 结构体处理
- 指针操作
- 内存管理
- 异常处理

## 最佳实践
- 接口设计
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建6.7引入ffmpeg库文件
cat > "$BASE_DIR/第6章-实战音频采集/6.7-引入ffmpeg库.md" << 'EOF'
---
title: 引入ffmpeg库
icon: ffmpeg-lib
order: 7
---

# 引入ffmpeg库

## 环境配置
- 库文件导入
- 头文件配置
- 链接设置
- 版本管理
- 依赖处理

## 接口封装
- 核心API
- 错误处理
- 类型转换
- 内存管理
- 资源释放

## 功能实现
- 初始化配置
- 设备管理
- 数据处理
- 编解码
- 格式转换

## 最佳实践
- 接口设计
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.8打开音频设备文件
cat > "$BASE_DIR/第6章-实战音频采集/6.8-打开音频设备.md" << 'EOF'
---
title: 打开音频设备
icon: audio-device
order: 8
---

# 打开音频设备

## 设备管理
- 设备枚举
- 设备选择
- 参数配置
- 状态监控
- 错误处理

## 初始化流程
- 设备打开
- 格式设置
- 缓冲配置
- 回调设置
- 资源分配

## 错误处理
- 异常检测
- 错误恢复
- 日志记录
- 状态报告
- 资源清理

## 最佳实践
- 设备选择
- 参数优化
- 性能调优
- 调试方法
- 注意事项
EOF

# 创建6.9读取音频数据文件
cat > "$BASE_DIR/第6章-实战音频采集/6.9-读取音频数据.md" << 'EOF'
---
title: 读取音频数据
icon: audio-read
order: 9
---

# 读取音频数据

## 数据读取
- 缓冲管理
- 同步读取
- 异步读取
- 数据格式
- 错误处理

## 数据处理
- 格式转换
- 数据过滤
- 音量控制
- 降噪处理
- 实时处理

## 性能优化
- 缓冲策略
- 线程管理
- 内存优化
- CPU优化
- 延迟控制

## 最佳实践
- 读取策略
- 错误处理
- 性能优化
- 调试方法
- 注意事项
EOF

# 创建6.10代码优化文件
cat > "$BASE_DIR/第6章-实战音频采集/6.10-代码优化.md" << 'EOF'
---
title: 代码优化
icon: code-optimize
order: 10
---

# 代码优化

## 结构优化
- 代码重构
- 模块划分
- 接口设计
- 异常处理
- 资源管理

## 性能优化
- 算法优化
- 内存管理
- 线程优化
- 缓存策略
- IO优化

## 代码质量
- 代码规范
- 注释文档
- 单元测试
- 代码审查
- 版本控制

## 最佳实践
- 设计模式
- 性能调优
- 调试技巧
- 维护策略
- 注意事项
EOF

# 创建6.11录制音频数据文件
cat > "$BASE_DIR/第6章-实战音频采集/6.11-录制音频数据.md" << 'EOF'
---
title: 录制音频数据
icon: audio-record
order: 11
---

# 录制音频数据

## 录制流程
- 设备初始化
- 参数配置
- 数据采集
- 数据存储
- 资源释放

## 数据处理
- 格式转换
- 音频编码
- 文件写入
- 缓冲管理
- 错误处理

## 控制管理
- 开始录制
- 暂停继续
- 停止录制
- 状态监控
- 错误恢复

## 最佳实践
- 录制策略
- 性能优化
- 质量控制
- 调试方法
- 注意事项
EOF

# 创建6.12界面控制录制文件
cat > "$BASE_DIR/第6章-实战音频采集/6.12-界面控制录制.md" << 'EOF'
---
title: 界面控制录制
icon: ui-control
order: 12
---

# 界面控制录制

## 界面设计
- 控件布局
- 事件绑定
- 状态显示
- 交互设计
- 样式美化

## 控制逻辑
- 录制控制
- 状态管理
- 参数设置
- 错误处理
- 数据显示

## 功能实现
- 开始录制
- 暂停继续
- 停止保存
- 进度显示
- 状态反馈

## 最佳实践
- 界面优化
- 交互体验
- 性能优化
- 调试方法
- 注意事项
EOF

# 创建6.13采集音频数据命令文件
cat > "$BASE_DIR/第6章-实战音频采集/6.13-采集音频数据命令.md" << 'EOF'
---
title: 采集音频数据命令
icon: audio-command
order: 13
---

# 采集音频数据命令

## 命令设计
- 参数定义
- 选项解析
- 帮助信息
- 错误提示
- 使用说明

## 功能实现
- 设备控制
- 数据采集
- 文件保存
- 状态显示
- 错误处理

## 交互设计
- 命令提示
- 进度显示
- 状态反馈
- 错误提示
- 帮助信息

## 最佳实践
- 命令设计
- 参数处理
- 错误处理
- 调试方法
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建6.14打开设备文件
cat > "$BASE_DIR/第6章-实战音频采集/6.14-打开设备.md" << 'EOF'
---
title: 打开设备
icon: device-open
order: 14
---

# 打开设备

## 设备操作
- 设备枚举
- 设备选择
- 设备打开
- 参数设置
- 错误处理

## 初始化流程
- 资源分配
- 参数配置
- 状态检查
- 错误恢复
- 资源释放

## 异常处理
- 错误类型
- 错误检测
- 错误恢复
- 日志记录
- 状态报告

## 最佳实践
- 设备管理
- 性能优化
- 资源控制
- 调试方法
- 注意事项
EOF

# 创建6.15音频设备参数修改文件
cat > "$BASE_DIR/第6章-实战音频采集/6.15-音频设备参数修改.md" << 'EOF'
---
title: 音频设备参数修改
icon: device-params
order: 15
---

# 音频设备参数修改

## 参数类型
- 采样率
- 通道数
- 位深度
- 缓冲大小
- 格式设置

## 修改流程
- 参数验证
- 参数设置
- 效果确认
- 错误处理
- 状态更新

## 优化调整
- 性能优化
- 质量控制
- 延迟控制
- 资源管理
- 兼容性处理

## 最佳实践
- 参数选择
- 性能调优
- 质量保证
- 调试方法
- 注意事项
EOF

# 创建6.16获取音频设备参数文件
cat > "$BASE_DIR/第6章-实战音频采集/6.16-获取音频设备参数.md" << 'EOF'
---
title: 获取音频设备参数
icon: device-info
order: 16
---

# 获取音频设备参数

## 参数获取
- 设备信息
- 当前配置
- 支持格式
- 性能参数
- 状态信息

## 数据处理
- 参数解析
- 数据转换
- 格式验证
- 信息展示
- 错误处理

## 应用场景
- 设备检测
- 参数调优
- 状态监控
- 问题诊断
- 性能分析

## 最佳实践
- 参数管理
- 信息展示
- 错误处理
- 调试方法
- 注意事项
EOF

# 创建6.17采集音频数据错误分析文件
cat > "$BASE_DIR/第6章-实战音频采集/6.17-采集音频数据错误分析.md" << 'EOF'
---
title: 采集音频数据错误分析
icon: error-analysis
order: 17
---

# 采集音频数据错误分析

## 错误类型
- 设备错误
- 参数错误
- 资源错误
- 操作错误
- 系统错误

## 分析方法
- 错误定位
- 原因分析
- 日志分析
- 状态检查
- 性能分析

## 解决方案
- 错误处理
- 参数调整
- 资源优化
- 代码修复
- 性能优化

## 最佳实践
- 错误预防
- 监控告警
- 调试技巧
- 优化建议
- 注意事项
EOF

# 创建第7章目录
mkdir -p "$BASE_DIR/第7章-音频编码原理"

# 创建第7章README文件
cat > "$BASE_DIR/第7章-音频编码原理/README.md" << 'EOF'
---
title: 音频编码原理
icon: audio-encoding
order: 7
---

# 音频编码原理

本章介绍音频编码的基本原理和核心技术。
EOF

# 创建7.1音频有损压缩技术文件
cat > "$BASE_DIR/第7章-音频编码原理/7.1-音频有损压缩技术.md" << 'EOF'
---
title: 音频有损压缩技术
icon: lossy-compression
order: 1
---

# 音频有损压缩技术

## 基本原理
- 听觉模型
- 频率掩蔽
- 时域掩蔽
- 量化编码
- 熵编码

## 压缩算法
- MP3编码
- AAC编码
- Opus编码
- Vorbis编码
- 压缩比控制

## 质量控制
- 码率控制
- 失真控制
- 音质评估
- 兼容性
- 性能优化

## 最佳实践
- 参数选择
- 质量控制
- 性能优化
- 应用场景
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建7.2音频无损压缩技术文件
cat > "$BASE_DIR/第7章-音频编码原理/7.2-音频无损压缩技术.md" << 'EOF'
---
title: 音频无损压缩技术
icon: lossless-compression
order: 2
---

# 音频无损压缩技术

## 基本原理
- 熵编码
- 预测编码
- 游程编码
- 字典编码
- 差分编码

## 压缩算法
- FLAC编码
- ALAC编码
- APE编码
- WavPack
- 压缩比控制

## 应用场景
- 音乐存储
- 专业录音
- 音频归档
- 音质保真
- 数据备份

## 最佳实践
- 算法选择
- 参数优化
- 性能调优
- 应用场景
- 注意事项
EOF

# 创建7.3编解码器比较文件
cat > "$BASE_DIR/第7章-音频编码原理/7.3-编解码器比较.md" << 'EOF'
---
title: 编解码器比较
icon: codec-comparison
order: 3
---

# 编解码器比较

## 有损编码器
- MP3特点
- AAC特点
- Opus特点
- Vorbis特点
- 应用场景

## 无损编码器
- FLAC特点
- ALAC特点
- APE特点
- WavPack特点
- 应用场景

## 性能对比
- 压缩比率
- 音质评估
- 编码速度
- 解码速度
- 资源消耗

## 选择建议
- 场景匹配
- 性能要求
- 质量要求
- 兼容性
- 成本考虑
EOF

# 创建7.4AAC编码器介绍文件
cat > "$BASE_DIR/第7章-音频编码原理/7.4-AAC编码器介绍.md" << 'EOF'
---
title: AAC编码器介绍
icon: aac-codec
order: 4
---

# AAC编码器介绍

## 基本原理
- 编码框架
- 心理声学模型
- 频率变换
- 量化编码
- 熵编码

## 编码特性
- 编码模式
- 码率控制
- 质量控制
- 延迟控制
- 错误恢复

## 编码工具
- 编码器选择
- 参数配置
- 性能优化
- 质量控制
- 调试方法

## 最佳实践
- 参数选择
- 性能优化
- 质量控制
- 应用场景
- 注意事项
EOF

# 创建7.5ADTS格式文件
cat > "$BASE_DIR/第7章-音频编码原理/7.5-ADTS格式.md" << 'EOF'
---
title: ADTS格式
icon: adts-format
order: 5
---

# ADTS格式

## 格式结构
- 帧头结构
- 数据结构
- 同步字段
- 配置信息
- CRC校验

## 解析方法
- 帧同步
- 参数解析
- 数据提取
- 错误检测
- 格式转换

## 应用场景
- 流媒体传输
- 文件存储
- 实时编码
- 音频播放
- 格式转换

## 最佳实践
- 格式处理
- 错误处理
- 性能优化
- 应用场景
- 注意事项
EOF

# 创建7.6ffmpeg生成AAC数据文件
cat > "$BASE_DIR/第7章-音频编码原理/7.6-ffmpeg生成AAC数据.md" << 'EOF'
---
title: ffmpeg生成AAC数据
icon: ffmpeg-aac
order: 6
---

# ffmpeg生成AAC数据

## 编码流程
- 输入处理
- 参数配置
- 编码过程
- 数据输出
- 错误处理

## 参数设置
- 编码器选择
- 码率设置
- 采样率
- 通道数
- 格式选项

## 命令使用
- 基本命令
- 参数说明
- 选项配置
- 输出控制
- 错误处理

## 最佳实践
- 参数优化
- 质量控制
- 性能调优
- 应用场景
- 注意事项
EOF

# 创建第8章目录
mkdir -p "$BASE_DIR/第8章-实战音频编码"

# 创建第8章README文件
cat > "$BASE_DIR/第8章-实战音频编码/README.md" << 'EOF'
---
title: 实战音频编码
icon: audio-encoding-practice
order: 8
---

# 实战音频编码

本章介绍音频编码的实战应用，包括编码器的使用和优化。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.1音频重采样文件
cat > "$BASE_DIR/第8章-实战音频编码/8.1-音频重采样.md" << 'EOF'
---
title: 音频重采样
icon: audio-resampling
order: 1
---

# 音频重采样

## 基本概念
- 采样率转换
- 通道数转换
- 位深度转换
- 格式转换
- 质量控制

## 重采样算法
- 线性插值
- 多相滤波
- 样条插值
- 频域重采样
- 质量参数

## 实现方法
- 参数配置
- 数据处理
- 缓冲管理
- 错误处理
- 性能优化

## 最佳实践
- 算法选择
- 参数优化
- 质量控制
- 性能调优
- 注意事项
EOF

# 创建8.2实战音频重采样1文件
cat > "$BASE_DIR/第8章-实战音频编码/8.2-实战音频重采样1.md" << 'EOF'
---
title: 实战音频重采样1
icon: resampling-practice1
order: 2
---

# 实战音频重采样1

## 环境准备
- 开发环境
- 依赖安装
- 工具配置
- 参数设置
- 测试数据

## 代码实现
- 初始化配置
- 数据读取
- 重采样处理
- 数据输出
- 资源释放

## 功能测试
- 参数验证
- 功能测试
- 性能测试
- 质量评估
- 问题排查

## 最佳实践
- 代码优化
- 性能调优
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建8.3实战音频重采样2文件
cat > "$BASE_DIR/第8章-实战音频编码/8.3-实战音频重采样2.md" << 'EOF'
---
title: 实战音频重采样2
icon: resampling-practice2
order: 3
---

# 实战音频重采样2

## 高级特性
- 多通道处理
- 批量处理
- 实时处理
- 质量控制
- 性能优化

## 实现优化
- 算法优化
- 内存优化
- 并发处理
- 缓存策略
- 错误处理

## 性能测试
- 基准测试
- 压力测试
- 内存分析
- CPU分析
- 性能优化

## 最佳实践
- 架构设计
- 代码优化
- 性能调优
- 调试技巧
- 注意事项
EOF

# 创建8.4创建AAC编码器1文件
cat > "$BASE_DIR/第8章-实战音频编码/8.4-创建AAC编码器1.md" << 'EOF'
---
title: 创建AAC编码器1
icon: aac-encoder1
order: 4
---

# 创建AAC编码器1

## 初始化配置
- 编码器选择
- 参数设置
- 资源分配
- 状态初始化
- 错误处理

## 基础实现
- 编码器创建
- 参数配置
- 缓冲管理
- 状态控制
- 资源管理

## 功能测试
- 参数验证
- 功能测试
- 性能测试
- 质量评估
- 问题排查

## 最佳实践
- 代码优化
- 性能调优
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建8.5创建AAC编码器2文件
cat > "$BASE_DIR/第8章-实战音频编码/8.5-创建AAC编码器2.md" << 'EOF'
---
title: 创建AAC编码器2
icon: aac-encoder2
order: 5
---

# 创建AAC编码器2

## 高级特性
- 多实例支持
- 并发处理
- 实时编码
- 质量控制
- 性能优化

## 实现优化
- 算法优化
- 内存优化
- 并发处理
- 缓存策略
- 错误处理

## 性能测试
- 基准测试
- 压力测试
- 内存分析
- CPU分析
- 性能优化

## 最佳实践
- 架构设计
- 代码优化
- 性能调优
- 调试技巧
- 注意事项
EOF

# 创建8.6编码输入输出数据文件
cat > "$BASE_DIR/第8章-实战音频编码/8.6-编码输入输出数据.md" << 'EOF'
---
title: 编码输入输出数据
icon: codec-io
order: 6
---

# 编码输入输出数据

## 数据流处理
- 输入格式
- 输出格式
- 数据转换
- 缓冲管理
- 同步控制

## 实现方法
- 数据读取
- 数据处理
- 数据写入
- 错误处理
- 资源管理

## 优化策略
- 缓冲优化
- 并发处理
- 内存管理
- 性能优化
- 质量控制

## 最佳实践
- 设计模式
- 代码优化
- 性能调优
- 调试技巧
- 注意事项
EOF

# 创建8.7AAC编码过程1文件
cat > "$BASE_DIR/第8章-实战音频编码/8.7-AAC编码过程1.md" << 'EOF'
---
title: AAC编码过程1
icon: aac-process1
order: 7
---

# AAC编码过程1

## 编码流程
- 数据预处理
- 频谱分析
- 心理声学模型
- 量化编码
- 熵编码

## 实现细节
- 帧同步
- 数据分帧
- 变换编码
- 比特分配
- 数据打包

## 优化策略
- 算法优化
- 内存优化
- 并发处理
- 缓存策略
- 错误处理

## 最佳实践
- 参数选择
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.8AAC编码过程2文件
cat > "$BASE_DIR/第8章-实战音频编码/8.8-AAC编码过程2.md" << 'EOF'
---
title: AAC编码过程2
icon: aac-process2
order: 8
---

# AAC编码过程2

## 高级特性
- 多通道编码
- 动态码率控制
- 质量控制
- 延迟控制
- 错误恢复

## 优化实现
- 并行处理
- 缓存优化
- 内存管理
- 性能优化
- 资源控制

## 调试分析
- 性能分析
- 内存分析
- 质量评估
- 问题诊断
- 优化建议

## 最佳实践
- 参数配置
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建8.9代码优化1文件
cat > "$BASE_DIR/第8章-实战音频编码/8.9-代码优化1.md" << 'EOF'
---
title: 代码优化1
icon: code-optimize1
order: 9
---

# 代码优化1

## 结构优化
- 代码重构
- 模块划分
- 接口设计
- 异常处理
- 资源管理

## 算法优化
- 计算优化
- 内存优化
- 缓存策略
- 并发处理
- 性能提升

## 代码质量
- 代码规范
- 注释文档
- 单元测试
- 代码审查
- 版本控制

## 最佳实践
- 设计模式
- 性能调优
- 调试技巧
- 维护策略
- 注意事项
EOF

# 创建8.10代码优化2文件
cat > "$BASE_DIR/第8章-实战音频编码/8.10-代码优化2.md" << 'EOF'
---
title: 代码优化2
icon: code-optimize2
order: 10
---

# 代码优化2

## 性能优化
- CPU优化
- 内存优化
- IO优化
- 并发优化
- 缓存优化

## 资源管理
- 内存管理
- 线程管理
- 文件管理
- 网络资源
- 系统资源

## 调试分析
- 性能分析
- 内存分析
- 代码分析
- 问题诊断
- 优化建议

## 最佳实践
- 优化策略
- 性能监控
- 调试技巧
- 维护方法
- 注意事项
EOF

# 创建8.11代码优化3文件
cat > "$BASE_DIR/第8章-实战音频编码/8.11-代码优化3.md" << 'EOF'
---
title: 代码优化3
icon: code-optimize3
order: 11
---

# 代码优化3

## 高级优化
- 编译优化
- 链接优化
- 运行时优化
- 系统调优
- 平台适配

## 工具应用
- 性能工具
- 调试工具
- 分析工具
- 监控工具
- 优化工具

## 实践技巧
- 优化方法
- 调试技巧
- 问题排查
- 性能调优
- 经验总结

## 最佳实践
- 优化策略
- 工具使用
- 调试方法
- 维护技巧
- 注意事项
EOF

# 创建第9章目录
mkdir -p "$BASE_DIR/第9章-视频基础知识"

# 创建第9章README文件
cat > "$BASE_DIR/第9章-视频基础知识/README.md" << 'EOF'
---
title: 视频基础知识
icon: video-basics
order: 9
---

# 视频基础知识

本章介绍视频开发的基础知识和核心概念。
EOF

# 创建9.1图像基本概念文件
cat > "$BASE_DIR/第9章-视频基础知识/9.1-图像基本概念.md" << 'EOF'
---
title: 图像基本概念
icon: image-basics
order: 1
---

# 图像基本概念

## 基础概念
- 像素定义
- 分辨率
- 色彩空间
- 图像格式
- 压缩编码

## 图像特性
- 亮度对比
- 色彩饱和
- 色彩平衡
- 锐度清晰
- 噪点控制

## 处理技术
- 图像增强
- 色彩调整
- 滤镜效果
- 图像变换
- 特效处理

## 最佳实践
- 参数选择
- 质量控制
- 性能优化
- 应用场景
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建9.2屏幕显示器文件
cat > "$BASE_DIR/第9章-视频基础知识/9.2-屏幕显示器.md" << 'EOF'
---
title: 屏幕显示器
icon: display
order: 2
---

# 屏幕显示器

## 显示原理
- 显示技术
- 刷新机制
- 分辨率
- 色彩深度
- 显示标准

## 显示参数
- 刷新率
- 响应时间
- 对比度
- 亮度
- 色域

## 接口技术
- HDMI
- DisplayPort
- VGA
- DVI
- Type-C

## 最佳实践
- 参数选择
- 质量控制
- 性能优化
- 应用场景
- 注意事项
EOF

# 创建9.3码流计算文件
cat > "$BASE_DIR/第9章-视频基础知识/9.3-码流计算.md" << 'EOF'
---
title: 码流计算
icon: bitrate
order: 3
---

# 码流计算

## 基础概念
- 码率定义
- 带宽要求
- 压缩比率
- 质量关系
- 存储需求

## 计算方法
- 原始码率
- 压缩码率
- 传输码率
- 存储容量
- 带宽需求

## 优化策略
- 码率控制
- 质量平衡
- 带宽优化
- 存储优化
- 实时性能

## 最佳实践
- 参数选择
- 质量控制
- 性能优化
- 应用场景
- 注意事项
EOF

# 创建9.4图像显示文件
cat > "$BASE_DIR/第9章-视频基础知识/9.4-图像显示.md" << 'EOF'
---
title: 图像显示
icon: image-display
order: 4
---

# 图像显示

## 显示原理
- 图像渲染
- 缓冲机制
- 同步技术
- 显示控制
- 性能优化

## 显示技术
- 硬件加速
- 软件渲染
- 双缓冲
- 垂直同步
- 帧率控制

## 实现方法
- 显示初始化
- 图像绘制
- 刷新控制
- 同步处理
- 资源管理

## 最佳实践
- 性能优化
- 质量控制
- 同步处理
- 调试技巧
- 注意事项
EOF

# 创建9.5YUV概述文件
cat > "$BASE_DIR/第9章-视频基础知识/9.5-YUV概述.md" << 'EOF'
---
title: YUV概述
icon: yuv-intro
order: 5
---

# YUV概述

## 基础概念
- YUV定义
- 色彩空间
- 采样方式
- 格式类型
- 应用场景

## 技术特点
- 亮度分量
- 色度分量
- 带宽效率
- 压缩特性
- 转换关系

## 应用优势
- 压缩效率
- 兼容性
- 处理性能
- 存储效率
- 传输优势

## 最佳实践
- 格式选择
- 转换处理
- 性能优化
- 应用场景
- 注意事项
EOF

# 创建9.6YUV常见格式文件
cat > "$BASE_DIR/第9章-视频基础知识/9.6-YUV常见格式.md" << 'EOF'
---
title: YUV常见格式
icon: yuv-formats
order: 6
---

# YUV常见格式

## 采样格式
- YUV420
- YUV422
- YUV444
- YUV400
- 格式特点

## 存储方式
- 平面格式
- 打包格式
- 混合格式
- 存储效率
- 访问特性

## 应用场景
- 视频编码
- 图像处理
- 显示输出
- 格式转换
- 性能要求

## 最佳实践
- 格式选择
- 转换处理
- 性能优化
- 应用场景
- 注意事项
EOF

# 创建9.7YUV存储格式文件
cat > "$BASE_DIR/第9章-视频基础知识/9.7-YUV存储格式.md" << 'EOF'
---
title: YUV存储格式
icon: yuv-storage
order: 7
---

# YUV存储格式

## 存储结构
- 内存布局
- 数据对齐
- 访问方式
- 缓冲管理
- 存储优化

## 格式特点
- 平面存储
- 打包存储
- 混合存储
- 存储效率
- 访问性能

## 处理方法
- 数据读写
- 格式转换
- 内存管理
- 性能优化
- 资源控制

## 最佳实践
- 格式选择
- 存储优化
- 性能调优
- 应用场景
- 注意事项
EOF

# 创建9.8YUV实战文件
cat > "$BASE_DIR/第9章-视频基础知识/9.8-YUV实战.md" << 'EOF'
---
title: YUV实战
icon: yuv-practice
order: 8
---

# YUV实战

## 实现基础
- 格式处理
- 数据转换
- 内存管理
- 性能优化
- 错误处理

## 功能实现
- 读写操作
- 格式转换
- 图像处理
- 显示输出
- 性能优化

## 应用案例
- 视频编码
- 图像处理
- 显示输出
- 格式转换
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建9.9实战采集视频数据1文件
cat > "$BASE_DIR/第9章-视频基础知识/9.9-实战采集视频数据1.md" << 'EOF'
---
title: 实战采集视频数据1
icon: video-capture1
order: 9
---

# 实战采集视频数据1

## 采集准备
- 设备选择
- 参数配置
- 初始化设置
- 缓冲管理
- 错误处理

## 实现流程
- 设备打开
- 参数设置
- 数据采集
- 格式转换
- 数据存储

## 性能优化
- 采集效率
- 内存管理
- 并发处理
- 缓存策略
- 实时性能

## 最佳实践
- 采集策略
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建9.10实战采集视频数据2文件
cat > "$BASE_DIR/第9章-视频基础知识/9.10-实战采集视频数据2.md" << 'EOF'
---
title: 实战采集视频数据2
icon: video-capture2
order: 10
---

# 实战采集视频数据2

## 高级特性
- 多路采集
- 实时处理
- 同步控制
- 质量控制
- 性能优化

## 功能实现
- 数据处理
- 格式转换
- 编码压缩
- 存储管理
- 错误处理

## 调试优化
- 性能分析
- 内存分析
- 问题诊断
- 优化建议
- 调试技巧

## 最佳实践
- 实现策略
- 性能优化
- 质量控制
- 调试方法
- 注意事项
EOF

# 创建第10章目录
mkdir -p "$BASE_DIR/第10章-H264编码原理"

# 创建第10章README文件
cat > "$BASE_DIR/第10章-H264编码原理/README.md" << 'EOF'
---
title: H264编码原理
icon: h264-basics
order: 10
---

# H264编码原理

本章介绍H264视频编码的基本原理和核心技术。
EOF

# 创建10.1H264压缩与GOP文件
cat > "$BASE_DIR/第10章-H264编码原理/10.1-H264压缩与GOP.md" << 'EOF'
---
title: H264压缩与GOP
icon: h264-compression
order: 1
---

# H264压缩与GOP

## 压缩原理
- 空间压缩
- 时间压缩
- 熵编码
- 预测编码
- 运动补偿

## GOP结构
- GOP定义
- 关键帧
- 帧间关系
- 编码效率
- 解码依赖

## 参数控制
- GOP大小
- 码率控制
- 质量控制
- 延迟控制
- 参考关系

## 最佳实践
- 参数选择
- 性能优化
- 质量控制
- 应用场景
- 注意事项
EOF

# 创建10.2I帧P帧B帧文件
cat > "$BASE_DIR/第10章-H264编码原理/10.2-I帧P帧B帧.md" << 'EOF'
---
title: I帧P帧B帧
icon: frame-types
order: 2
---

# I帧P帧B帧

## 帧类型
- I帧特性
- P帧特性
- B帧特性
- 编码效率
- 解码依赖

## 编码特点
- 压缩比率
- 质量控制
- 延迟影响
- 带宽需求
- 解码复杂度

## 应用场景
- 实时传输
- 存储应用
- 直播系统
- 视频点播
- 质量要求

## 最佳实践
- 帧类型选择
- 参数优化
- 性能调优
- 应用场景
- 注意事项
EOF

# 创建10.3宏块文件
cat > "$BASE_DIR/第10章-H264编码原理/10.3-宏块.md" << 'EOF'
---
title: 宏块
icon: macroblock
order: 3
---

# 宏块

## 基本概念
- 宏块定义
- 大小规格
- 类型划分
- 编码模式
- 预测方式

## 处理方法
- 运动估计
- 运动补偿
- 预测编码
- 变换编码
- 熵编码

## 优化策略
- 预测优化
- 编码优化
- 解码优化
- 性能提升
- 质量控制

## 最佳实践
- 参数选择
- 性能优化
- 质量控制
- 应用场景
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建10.4帧内压缩技术文件
cat > "$BASE_DIR/第10章-H264编码原理/10.4-帧内压缩技术.md" << 'EOF'
---
title: 帧内压缩技术
icon: intra-compression
order: 4
---

# 帧内压缩技术

## 压缩原理
- 空间冗余
- 预测编码
- 变换编码
- 量化编码
- 熵编码

## 预测模式
- 方向预测
- 平面预测
- DC预测
- 模式选择
- 预测优化

## 编码流程
- 块划分
- 预测处理
- 残差编码
- 重建处理
- 滤波处理

## 最佳实践
- 模式选择
- 参数优化
- 性能调优
- 质量控制
- 注意事项
EOF

# 创建10.5帧间压缩技术文件
cat > "$BASE_DIR/第10章-H264编码原理/10.5-帧间压缩技术.md" << 'EOF'
---
title: 帧间压缩技术
icon: inter-compression
order: 5
---

# 帧间压缩技术

## 压缩原理
- 时间冗余
- 运动估计
- 运动补偿
- 残差编码
- 熵编码

## 运动估计
- 搜索算法
- 块匹配
- 运动向量
- 预测模式
- 精度控制

## 编码流程
- 参考帧选择
- 运动估计
- 运动补偿
- 残差编码
- 重建处理

## 最佳实践
- 算法选择
- 参数优化
- 性能调优
- 质量控制
- 注意事项
EOF

# 创建10.6无损压缩与编解码流程文件
cat > "$BASE_DIR/第10章-H264编码原理/10.6-无损压缩与编解码流程.md" << 'EOF'
---
title: 无损压缩与编解码流程
icon: lossless-codec
order: 6
---

# 无损压缩与编解码流程

## 无损压缩
- 熵编码
- CABAC
- CAVLC
- 压缩效率
- 计算复杂度

## 编码流程
- 预处理
- 预测编码
- 变换量化
- 熵编码
- 码流封装

## 解码流程
- 码流解析
- 熵解码
- 反量化
- 预测重建
- 后处理

## 最佳实践
- 流程优化
- 参数调优
- 性能优化
- 质量控制
- 注意事项
EOF

# 创建10.7H264码流结构文件
cat > "$BASE_DIR/第10章-H264编码原理/10.7-H264码流结构.md" << 'EOF'
---
title: H264码流结构
icon: h264-stream
order: 7
---

# H264码流结构

## 基本单元
- NAL单元
- 序列参数
- 图像参数
- 片参数
- 宏块数据

## 语法结构
- 码流层次
- 语法元素
- 参数集合
- 数据组织
- 语义定义

## 解析处理
- 语法分析
- 参数提取
- 数据重组
- 错误检测
- 同步控制

## 最佳实践
- 结构设计
- 解析优化
- 性能调优
- 错误处理
- 注意事项
EOF

# 创建第11章目录
mkdir -p "$BASE_DIR/第11章-实战视频编码解码"

# 创建第11章README文件
cat > "$BASE_DIR/第11章-实战视频编码解码/README.md" << 'EOF'
---
title: 实战视频编码解码
icon: video-codec
order: 11
---

# 实战视频编码解码

本章介绍视频编码解码的实战应用。
EOF

# 创建11.1H264 Profile与Level文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.1-H264 Profile与Level.md" << 'EOF'
---
title: H264 Profile与Level
icon: h264-profile
order: 1
---

# H264 Profile与Level

## Profile类型
- Baseline
- Main
- High
- 扩展Profile
- 应用场景

## Level等级
- 分辨率限制
- 码率限制
- 帧率限制
- 缓冲要求
- 计算复杂度

## 选择策略
- 应用需求
- 设备能力
- 带宽限制
- 质量要求
- 兼容性

## 最佳实践
- 参数选择
- 性能优化
- 质量控制
- 应用场景
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.2SPS重要参数文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.2-SPS重要参数.md" << 'EOF'
---
title: SPS重要参数
icon: sps-params
order: 2
---

# SPS重要参数

## 基本参数
- 编码等级
- 分辨率
- 帧率
- 码率控制
- 参考帧数

## 高级特性
- 熵编码模式
- 去块滤波
- 多参考帧
- 帧重排序
- 错误恢复

## 参数设置
- 参数配置
- 优化策略
- 性能影响
- 质量控制
- 兼容性

## 最佳实践
- 参数选择
- 性能优化
- 质量控制
- 应用场景
- 注意事项
EOF

# 创建11.3PPS与Slice-Header文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.3-PPS与Slice-Header.md" << 'EOF'
---
title: PPS与Slice-Header
icon: pps-slice
order: 3
---

# PPS与Slice-Header

## PPS参数
- 熵编码
- 去块滤波
- 加权预测
- 变换系数
- 量化参数

## Slice-Header
- 片类型
- 参考帧
- 量化参数
- 运动向量
- 预测模式

## 参数关系
- 参数继承
- 参数覆盖
- 参数优化
- 性能影响
- 质量控制

## 最佳实践
- 参数配置
- 性能优化
- 质量控制
- 应用场景
- 注意事项
EOF

# 创建11.4H264分析工具1文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.4-H264分析工具1.md" << 'EOF'
---
title: H264分析工具1
icon: h264-tools1
order: 4
---

# H264分析工具1

## 工具介绍
- 功能特点
- 使用场景
- 操作界面
- 分析能力
- 输出格式

## 基本功能
- 码流解析
- 参数提取
- 统计分析
- 可视化
- 报告生成

## 使用方法
- 工具配置
- 数据导入
- 分析操作
- 结果导出
- 问题诊断

## 最佳实践
- 工具选择
- 分析方法
- 结果解读
- 问题排查
- 注意事项
EOF

# 创建11.5H264分析工具2文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.5-H264分析工具2.md" << 'EOF'
---
title: H264分析工具2
icon: h264-tools2
order: 5
---

# H264分析工具2

## 高级功能
- 深度分析
- 性能评估
- 质量评估
- 问题诊断
- 优化建议

## 分析方法
- 数据采集
- 参数分析
- 性能分析
- 质量分析
- 问题定位

## 实践应用
- 场景分析
- 参数优化
- 性能调优
- 质量提升
- 问题解决

## 最佳实践
- 分析策略
- 工具使用
- 结果应用
- 优化方法
- 注意事项
EOF

# 创建11.6打开视频编码器1文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.6-打开视频编码器1.md" << 'EOF'
---
title: 打开视频编码器1
icon: video-encoder1
order: 6
---

# 打开视频编码器1

## 初始化配置
- 编码器选择
- 参数设置
- 资源分配
- 状态初始化
- 错误处理

## 基础实现
- 编码器创建
- 参数配置
- 缓冲管理
- 状态控制
- 资源管理

## 功能测试
- 参数验证
- 功能测试
- 性能测试
- 质量评估
- 问题排查

## 最佳实践
- 实现策略
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建11.7打开视频编码器2文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.7-打开视频编码器2.md" << 'EOF'
---
title: 打开视频编码器2
icon: video-encoder2
order: 7
---

# 打开视频编码器2

## 高级特性
- 多实例支持
- 并发处理
- 实时编码
- 质量控制
- 性能优化

## 实现优化
- 算法优化
- 内存优化
- 并发处理
- 缓存策略
- 错误处理

## 性能测试
- 基准测试
- 压力测试
- 内存分析
- CPU分析
- 性能优化

## 最佳实践
- 架构设计
- 代码优化
- 性能调优
- 调试技巧
- 注意事项
EOF

# 创建11.8准备编码数据文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.8-准备编码数据.md" << 'EOF'
---
title: 准备编码数据
icon: encode-data
order: 8
---

# 准备编码数据

## 数据准备
- 格式转换
- 预处理
- 缓冲管理
- 同步控制
- 错误处理

## 编码配置
- 参数设置
- 码率控制
- 质量控制
- 延迟控制
- 资源管理

## 优化策略
- 数据优化
- 内存优化
- 性能优化
- 质量优化
- 资源控制

## 最佳实践
- 数据处理
- 参数配置
- 性能调优
- 质量控制
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.9NV12转YUV420P文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.9-NV12转YUV420P.md" << 'EOF'
---
title: NV12转YUV420P
icon: format-conversion
order: 9
---

# NV12转YUV420P

## 格式特点
- NV12格式
- YUV420P格式
- 存储布局
- 性能特性
- 应用场景

## 转换实现
- 数据读取
- 格式转换
- 内存管理
- 性能优化
- 错误处理

## 优化策略
- 算法优化
- 内存优化
- SIMD优化
- 并行处理
- 缓存优化

## 最佳实践
- 实现方法
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建11.10H264编码实战1文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.10-H264编码实战1.md" << 'EOF'
---
title: H264编码实战1
icon: h264-practice1
order: 10
---

# H264编码实战1

## 编码准备
- 环境配置
- 参数设置
- 资源分配
- 初始化
- 错误处理

## 基础实现
- 数据输入
- 参数配置
- 编码处理
- 数据输出
- 资源释放

## 功能测试
- 参数验证
- 功能测试
- 性能测试
- 质量评估
- 问题排查

## 最佳实践
- 实现策略
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建11.11H264编码实战2文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.11-H264编码实战2.md" << 'EOF'
---
title: H264编码实战2
icon: h264-practice2
order: 11
---

# H264编码实战2

## 高级特性
- 多线程编码
- 码率控制
- 质量控制
- 延迟控制
- 错误恢复

## 优化实现
- 算法优化
- 内存优化
- 并发处理
- 缓存策略
- 资源管理

## 性能测试
- 基准测试
- 压力测试
- 内存分析
- CPU分析
- 性能优化

## 最佳实践
- 架构设计
- 代码优化
- 性能调优
- 调试技巧
- 注意事项
EOF

# 创建11.12x264参数详解文件
cat > "$BASE_DIR/第11章-实战视频编码解码/11.12-x264参数详解.md" << 'EOF'
---
title: x264参数详解
icon: x264-params
order: 12
---

# x264参数详解

## 基本参数
- 预设参数
- 调优参数
- 码率控制
- 质量控制
- 性能控制

## 高级参数
- 编码控制
- 率失真优化
- 运动估计
- 帧类型控制
- 滤波控制

## 参数优化
- 场景适配
- 性能平衡
- 质量平衡
- 延迟控制
- 资源控制

## 最佳实践
- 参数选择
- 性能优化
- 质量控制
- 应用场景
- 注意事项
EOF

# 创建第12章目录
mkdir -p "$BASE_DIR/第12章-实战RTMP传输"

# 创建第12章README文件
cat > "$BASE_DIR/第12章-实战RTMP传输/README.md" << 'EOF'
---
title: 实战RTMP传输
icon: rtmp-streaming
order: 12
---

# 实战RTMP传输

本章介绍RTMP流媒体传输的实战应用。
EOF

# 创建12.1RTMP连接建立文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.1-RTMP连接建立.md" << 'EOF'
---
title: RTMP连接建立
icon: rtmp-connection
order: 1
---

# RTMP连接建立

## 连接流程
- 握手过程
- 连接创建
- 会话管理
- 状态控制
- 错误处理

## 协议实现
- 消息格式
- 命令处理
- 数据传输
- 流控制
- 安全机制

## 功能测试
- 连接测试
- 性能测试
- 稳定性测试
- 错误恢复
- 问题诊断

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.2创建RTMP流文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.2-创建RTMP流.md" << 'EOF'
---
title: 创建RTMP流
icon: rtmp-stream
order: 2
---

# 创建RTMP流

## 流创建
- 流初始化
- 参数配置
- 资源分配
- 状态管理
- 错误处理

## 数据处理
- 数据封装
- 消息组织
- 流控制
- 缓冲管理
- 同步控制

## 功能实现
- 推流控制
- 拉流控制
- 数据传输
- 状态监控
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.3RTMP消息文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.3-RTMP消息.md" << 'EOF'
---
title: RTMP消息
icon: rtmp-message
order: 3
---

# RTMP消息

## 消息类型
- 命令消息
- 数据消息
- 共享对象
- 控制消息
- 用户控制

## 消息结构
- 消息头
- 消息体
- 时间戳
- 消息长度
- 消息流ID

## 处理流程
- 消息解析
- 消息处理
- 消息发送
- 消息接收
- 错误处理

## 最佳实践
- 消息处理
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.4RTMP抓包分析文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.4-RTMP抓包分析.md" << 'EOF'
---
title: RTMP抓包分析
icon: rtmp-capture
order: 4
---

# RTMP抓包分析

## 抓包工具
- 工具选择
- 配置设置
- 数据捕获
- 分析功能
- 导出功能

## 分析方法
- 握手过程
- 连接建立
- 消息交互
- 数据传输
- 连接断开

## 问题诊断
- 协议分析
- 性能分析
- 错误分析
- 问题定位
- 优化建议

## 最佳实践
- 分析方法
- 工具使用
- 问题排查
- 优化建议
- 注意事项
EOF

# 创建12.5FLV协议文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.5-FLV协议.md" << 'EOF'
---
title: FLV协议
icon: flv-protocol
order: 5
---

# FLV协议

## 协议结构
- 文件头
- 标签类型
- 数据格式
- 时间戳
- 扩展字段

## 数据类型
- 视频数据
- 音频数据
- 脚本数据
- 元数据
- 控制数据

## 处理流程
- 数据解析
- 数据封装
- 时间同步
- 数据传输
- 错误处理

## 最佳实践
- 协议实现
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.6FLV协议分析器文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.6-FLV协议分析器.md" << 'EOF'
---
title: FLV协议分析器
icon: flv-analyzer
order: 6
---

# FLV协议分析器

## 分析功能
- 文件解析
- 标签分析
- 数据提取
- 统计分析
- 报告生成

## 实现方法
- 解析器设计
- 数据处理
- 信息提取
- 结果输出
- 错误处理

## 应用场景
- 文件分析
- 流媒体分析
- 问题诊断
- 性能优化
- 质量评估

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.7推流程序骨架文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.7-推流程序骨架.md" << 'EOF'
---
title: 推流程序骨架
icon: rtmp-pusher
order: 7
---

# 推流程序骨架

## 程序结构
- 初始化模块
- 数据采集
- 编码处理
- 推流控制
- 资源管理

## 核心功能
- 连接管理
- 数据处理
- 流控制
- 错误处理
- 状态监控

## 实现细节
- 线程管理
- 缓冲控制
- 同步机制
- 性能优化
- 资源释放

## 最佳实践
- 架构设计
- 代码优化
- 性能调优
- 调试技巧
- 注意事项
EOF

# 创建12.8打开FLV文件文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.8-打开FLV文件.md" << 'EOF'
---
title: 打开FLV文件
icon: flv-open
order: 8
---

# 打开FLV文件

## 文件操作
- 文件打开
- 头部解析
- 数据读取
- 错误处理
- 资源管理

## 数据处理
- 标签解析
- 数据提取
- 时间戳处理
- 数据验证
- 缓冲管理

## 功能实现
- 随机访问
- 数据定位
- 信息提取
- 数据导出
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.9连接RTMP服务器文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.9-连接RTMP服务器.md" << 'EOF'
---
title: 连接RTMP服务器
icon: rtmp-server
order: 9
---

# 连接RTMP服务器

## 连接管理
- 服务器配置
- 连接建立
- 会话管理
- 状态监控
- 错误处理

## 实现细节
- 握手过程
- 认证机制
- 连接池
- 重连策略
- 超时处理

## 功能测试
- 连接测试
- 性能测试
- 稳定性测试
- 故障恢复
- 压力测试

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.10向服务器推流文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.10-向服务器推流.md" << 'EOF'
---
title: 向服务器推流
icon: rtmp-push
order: 10
---

# 向服务器推流

## 推流流程
- 数据准备
- 流创建
- 数据发送
- 流控制
- 错误处理

## 实现细节
- 数据封装
- 消息组织
- 带宽控制
- 缓冲管理
- 同步机制

## 性能优化
- 发送策略
- 缓冲优化
- 线程管理
- 资源控制
- 延迟控制

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.11读取FLV标签数据1文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.11-读取FLV标签数据1.md" << 'EOF'
---
title: 读取FLV标签数据1
icon: flv-tag1
order: 11
---

# 读取FLV标签数据1

## 数据结构
- 标签类型
- 数据长度
- 时间戳
- 扩展字段
- 数据体

## 解析流程
- 头部解析
- 数据提取
- 类型判断
- 时间同步
- 错误处理

## 功能实现
- 标签读取
- 数据验证
- 缓冲管理
- 同步控制
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.12读取FLV标签数据2文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.12-读取FLV标签数据2.md" << 'EOF'
---
title: 读取FLV标签数据2
icon: flv-tag2
order: 12
---

# 读取FLV标签数据2

## 高级特性
- 批量处理
- 并发读取
- 预读缓存
- 数据过滤
- 性能优化

## 实现优化
- 算法优化
- 内存优化
- 并发处理
- 缓存策略
- 资源管理

## 性能测试
- 读取性能
- 内存使用
- CPU占用
- 响应时间
- 并发能力

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 注意事项
EOF

# 创建12.13调试与优化文件
cat > "$BASE_DIR/第12章-实战RTMP传输/12.13-调试与优化.md" << 'EOF'
---
title: 调试与优化
icon: debug-optimize
order: 13
---

# 调试与优化

## 调试方法
- 日志分析
- 性能分析
- 内存分析
- 网络分析
- 问题定位

## 优化策略
- 代码优化
- 性能优化
- 内存优化
- 网络优化
- 资源优化

## 问题排查
- 错误处理
- 异常分析
- 性能瓶颈
- 内存泄漏
- 网络问题

## 最佳实践
- 调试技巧
- 优化方法
- 问题解决
- 性能提升
- 注意事项
EOF

# 创建第13章目录
mkdir -p "$BASE_DIR/第13章-实战CDN直播"

# 创建第13章README文件
cat > "$BASE_DIR/第13章-实战CDN直播/README.md" << 'EOF'
---
title: 实战CDN直播
icon: cdn-live
order: 13
---

# 实战CDN直播

本章介绍CDN直播系统的实战应用。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建13.1直播系统架构文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.1-直播系统架构.md" << 'EOF'
---
title: 直播系统架构
icon: live-architecture
order: 1
---

# 直播系统架构

## 系统组成
- 推流端
- 转码集群
- 分发网络
- 播放端
- 监控系统

## 核心功能
- 实时推流
- 转码处理
- 负载均衡
- 边缘分发
- 质量监控

## 技术架构
- 协议选择
- 服务部署
- 网络架构
- 存储系统
- 监控系统

## 最佳实践
- 架构设计
- 性能优化
- 可靠性
- 扩展性
- 运维管理
EOF

# 创建13.2本机搭建RTMP服务文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.2-本机搭建RTMP服务.md" << 'EOF'
---
title: 本机搭建RTMP服务
icon: local-rtmp
order: 2
---

# 本机搭建RTMP服务

## 环境准备
- 系统要求
- 依赖安装
- 配置准备
- 端口设置
- 防火墙配置

## 服务配置
- 基本配置
- 应用配置
- 性能优化
- 日志配置
- 安全设置

## 功能测试
- 服务启动
- 推流测试
- 拉流测试
- 性能测试
- 问题排查

## 最佳实践
- 部署策略
- 性能优化
- 安全配置
- 调试技巧
- 注意事项
EOF

# 创建13.3SRS服务器简介文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.3-SRS服务器简介.md" << 'EOF'
---
title: SRS服务器简介
icon: srs-intro
order: 3
---

# SRS服务器简介

## 基本概念
- 功能特点
- 架构设计
- 性能特性
- 应用场景
- 技术优势

## 核心功能
- 协议支持
- 转码能力
- 集群部署
- 监控管理
- 扩展功能

## 技术特点
- 高性能
- 低延迟
- 可扩展
- 易维护
- 高可靠

## 最佳实践
- 应用场景
- 性能优化
- 运维管理
- 问题排查
- 注意事项
EOF

# 创建13.4SRS单机部署文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.4-SRS单机部署.md" << 'EOF'
---
title: SRS单机部署
icon: srs-standalone
order: 4
---

# SRS单机部署

## 部署准备
- 环境要求
- 安装包准备
- 依赖安装
- 配置准备
- 资源规划

## 安装配置
- 安装步骤
- 基础配置
- 功能配置
- 性能优化
- 安全设置

## 功能验证
- 服务启动
- 功能测试
- 性能测试
- 监控配置
- 问题排查

## 最佳实践
- 部署策略
- 性能优化
- 运维管理
- 调试技巧
- 注意事项
EOF

# 创建13.5RTMP URL与VHOST文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.5-RTMP URL与VHOST.md" << 'EOF'
---
title: RTMP URL与VHOST
icon: rtmp-vhost
order: 5
---

# RTMP URL与VHOST

## URL结构
- 协议部分
- 域名部分
- 应用名称
- 流名称
- 参数配置

## VHOST配置
- 虚拟主机
- 域名绑定
- 安全配置
- 转码配置
- 录制配置

## 应用场景
- 多域名支持
- 安全防护
- 转码处理
- 录制存储
- 监控统计

## 最佳实践
- 配置策略
- 安全设置
- 性能优化
- 运维管理
- 注意事项
EOF

# 创建13.6SRS集群部署文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.6-SRS集群部署.md" << 'EOF'
---
title: SRS集群部署
icon: srs-cluster
order: 6
---

# SRS集群部署

## 集群架构
- 节点角色
- 拓扑结构
- 负载均衡
- 高可用性
- 监控管理

## 部署配置
- 节点配置
- 集群配置
- 网络配置
- 存储配置
- 监控配置

## 运维管理
- 部署流程
- 扩容方案
- 故障处理
- 性能优化
- 日常维护

## 最佳实践
- 架构设计
- 部署策略
- 运维管理
- 问题排查
- 注意事项
EOF

# 创建13.7CDN网络文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.7-CDN网络.md" << 'EOF'
---
title: CDN网络
icon: cdn-network
order: 7
---

# CDN网络

## 网络架构
- 节点分布
- 网络拓扑
- 调度系统
- 缓存策略
- 监控系统

## 核心功能
- 内容分发
- 负载均衡
- 智能调度
- 边缘加速
- 安全防护

## 运维管理
- 节点管理
- 流量调度
- 性能优化
- 故障处理
- 监控告警

## 最佳实践
- 架构设计
- 部署策略
- 运维管理
- 问题排查
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建13.8阿里云视频直播文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.8-阿里云视频直播.md" << 'EOF'
---
title: 阿里云视频直播
icon: aliyun-live
order: 8
---

# 阿里云视频直播

## 服务架构
- 推流服务
- 转码服务
- 分发服务
- 播放服务
- 监控服务

## 核心功能
- 直播推流
- 实时转码
- 全球分发
- 播放加速
- 安全防护

## 运维管理
- 控制台管理
- 配置管理
- 监控告警
- 统计分析
- 故障处理

## 最佳实践
- 架构设计
- 部署策略
- 运维管理
- 问题排查
- 注意事项
EOF

# 创建13.9真实直播架构文件
cat > "$BASE_DIR/第13章-实战CDN直播/13.9-真实直播架构.md" << 'EOF'
---
title: 真实直播架构
icon: live-architecture
order: 9
---

# 真实直播架构

## 系统架构
- 推流系统
- 转码系统
- 分发系统
- 播放系统
- 监控系统

## 技术实现
- 协议选择
- 编码技术
- 传输优化
- 缓存策略
- 安全机制

## 运维管理
- 部署方案
- 扩容策略
- 监控告警
- 故障处理
- 性能优化

## 最佳实践
- 架构设计
- 技术选型
- 运维管理
- 问题排查
- 注意事项
EOF

# 创建第14章目录
mkdir -p "$BASE_DIR/第14章-课程总结"

# 创建第14章README文件
cat > "$BASE_DIR/第14章-课程总结/README.md" << 'EOF'
---
title: 课程总结
icon: summary
order: 14
---

# 课程总结

本章对整个音视频开发课程进行总结。
EOF

# 创建14.1课程总结文件
cat > "$BASE_DIR/第14章-课程总结/14.1-课程总结.md" << 'EOF'
---
title: 课程总结
icon: course-summary
order: 1
---

# 课程总结

## 知识体系
- 音频基础
- 视频基础
- 编码技术
- 传输协议
- 直播技术

## 技术实践
- 音频处理
- 视频处理
- 编码解码
- 流媒体传输
- CDN直播

## 工程实践
- 架构设计
- 性能优化
- 运维管理
- 问题排查
- 最佳实践

## 发展方向
- 技术趋势
- 应用场景
- 职业发展
- 学习建议
- 实践指导
EOF

# 创建主README文件
cat > "$BASE_DIR/README.md" << 'EOF'
---
title: FFmpeg音视频开发课程
icon: audio-video
order: 1
---

# FFmpeg音视频开发课程

本课程系统地介绍了音视频开发的核心知识和技术实践，从音频视频基础知识到编码原理，从流媒体传输到CDN直播系统，全面覆盖音视频开发的各个方面。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第1章目录
mkdir -p "$BASE_DIR/第1章-学习指南"

# 创建第1章README文件
cat > "$BASE_DIR/第1章-学习指南/README.md" << 'EOF'
---
title: 学习指南
icon: guide
order: 1
---

# 学习指南

本章介绍FFmpeg音视频开发课程的学习准备和基础知识。
EOF

# 创建1.1课前必读文件
cat > "$BASE_DIR/第1章-学习指南/1.1-课前必读.md" << 'EOF'
---
title: 课前必读
icon: pre-reading
order: 1
---

# 课前必读

## 课程概述
- 课程目标
- 学习路径
- 知识体系
- 实践要求
- 预备知识

## 学习建议
- 学习方法
- 时间规划
- 实践安排
- 资源准备
- 常见问题

## 环境准备
- 开发环境
- 工具安装
- 资源下载
- 环境配置
- 测试验证

## 学习资源
- 参考资料
- 实践项目
- 技术社区
- 学习工具
- 常用网站
EOF

# 创建1.2FFmpeg5.0-课程导学文件
cat > "$BASE_DIR/第1章-学习指南/1.2-FFmpeg5.0-课程导学.md" << 'EOF'
---
title: FFmpeg5.0-课程导学
icon: ffmpeg-intro
order: 2
---

# FFmpeg5.0-课程导学

## 课程内容
- 版本特性
- 功能模块
- 架构设计
- 应用场景
- 开发流程

## 技术要点
- 核心概念
- 关键技术
- 开发接口
- 使用方法
- 最佳实践

## 学习路径
- 基础知识
- 进阶技能
- 实战项目
- 性能优化
- 问题排查

## 实践指导
- 开发环境
- 示例代码
- 调试方法
- 测试验证
- 注意事项
EOF

# 创建1.3音视频应用范围与播放器架构讲解文件
cat > "$BASE_DIR/第1章-学习指南/1.3-音视频应用范围与播放器架构讲解.md" << 'EOF'
---
title: 音视频应用范围与播放器架构讲解
icon: media-player
order: 3
---

# 音视频应用范围与播放器架构讲解

## 应用范围
- 视频播放
- 直播系统
- 视频会议
- 短视频
- 视频编辑

## 播放器架构
- 解复用模块
- 解码模块
- 渲染模块
- 音频输出
- 同步控制

## 核心技术
- 编解码
- 传输协议
- 渲染技术
- 同步机制
- 性能优化

## 实现方案
- 架构设计
- 模块划分
- 接口定义
- 数据流转
- 控制流程
EOF

# 创建1.4什么是FFmpeg及其功能文件
cat > "$BASE_DIR/第1章-学习指南/1.4-什么是FFmpeg及其功能.md" << 'EOF'
---
title: 什么是FFmpeg及其功能
icon: ffmpeg-intro
order: 4
---

# 什么是FFmpeg及其功能

## 基本概念
- 项目简介
- 发展历史
- 核心功能
- 技术特点
- 应用场景

## 主要功能
- 格式转换
- 编解码
- 流媒体
- 滤镜处理
- 音视频处理

## 核心组件
- libavcodec
- libavformat
- libavfilter
- libswscale
- libswresample

## 应用实践
- 命令行工具
- 开发接口
- 使用场景
- 最佳实践
- 注意事项
EOF

# 创建1.5FFmpeg下载编译与安装文件
cat > "$BASE_DIR/第1章-学习指南/1.5-FFmpeg下载编译与安装.md" << 'EOF'
---
title: FFmpeg下载编译与安装
icon: ffmpeg-install
order: 5
---

# FFmpeg下载编译与安装

## 下载准备
- 版本选择
- 源码获取
- 依赖检查
- 环境准备
- 工具安装

## 编译配置
- 配置选项
- 依赖设置
- 功能选择
- 优化参数
- 调试选项

## 安装部署
- 编译过程
- 安装步骤
- 环境配置
- 测试验证
- 问题排查

## 最佳实践
- 编译优化
- 配置建议
- 常见问题
- 调试方法
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建1.6Windows下安装FFmpeg文件
cat > "$BASE_DIR/第1章-学习指南/1.6-Windows下安装FFmpeg.md" << 'EOF'
---
title: Windows下安装FFmpeg
icon: windows-install
order: 6
---

# Windows下安装FFmpeg

## 安装准备
- 版本选择
- 下载地址
- 系统要求
- 环境检查
- 工具准备

## 安装步骤
- 文件下载
- 解压配置
- 环境变量
- 路径设置
- 权限配置

## 验证测试
- 命令测试
- 功能验证
- 性能测试
- 问题排查
- 故障处理

## 最佳实践
- 安装建议
- 配置优化
- 常见问题
- 调试方法
- 注意事项
EOF

# 创建1.7FFmpeg命令大全文档文件
cat > "$BASE_DIR/第1章-学习指南/1.7-FFmpeg命令大全文档.md" << 'EOF'
---
title: FFmpeg命令大全文档
icon: ffmpeg-commands
order: 7
---

# FFmpeg命令大全文档

## 基础命令
- 格式转换
- 编解码
- 流处理
- 滤镜应用
- 参数设置

## 高级命令
- 复杂处理
- 多任务处理
- 流媒体处理
- 特效制作
- 性能优化

## 命令示例
- 常用场景
- 实战案例
- 参数说明
- 使用技巧
- 注意事项

## 最佳实践
- 命令组合
- 性能优化
- 问题排查
- 调试技巧
- 使用建议
EOF

# 创建第2章目录
mkdir -p "$BASE_DIR/第2章-FFmpeg常用命令实战"

# 创建第2章README文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/README.md" << 'EOF'
---
title: FFmpeg常用命令实战
icon: ffmpeg-practice
order: 2
---

# FFmpeg常用命令实战

本章介绍FFmpeg常用命令的实战应用。
EOF

# 创建2.1FFmpeg命令分类讲解文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.1-FFmpeg命令分类讲解.md" << 'EOF'
---
title: FFmpeg命令分类讲解
icon: command-categories
order: 1
---

# FFmpeg命令分类讲解

## 基本分类
- 信息查询
- 格式转换
- 编解码
- 流处理
- 滤镜处理

## 功能分类
- 视频处理
- 音频处理
- 字幕处理
- 流媒体
- 特效制作

## 应用场景
- 视频剪辑
- 直播推流
- 格式转换
- 视频压缩
- 特效制作

## 最佳实践
- 命令选择
- 参数优化
- 性能调优
- 问题排查
- 注意事项
EOF

# 创建2.2音视频处理流程文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.2-音视频处理流程.md" << 'EOF'
---
title: 音视频处理流程
icon: media-process
order: 2
---

# 音视频处理流程

## 处理步骤
- 输入解析
- 解复用
- 解码处理
- 编码处理
- 封装输出

## 核心流程
- 数据读取
- 格式转换
- 编解码
- 滤镜处理
- 数据输出

## 关键技术
- 同步控制
- 缓冲管理
- 错误处理
- 性能优化
- 质量控制

## 最佳实践
- 流程优化
- 参数调优
- 性能优化
- 问题排查
- 注意事项
EOF

# 创建2.3基本信息查询命令文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.3-基本信息查询命令.md" << 'EOF'
---
title: 基本信息查询命令
icon: info-query
order: 3
---

# 基本信息查询命令

## 基本命令
- 版本信息
- 格式支持
- 编解码器
- 滤镜列表
- 设备信息

## 文件信息
- 容器格式
- 编码参数
- 流信息
- 元数据
- 时长信息

## 系统信息
- 硬件加速
- 设备支持
- 协议支持
- 配置信息
- 编译选项

## 最佳实践
- 命令使用
- 信息分析
- 问题诊断
- 性能评估
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建2.4录制命令实战文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.4-录制命令实战.md" << 'EOF'
---
title: 录制命令实战
icon: recording
order: 4
---

# 录制命令实战

## 录制设备
- 摄像头录制
- 屏幕录制
- 音频录制
- 设备选择
- 参数配置

## 录制参数
- 视频参数
- 音频参数
- 格式设置
- 编码选项
- 质量控制

## 实战案例
- 视频采集
- 音频采集
- 直播录制
- 屏幕录像
- 多设备录制

## 最佳实践
- 参数优化
- 性能调优
- 质量控制
- 问题排查
- 注意事项
EOF

# 创建2.5分解与复用命令实战文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.5-分解与复用命令实战.md" << 'EOF'
---
title: 分解与复用命令实战
icon: demux-mux
order: 5
---

# 分解与复用命令实战

## 分解操作
- 音视频分离
- 流提取
- 数据分析
- 格式转换
- 参数设置

## 复用操作
- 音视频合并
- 流合成
- 容器封装
- 参数配置
- 同步控制

## 实战案例
- 音视频分离
- 多流合并
- 格式转换
- 流重组
- 参数调整

## 最佳实践
- 命令使用
- 参数优化
- 性能调优
- 问题排查
- 注意事项
EOF

# 创建2.6处理原始数据命令实战文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.6-处理原始数据命令实战.md" << 'EOF'
---
title: 处理原始数据命令实战
icon: raw-data
order: 6
---

# 处理原始数据命令实战

## 数据类型
- YUV数据
- RGB数据
- PCM数据
- 原始码流
- 数据格式

## 处理方法
- 格式转换
- 数据提取
- 参数调整
- 数据分析
- 质量控制

## 实战案例
- YUV处理
- RGB处理
- PCM处理
- 码流处理
- 数据转换

## 最佳实践
- 命令使用
- 参数优化
- 性能调优
- 问题排查
- 注意事项
EOF

# 创建2.7滤镜命令实战文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.7-滤镜命令实战.md" << 'EOF'
---
title: 滤镜命令实战
icon: filters
order: 7
---

# 滤镜命令实战

## 滤镜类型
- 视频滤镜
- 音频滤镜
- 复杂滤镜
- 滤镜链
- 滤镜图

## 常用滤镜
- 缩放滤镜
- 裁剪滤镜
- 旋转滤镜
- 特效滤镜
- 文字滤镜

## 实战案例
- 视频处理
- 音频处理
- 特效制作
- 滤镜组合
- 参数调整

## 最佳实践
- 滤镜选择
- 参数优化
- 性能调优
- 问题排查
- 注意事项
EOF

# 创建2.8裁剪与合并命令实战文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.8-裁剪与合并命令实战.md" << 'EOF'
---
title: 裁剪与合并命令实战
icon: cut-merge
order: 8
---

# 裁剪与合并命令实战

## 裁剪操作
- 时间裁剪
- 空间裁剪
- 精确裁剪
- 无损裁剪
- 参数设置

## 合并操作
- 视频合并
- 音频合并
- 流合并
- 无缝拼接
- 参数控制

## 实战案例
- 视频剪辑
- 音频剪辑
- 多段合并
- 画面拼接
- 特效过渡

## 最佳实践
- 命令使用
- 参数优化
- 性能调优
- 问题排查
- 注意事项
EOF

# 创建2.9图片与视频互转实战文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.9-图片与视频互转实战.md" << 'EOF'
---
title: 图片与视频互转实战
icon: image-video
order: 9
---

# 图片与视频互转实战

## 视频转图片
- 帧提取
- 序列提取
- 间隔提取
- 质量控制
- 格式设置

## 图片转视频
- 序列合成
- 转场效果
- 帧率控制
- 编码设置
- 参数调整

## 实战案例
- 视频截图
- 视频抽帧
- 图片合成
- 幻灯片
- 特效制作

## 最佳实践
- 命令使用
- 参数优化
- 性能调优
- 问题排查
- 注意事项
EOF

# 创建2.10直播相关命令实战文件
cat > "$BASE_DIR/第2章-FFmpeg常用命令实战/2.10-直播相关命令实战.md" << 'EOF'
---
title: 直播相关命令实战
icon: live-streaming
order: 10
---

# 直播相关命令实战

## 推流命令
- RTMP推流
- HLS推流
- UDP推流
- 参数设置
- 性能控制

## 拉流命令
- RTMP拉流
- HLS拉流
- UDP拉流
- 参数配置
- 缓冲控制

## 实战案例
- 直播推流
- 直播录制
- 流转换
- 多路推流
- 延迟控制

## 最佳实践
- 命令使用
- 参数优化
- 性能调优
- 问题排查
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第3章目录
mkdir -p "$BASE_DIR/第3章-FFmpeg开发必备C语言回顾-vim讲解"

# 创建第3章README文件
cat > "$BASE_DIR/第3章-FFmpeg开发必备C语言回顾-vim讲解/README.md" << 'EOF'
---
title: FFmpeg开发必备C语言回顾-vim讲解
icon: c-vim
order: 3
---

# FFmpeg开发必备C语言回顾-vim讲解

本章介绍FFmpeg开发所需的C语言基础知识和vim编辑器使用技巧。
EOF

# 创建3.1FFmpeg基础开发概述文件
cat > "$BASE_DIR/第3章-FFmpeg开发必备C语言回顾-vim讲解/3.1-FFmpeg基础开发概述.md" << 'EOF'
---
title: FFmpeg基础开发概述
icon: ffmpeg-dev
order: 1
---

# FFmpeg基础开发概述

## 开发基础
- 开发环境
- 编译工具
- 开发框架
- 核心模块
- 接口设计

## 技术要点
- C语言基础
- 音视频基础
- API使用
- 内存管理
- 错误处理

## 开发流程
- 环境搭建
- 接口调用
- 功能实现
- 调试优化
- 测试验证

## 最佳实践
- 代码规范
- 性能优化
- 内存管理
- 错误处理
- 调试技巧
EOF

# 创建3.2vim模式及创建文件文件
cat > "$BASE_DIR/第3章-FFmpeg开发必备C语言回顾-vim讲解/3.2-vim模式及创建文件.md" << 'EOF'
---
title: vim模式及创建文件
icon: vim-modes
order: 2
---

# vim模式及创建文件

## 基本模式
- 普通模式
- 插入模式
- 命令模式
- 可视模式
- 选择模式

## 文件操作
- 创建文件
- 打开文件
- 保存文件
- 关闭文件
- 多文件管理

## 模式切换
- 模式转换
- 快捷键
- 命令使用
- 状态显示
- 模式特点

## 最佳实践
- 操作技巧
- 效率提升
- 常用命令
- 配置优化
- 注意事项
EOF

# 创建3.3vim基本操作与光标移动文件
cat > "$BASE_DIR/第3章-FFmpeg开发必备C语言回顾-vim讲解/3.3-vim基本操作与光标移动.md" << 'EOF'
---
title: vim基本操作与光标移动
icon: vim-basics
order: 3
---

# vim基本操作与光标移动

## 基本操作
- 文本输入
- 文本删除
- 文本复制
- 文本粘贴
- 撤销重做

## 光标移动
- 字符移动
- 单词移动
- 行内移动
- 页面移动
- 文件跳转

## 快捷键
- 移动快捷键
- 编辑快捷键
- 查找快捷键
- 替换快捷键
- 功能快捷键

## 最佳实践
- 操作技巧
- 效率提升
- 常用命令
- 配置优化
- 注意事项
EOF

# 创建3.4vim查找替换与多窗口文件
cat > "$BASE_DIR/第3章-FFmpeg开发必备C语言回顾-vim讲解/3.4-vim查找替换与多窗口.md" << 'EOF'
---
title: vim查找替换与多窗口
icon: vim-search
order: 4
---

# vim查找替换与多窗口

## 查找功能
- 基本查找
- 正向查找
- 反向查找
- 全局查找
- 模式匹配

## 替换功能
- 单行替换
- 全局替换
- 范围替换
- 正则替换
- 确认替换

## 多窗口操作
- 窗口分割
- 窗口切换
- 窗口调整
- 窗口关闭
- 布局管理

## 最佳实践
- 操作技巧
- 效率提升
- 常用命令
- 配置优化
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第4章目录
mkdir -p "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾"

# 创建第4章README文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/README.md" << 'EOF'
---
title: FFmpeg开发必备C语言回顾
icon: c-language
order: 4
---

# FFmpeg开发必备C语言回顾

本章回顾FFmpeg开发所需的C语言基础知识。
EOF

# 创建4.1C语言Helloworld文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.1-C语言Helloworld.md" << 'EOF'
---
title: C语言Helloworld
icon: c-hello
order: 1
---

# C语言Helloworld

## 基本结构
- 头文件引入
- main函数
- 输入输出
- 返回值
- 编译运行

## 开发环境
- 编译器选择
- IDE配置
- 环境变量
- 调试工具
- 运行环境

## 代码规范
- 命名规则
- 注释规范
- 缩进格式
- 错误处理
- 代码风格

## 最佳实践
- 编码习惯
- 调试技巧
- 性能优化
- 内存管理
- 注意事项
EOF

# 创建4.2常量与变量文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.2-常量与变量.md" << 'EOF'
---
title: 常量与变量
icon: variables
order: 2
---

# 常量与变量

## 数据类型
- 基本类型
- 整数类型
- 浮点类型
- 字符类型
- 布尔类型

## 变量声明
- 命名规则
- 初始化
- 作用域
- 生命周期
- 存储类别

## 常量定义
- 字面常量
- 符号常量
- 枚举常量
- const关键字
- 宏定义

## 最佳实践
- 命名规范
- 类型选择
- 初始化
- 作用域控制
- 注意事项
EOF

# 创建4.3指针-1文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.3-指针-1.md" << 'EOF'
---
title: 指针-1
icon: pointer1
order: 3
---

# 指针-1

## 基本概念
- 内存地址
- 指针变量
- 指针运算
- 空指针
- 野指针

## 指针操作
- 取地址
- 解引用
- 指针赋值
- 指针比较
- 指针运算

## 指针应用
- 函数参数
- 数组指针
- 字符指针
- 结构体指针
- 函数指针

## 最佳实践
- 内存管理
- 安全使用
- 性能优化
- 调试技巧
- 注意事项
EOF

# 创建4.4指针-2文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.4-指针-2.md" << 'EOF'
---
title: 指针-2
icon: pointer2
order: 4
---

# 指针-2

## 高级特性
- 多级指针
- 指针数组
- 数组指针
- 函数指针
- 回调函数

## 内存管理
- 动态分配
- 内存释放
- 内存泄漏
- 内存越界
- 垃圾回收

## 指针应用
- 链表操作
- 树结构
- 回调机制
- 动态数组
- 字符串处理

## 最佳实践
- 内存管理
- 安全使用
- 性能优化
- 调试技巧
- 注意事项
EOF

# 创建4.5结构体文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.5-结构体.md" << 'EOF'
---
title: 结构体
icon: struct
order: 5
---

# 结构体

## 基本概念
- 结构定义
- 成员访问
- 内存对齐
- 位域
- 联合体

## 结构操作
- 初始化
- 赋值操作
- 成员访问
- 嵌套结构
- 数组结构

## 应用场景
- 数据封装
- 复杂数据
- 链表实现
- 树结构
- 队列实现

## 最佳实践
- 内存管理
- 性能优化
- 封装设计
- 调试技巧
- 注意事项
EOF

# 创建4.6if_else语句文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.6-if_else语句.md" << 'EOF'
---
title: if_else语句
icon: control-flow
order: 6
---

# if_else语句

## 基本语法
- if语句
- if-else语句
- if-else if语句
- 嵌套if语句
- 条件表达式

## 逻辑运算
- 关系运算符
- 逻辑运算符
- 短路求值
- 优先级
- 结合性

## 应用场景
- 条件判断
- 分支处理
- 错误处理
- 状态控制
- 流程控制

## 最佳实践
- 代码风格
- 性能优化
- 可读性
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建4.7for_while循环文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.7-for_while循环.md" << 'EOF'
---
title: for_while循环
icon: loops
order: 7
---

# for_while循环

## for循环
- 语法结构
- 初始化
- 条件判断
- 迭代控制
- 循环体

## while循环
- 语法结构
- 条件判断
- 循环体
- 循环控制
- 无限循环

## 循环控制
- break语句
- continue语句
- 嵌套循环
- 循环优化
- 性能考虑

## 最佳实践
- 循环选择
- 性能优化
- 代码风格
- 调试技巧
- 注意事项
EOF

# 创建4.8函数文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.8-函数.md" << 'EOF'
---
title: 函数
icon: functions
order: 8
---

# 函数

## 基本概念
- 函数定义
- 函数声明
- 参数传递
- 返回值
- 作用域

## 函数类型
- 内置函数
- 自定义函数
- 递归函数
- 内联函数
- 回调函数

## 参数处理
- 值传递
- 指针传递
- 数组参数
- 可变参数
- 参数检查

## 最佳实践
- 函数设计
- 参数处理
- 错误处理
- 性能优化
- 注意事项
EOF

# 创建4.9文件操作文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.9-文件操作.md" << 'EOF'
---
title: 文件操作
icon: file-ops
order: 9
---

# 文件操作

## 基本操作
- 文件打开
- 文件关闭
- 文件读取
- 文件写入
- 文件定位

## 文件模式
- 文本模式
- 二进制模式
- 读写权限
- 追加模式
- 临时文件

## 错误处理
- 错误检测
- 错误码
- 错误恢复
- 资源清理
- 异常处理

## 最佳实践
- 操作规范
- 性能优化
- 资源管理
- 错误处理
- 注意事项
EOF

# 创建4.10再论指针文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.10-再论指针.md" << 'EOF'
---
title: 再论指针
icon: pointers-advanced
order: 10
---

# 再论指针

## 高级特性
- 函数指针
- 指针数组
- 多级指针
- 指针运算
- 指针常量

## 内存管理
- 动态分配
- 内存释放
- 内存泄漏
- 野指针
- 空指针

## 应用场景
- 数据结构
- 回调机制
- 动态数组
- 字符串处理
- 内存管理

## 最佳实践
- 指针使用
- 内存管理
- 性能优化
- 调试技巧
- 注意事项
EOF

# 创建4.11编译器文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.11-编译器.md" << 'EOF'
---
title: 编译器
icon: compiler
order: 11
---

# 编译器

## 编译过程
- 预处理
- 编译
- 汇编
- 链接
- 优化

## 编译选项
- 优化级别
- 警告控制
- 调试信息
- 链接选项
- 平台选项

## 错误处理
- 编译错误
- 链接错误
- 警告处理
- 调试信息
- 优化问题

## 最佳实践
- 编译配置
- 优化策略
- 调试技巧
- 错误处理
- 注意事项
EOF

# 创建4.12调试器文件
cat > "$BASE_DIR/第4章-FFmpeg开发必备C语言回顾/4.12-调试器.md" << 'EOF'
---
title: 调试器
icon: debugger
order: 12
---

# 调试器

## 基本功能
- 断点设置
- 单步执行
- 变量查看
- 调用栈
- 内存检查

## 调试技巧
- 条件断点
- 观察点
- 表达式求值
- 内存监视
- 性能分析

## 常见问题
- 内存泄漏
- 段错误
- 死锁
- 性能问题
- 逻辑错误

## 最佳实践
- 调试策略
- 问题定位
- 性能优化
- 内存管理
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第5章目录
mkdir -p "$BASE_DIR/第5章-FFmpeg多媒体文件处理"

# 创建第5章README文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/README.md" << 'EOF'
---
title: FFmpeg多媒体文件处理
icon: multimedia
order: 5
---

# FFmpeg多媒体文件处理

本章介绍FFmpeg多媒体文件处理的基础知识和实践应用。
EOF

# 创建5.1FFmpeg初级开发介绍文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.1-FFmpeg初级开发介绍.md" << 'EOF'
---
title: FFmpeg初级开发介绍
icon: ffmpeg-basic
order: 1
---

# FFmpeg初级开发介绍

## 基础概念
- 开发环境
- 核心模块
- 基本流程
- API介绍
- 开发规范

## 开发准备
- 环境配置
- 库文件
- 头文件
- 编译选项
- 调试工具

## 基本功能
- 文件操作
- 格式转换
- 编解码
- 流处理
- 错误处理

## 最佳实践
- 代码规范
- 性能优化
- 内存管理
- 错误处理
- 调试技巧
EOF

# 创建5.2Log系统文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.2-Log系统.md" << 'EOF'
---
title: Log系统
icon: logging
order: 2
---

# Log系统

## 系统架构
- 日志级别
- 日志格式
- 输出方式
- 回调机制
- 配置管理

## 核心功能
- 日志记录
- 级别控制
- 格式化输出
- 文件输出
- 错误追踪

## 使用方法
- 初始化配置
- 日志输出
- 级别设置
- 回调处理
- 错误处理

## 最佳实践
- 日志策略
- 性能优化
- 存储管理
- 调试技巧
- 注意事项
EOF

# 创建5.3日志系统文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.3-日志系统.md" << 'EOF'
---
title: 日志系统
icon: logging-system
order: 3
---

# 日志系统

## 系统设计
- 架构设计
- 模块划分
- 接口定义
- 数据流转
- 存储管理

## 功能实现
- 日志写入
- 日志读取
- 日志分析
- 日志清理
- 错误处理

## 高级特性
- 异步日志
- 日志压缩
- 日志轮转
- 日志过滤
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 存储管理
- 调试技巧
- 注意事项
EOF

# 创建5.4文件删除与重命名文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.4-文件删除与重命名.md" << 'EOF'
---
title: 文件删除与重命名
icon: file-ops
order: 4
---

# 文件删除与重命名

## 文件删除
- 删除操作
- 权限检查
- 错误处理
- 安全考虑
- 资源清理

## 文件重命名
- 重命名操作
- 路径处理
- 冲突处理
- 错误处理
- 原子性

## 实现细节
- API使用
- 参数检查
- 错误码
- 异常处理
- 资源管理

## 最佳实践
- 操作安全
- 性能优化
- 错误处理
- 调试技巧
- 注意事项
EOF

# 创建5.5操作目录及list实现-1文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.5-操作目录及list实现-1.md" << 'EOF'
---
title: 操作目录及list实现-1
icon: directory-ops1
order: 5
---

# 操作目录及list实现-1

## 目录操作
- 创建目录
- 删除目录
- 遍历目录
- 权限管理
- 错误处理

## 列表实现
- 数据结构
- 增删改查
- 遍历操作
- 排序功能
- 内存管理

## 基本功能
- 目录创建
- 目录删除
- 文件列表
- 排序过滤
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.6操作目录及list实现-2文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.6-操作目录及list实现-2.md" << 'EOF'
---
title: 操作目录及list实现-2
icon: directory-ops2
order: 6
---

# 操作目录及list实现-2

## 高级功能
- 递归操作
- 批量处理
- 过滤功能
- 异步操作
- 事务支持

## 性能优化
- 缓存策略
- 并发处理
- 内存优化
- IO优化
- 算法优化

## 扩展功能
- 监控功能
- 统计分析
- 备份恢复
- 权限控制
- 日志记录

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建5.7流数据处理基本概念文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.7-流数据处理基本概念.md" << 'EOF'
---
title: 流数据处理基本概念
icon: stream-processing
order: 7
---

# 流数据处理基本概念

## 基础概念
- 流的定义
- 数据包
- 时间戳
- 同步机制
- 缓冲策略

## 处理流程
- 数据读取
- 解复用
- 数据处理
- 编码封装
- 数据输出

## 关键技术
- 流同步
- 缓冲管理
- 时间控制
- 错误处理
- 性能优化

## 最佳实践
- 处理策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.8打印音视频Meta信息文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.8-打印音视频Meta信息.md" << 'EOF'
---
title: 打印音视频Meta信息
icon: media-meta
order: 8
---

# 打印音视频Meta信息

## 基本信息
- 容器格式
- 编码格式
- 时长信息
- 码率信息
- 流信息

## 元数据解析
- 标题信息
- 作者信息
- 创建时间
- 编码参数
- 自定义标签

## 实现方法
- API调用
- 数据解析
- 信息提取
- 格式化输出
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.9搭建开发环境文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.9-搭建开发环境.md" << 'EOF'
---
title: 搭建开发环境
icon: dev-env
order: 9
---

# 搭建开发环境

## 环境准备
- 系统要求
- 工具安装
- 依赖配置
- 环境变量
- 测试验证

## 开发工具
- 编译器选择
- IDE配置
- 调试工具
- 版本控制
- 构建工具

## 配置过程
- 安装步骤
- 环境配置
- 依赖管理
- 测试验证
- 问题排查

## 最佳实践
- 环境管理
- 工具选择
- 配置优化
- 调试技巧
- 注意事项
EOF

# 创建5.10VSCode调试环境配置文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.10-VSCode调试环境配置.md" << 'EOF'
---
title: VSCode调试环境配置
icon: vscode-debug
order: 10
---

# VSCode调试环境配置

## 基础配置
- 插件安装
- 编译配置
- 调试配置
- 任务配置
- 环境变量

## 调试功能
- 断点设置
- 变量监视
- 调用栈
- 条件断点
- 表达式求值

## 高级特性
- 远程调试
- 性能分析
- 内存检查
- 多线程调试
- 自定义配置

## 最佳实践
- 配置优化
- 调试技巧
- 性能优化
- 问题排查
- 注意事项
EOF

# 创建5.11抽取音频数据-1文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.11-抽取音频数据-1.md" << 'EOF'
---
title: 抽取音频数据-1
icon: audio-extract1
order: 11
---

# 抽取音频数据-1

## 基础概念
- 音频格式
- 采样率
- 声道数
- 位深度
- 编码格式

## 抽取流程
- 文件解析
- 流识别
- 数据读取
- 格式转换
- 数据保存

## 核心实现
- 初始化
- 数据读取
- 格式处理
- 错误处理
- 资源释放

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.12抽取音频数据-2文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.12-抽取音频数据-2.md" << 'EOF'
---
title: 抽取音频数据-2
icon: audio-extract2
order: 12
---

# 抽取音频数据-2

## 高级特性
- 多格式支持
- 批量处理
- 并发处理
- 进度控制
- 质量控制

## 性能优化
- 缓冲策略
- 内存管理
- IO优化
- 并发处理
- 资源控制

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.13抽取音频数据-3文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.13-抽取音频数据-3.md" << 'EOF'
---
title: 抽取音频数据-3
icon: audio-extract3
order: 13
---

# 抽取音频数据-3

## 扩展功能
- 格式转换
- 音频处理
- 元数据处理
- 质量控制
- 进度监控

## 工具集成
- 命令行工具
- GUI界面
- API接口
- 插件系统
- 自动化处理

## 应用场景
- 音频提取
- 格式转换
- 批量处理
- 在线处理
- 实时处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建5.14调试音频抽取程序文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.14-调试音频抽取程序.md" << 'EOF'
---
title: 调试音频抽取程序
icon: audio-debug
order: 14
---

# 调试音频抽取程序

## 调试准备
- 环境配置
- 调试工具
- 测试数据
- 日志设置
- 断点策略

## 调试过程
- 程序运行
- 断点调试
- 变量监控
- 状态检查
- 错误定位

## 问题排查
- 内存问题
- 性能问题
- 格式问题
- 同步问题
- 资源问题

## 最佳实践
- 调试策略
- 问题定位
- 性能优化
- 内存管理
- 注意事项
EOF

# 创建5.15抽取视频数据文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.15-抽取视频数据.md" << 'EOF'
---
title: 抽取视频数据
icon: video-extract
order: 15
---

# 抽取视频数据

## 基础概念
- 视频格式
- 编码标准
- 分辨率
- 帧率
- 码率控制

## 抽取流程
- 初始化
- 流识别
- 数据读取
- 格式转换
- 数据保存

## 核心实现
- 解复用
- 数据处理
- 编码转换
- 帧提取
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.16多媒体格式转换封装-1文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.16-多媒体格式转换封装-1.md" << 'EOF'
---
title: 多媒体格式转换封装-1
icon: media-convert1
order: 16
---

# 多媒体格式转换封装-1

## 基础概念
- 容器格式
- 编码格式
- 转封装
- 转码
- 参数设置

## 转换流程
- 格式识别
- 参数配置
- 数据读取
- 格式转换
- 数据写入

## 核心实现
- 初始化配置
- 流处理
- 数据转换
- 封装处理
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.17多媒体格式转换封装-2文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.17-多媒体格式转换封装-2.md" << 'EOF'
---
title: 多媒体格式转换封装-2
icon: media-convert2
order: 17
---

# 多媒体格式转换封装-2

## 高级特性
- 多格式支持
- 批量处理
- 并发转换
- 进度控制
- 质量控制

## 性能优化
- 缓冲策略
- 内存管理
- IO优化
- 并发处理
- 资源控制

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.18多媒体格式转换封装-3文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.18-多媒体格式转换封装-3.md" << 'EOF'
---
title: 多媒体格式转换封装-3
icon: media-convert3
order: 18
---

# 多媒体格式转换封装-3

## 扩展功能
- 元数据处理
- 字幕处理
- 音轨处理
- 章节处理
- 标签处理

## 工具集成
- 命令行工具
- GUI界面
- API接口
- 插件系统
- 自动化处理

## 应用场景
- 视频转换
- 音频转换
- 流媒体处理
- 直播转码
- 离线处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.19视频裁剪-1文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.19-视频裁剪-1.md" << 'EOF'
---
title: 视频裁剪-1
icon: video-cut1
order: 19
---

# 视频裁剪-1

## 基础概念
- 时间裁剪
- 空间裁剪
- 关键帧
- 编码参数
- 格式设置

## 裁剪流程
- 参数解析
- 数据读取
- 帧处理
- 数据写入
- 进度控制

## 核心实现
- 时间定位
- 数据截取
- 格式处理
- 编码处理
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建5.20视频裁剪-2文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.20-视频裁剪-2.md" << 'EOF'
---
title: 视频裁剪-2
icon: video-cut2
order: 20
---

# 视频裁剪-2

## 高级特性
- 精确裁剪
- 批量处理
- 并发处理
- 进度控制
- 质量控制

## 性能优化
- 缓冲策略
- 内存管理
- IO优化
- 并发处理
- 资源控制

## 应用场景
- 视频编辑
- 内容提取
- 片段合并
- 在线处理
- 实时处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建5.21作业：实现小咖秀核心逻辑文件
cat > "$BASE_DIR/第5章-FFmpeg多媒体文件处理/5.21-作业：实现小咖秀核心逻辑.md" << 'EOF'
---
title: 作业：实现小咖秀核心逻辑
icon: homework
order: 21
---

# 作业：实现小咖秀核心逻辑

## 功能需求
- 视频录制
- 音频处理
- 特效添加
- 视频合成
- 导出分享

## 技术实现
- 音视频采集
- 实时处理
- 特效引擎
- 合成引擎
- 导出模块

## 核心模块
- 采集模块
- 处理模块
- 特效模块
- 合成模块
- 导出模块

## 实现步骤
- 环境搭建
- 模块开发
- 功能测试
- 性能优化
- 问题排查
EOF

# 创建第6章目录
mkdir -p "$BASE_DIR/第6章-FFmpeg编解码实战"

# 创建第6章README文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/README.md" << 'EOF'
---
title: FFmpeg编解码实战
icon: codec
order: 6
---

# FFmpeg编解码实战

本章介绍FFmpeg编解码的实战应用。
EOF

# 创建6.1FFmpeg中级开发介绍文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.1-FFmpeg中级开发介绍.md" << 'EOF'
---
title: FFmpeg中级开发介绍
icon: ffmpeg-intermediate
order: 1
---

# FFmpeg中级开发介绍

## 开发基础
- 编解码原理
- 开发框架
- API使用
- 性能优化
- 调试技巧

## 核心概念
- 编码器
- 解码器
- 数据流
- 帧处理
- 参数控制

## 开发流程
- 环境配置
- 接口调用
- 功能实现
- 性能优化
- 测试验证

## 最佳实践
- 开发规范
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.2视频编码-1文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.2-视频编码-1.md" << 'EOF'
---
title: 视频编码-1
icon: video-encode1
order: 2
---

# 视频编码-1

## 基础概念
- 编码标准
- 压缩原理
- 码率控制
- 帧类型
- 参数设置

## 编码流程
- 初始化
- 参数配置
- 帧处理
- 数据输出
- 资源释放

## 核心实现
- 编码器配置
- 帧处理
- 参数控制
- 数据输出
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.3视频编码-2文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.3-视频编码-2.md" << 'EOF'
---
title: 视频编码-2
icon: video-encode2
order: 3
---

# 视频编码-2

## 高级特性
- 多线程编码
- 硬件加速
- 码率控制
- 质量控制
- 参数优化

## 性能优化
- 编码策略
- 内存管理
- 并发处理
- 缓冲控制
- 资源管理

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.4视频编码-3文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.4-视频编码-3.md" << 'EOF'
---
title: 视频编码-3
icon: video-encode3
order: 4
---

# 视频编码-3

## 扩展功能
- 多格式支持
- 批量处理
- 实时编码
- 转码优化
- 质量控制

## 工具集成
- 命令行工具
- API接口
- 插件系统
- 自动化处理
- 监控系统

## 应用场景
- 视频处理
- 直播系统
- 视频会议
- 在线转码
- 离线处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建6.5视频编码-4文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.5-视频编码-4.md" << 'EOF'
---
title: 视频编码-4
icon: video-encode4
order: 5
---

# 视频编码-4

## 高级优化
- 编码预设
- 编码配置
- 速度控制
- 质量控制
- 码率控制

## 特殊功能
- HDR支持
- 多分辨率
- 自适应码率
- 场景检测
- 智能编码

## 性能调优
- CPU优化
- GPU加速
- 内存管理
- 并发处理
- 缓存策略

## 最佳实践
- 参数配置
- 性能优化
- 质量控制
- 调试技巧
- 注意事项
EOF

# 创建6.6调试视频编码程序文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.6-调试视频编码程序.md" << 'EOF'
---
title: 调试视频编码程序
icon: debug-video
order: 6
---

# 调试视频编码程序

## 调试环境
- 工具配置
- 环境设置
- 数据准备
- 日志配置
- 断点策略

## 调试方法
- 断点调试
- 日志分析
- 性能分析
- 内存检查
- 错误追踪

## 常见问题
- 编码错误
- 性能问题
- 内存泄漏
- 同步问题
- 质量问题

## 最佳实践
- 调试策略
- 问题定位
- 性能优化
- 内存管理
- 注意事项
EOF

# 创建6.7音频编码-1文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.7-音频编码-1.md" << 'EOF'
---
title: 音频编码-1
icon: audio-encode1
order: 7
---

# 音频编码-1

## 基础概念
- 编码标准
- 采样率
- 声道配置
- 比特率
- 编码参数

## 编码流程
- 初始化
- 参数配置
- 数据处理
- 编码输出
- 资源释放

## 核心实现
- 编码器配置
- 数据处理
- 参数控制
- 输出管理
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.8音频编码-2文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.8-音频编码-2.md" << 'EOF'
---
title: 音频编码-2
icon: audio-encode2
order: 8
---

# 音频编码-2

## 高级特性
- 多格式支持
- 质量控制
- 动态码率
- 多声道处理
- 实时编码

## 性能优化
- 编码策略
- 缓冲管理
- 并发处理
- 资源控制
- 内存优化

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.9生成图片-1文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.9-生成图片-1.md" << 'EOF'
---
title: 生成图片-1
icon: image-gen1
order: 9
---

# 生成图片-1

## 基础概念
- 图片格式
- 色彩空间
- 分辨率
- 压缩算法
- 元数据

## 生成流程
- 初始化
- 参数配置
- 数据处理
- 图片输出
- 资源释放

## 核心实现
- 格式设置
- 数据处理
- 编码输出
- 质量控制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.10生成图片-2文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.10-生成图片-2.md" << 'EOF'
---
title: 生成图片-2
icon: image-gen2
order: 10
---

# 生成图片-2

## 高级特性
- 多格式支持
- 批量处理
- 质量控制
- 特效处理
- 元数据处理

## 性能优化
- 编码策略
- 内存管理
- 并发处理
- 缓存优化
- 资源控制

## 应用场景
- 图片生成
- 格式转换
- 批量处理
- 实时处理
- 特效制作

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.11生成带色彩的BMP图片-1文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.11-生成带色彩的BMP图片-1.md" << 'EOF'
---
title: 生成带色彩的BMP图片-1
icon: bmp-gen1
order: 11
---

# 生成带色彩的BMP图片-1

## 基础概念
- BMP格式
- 色彩模型
- 位深度
- 调色板
- 压缩方式

## 生成流程
- 文件头
- 信息头
- 调色板
- 像素数据
- 数据对齐

## 核心实现
- 格式设置
- 数据处理
- 颜色填充
- 文件输出
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建6.12生成带色彩的BMP图片-2文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.12-生成带色彩的BMP图片-2.md" << 'EOF'
---
title: 生成带色彩的BMP图片-2
icon: bmp-gen2
order: 12
---

# 生成带色彩的BMP图片-2

## 高级特性
- 色彩管理
- 渐变效果
- 图案填充
- 透明度处理
- 特效应用

## 性能优化
- 数据结构
- 内存管理
- 缓存策略
- IO优化
- 并发处理

## 应用场景
- 图形生成
- 图像处理
- 特效制作
- 批量处理
- 实时渲染

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建6.13作业：编码后视频少几帧的原因文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.13-作业：编码后视频少几帧的原因.md" << 'EOF'
---
title: 作业：编码后视频少几帧的原因
icon: video-frames
order: 13
---

# 作业：编码后视频少几帧的原因

## 问题分析
- 编码参数
- 帧率控制
- 缓冲策略
- 同步机制
- 时间戳处理

## 原因排查
- 编码器配置
- 数据处理
- 缓冲管理
- 时间控制
- 资源限制

## 解决方案
- 参数调整
- 缓冲优化
- 同步处理
- 资源管理
- 性能优化

## 最佳实践
- 编码策略
- 参数配置
- 性能优化
- 调试技巧
- 注意事项
EOF

# 创建6.14作业：视频抽取图片文件
cat > "$BASE_DIR/第6章-FFmpeg编解码实战/6.14-作业：视频抽取图片.md" << 'EOF'
---
title: 作业：视频抽取图片
icon: video-extract
order: 14
---

# 作业：视频抽取图片

## 功能需求
- 帧提取
- 格式转换
- 质量控制
- 批量处理
- 命名规则

## 实现方案
- 视频解码
- 帧处理
- 图片编码
- 文件保存
- 进度控制

## 核心代码
- 初始化配置
- 数据处理
- 格式转换
- 文件操作
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建第7章目录
mkdir -p "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战"

# 创建第7章README文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/README.md" << 'EOF'
---
title: FFmpeg SDL音视频渲染实战
icon: sdl-render
order: 7
---

# FFmpeg SDL音视频渲染实战

本章介绍FFmpeg与SDL结合的音视频渲染实战应用。
EOF

# 创建7.1SDL编译与安装文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.1-SDL编译与安装.md" << 'EOF'
---
title: SDL编译与安装
icon: sdl-install
order: 1
---

# SDL编译与安装

## 环境准备
- 系统要求
- 依赖检查
- 工具安装
- 源码获取
- 编译环境

## 编译配置
- 配置选项
- 依赖设置
- 功能选择
- 优化参数
- 调试选项

## 安装步骤
- 源码编译
- 库文件安装
- 环境配置
- 测试验证
- 问题排查

## 最佳实践
- 编译优化
- 配置建议
- 问题解决
- 调试技巧
- 注意事项
EOF

# 创建7.2SDL基本使用步骤文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.2-SDL基本使用步骤.md" << 'EOF'
---
title: SDL基本使用步骤
icon: sdl-basics
order: 2
---

# SDL基本使用步骤

## 初始化配置
- 系统初始化
- 窗口创建
- 渲染器设置
- 事件处理
- 资源管理

## 基本操作
- 图形绘制
- 音频播放
- 事件处理
- 定时器使用
- 资源管理

## 核心功能
- 视频渲染
- 音频输出
- 事件系统
- 时间控制
- 资源管理

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建7.3SDL窗口渲染文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.3-SDL窗口渲染.md" << 'EOF'
---
title: SDL窗口渲染
icon: sdl-window
order: 3
---

# SDL窗口渲染

## 窗口管理
- 窗口创建
- 窗口属性
- 窗口控制
- 窗口事件
- 窗口销毁

## 渲染系统
- 渲染器创建
- 渲染模式
- 渲染操作
- 渲染控制
- 渲染优化

## 绘制功能
- 基本图形
- 颜色控制
- 透明度
- 混合模式
- 特效应用

## 最佳实践
- 渲染策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.4SDL事件处理文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.4-SDL事件处理.md" << 'EOF'
---
title: SDL事件处理
icon: sdl-events
order: 4
---

# SDL事件处理

## 事件系统
- 事件类型
- 事件队列
- 事件过滤
- 事件分发
- 事件处理

## 输入处理
- 键盘事件
- 鼠标事件
- 触摸事件
- 手柄事件
- 窗口事件

## 事件循环
- 事件获取
- 事件分发
- 事件处理
- 事件响应
- 循环控制

## 最佳实践
- 处理策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.5纹理渲染详解-1文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.5-纹理渲染详解-1.md" << 'EOF'
---
title: 纹理渲染详解-1
icon: texture-render1
order: 5
---

# 纹理渲染详解-1

## 基础概念
- 纹理创建
- 纹理格式
- 纹理属性
- 纹理操作
- 纹理销毁

## 渲染流程
- 纹理加载
- 纹理更新
- 纹理渲染
- 纹理控制
- 纹理同步

## 核心实现
- 初始化配置
- 数据处理
- 渲染控制
- 性能优化
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.6纹理渲染详解-2文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.6-纹理渲染详解-2.md" << 'EOF'
---
title: 纹理渲染详解-2
icon: texture-render2
order: 6
---

# 纹理渲染详解-2

## 高级特性
- 纹理变换
- 纹理混合
- 纹理滤镜
- 纹理动画
- 特效处理

## 性能优化
- 纹理缓存
- 内存管理
- 渲染优化
- 批量处理
- 资源控制

## 应用场景
- 图像渲染
- 视频播放
- 动画制作
- 特效实现
- 游戏开发

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.7实现YUV播放器文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.7-实现YUV播放器.md" << 'EOF'
---
title: 实现YUV播放器
icon: yuv-player
order: 7
---

# 实现YUV播放器

## 基础架构
- 播放器框架
- 数据处理
- 渲染控制
- 同步机制
- 交互控制

## 核心功能
- YUV解析
- 格式转换
- 帧渲染
- 播放控制
- 性能优化

## 实现细节
- 初始化配置
- 数据读取
- 渲染处理
- 播放控制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.8SDL音频处理流程文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.8-SDL音频处理流程.md" << 'EOF'
---
title: SDL音频处理流程
icon: sdl-audio
order: 8
---

# SDL音频处理流程

## 音频系统
- 音频初始化
- 设备配置
- 音频格式
- 回调机制
- 音频控制

## 处理流程
- 数据获取
- 格式转换
- 音频播放
- 同步控制
- 资源管理

## 核心实现
- 设备配置
- 数据处理
- 播放控制
- 同步机制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.9实现PCM播放器-1文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.9-实现PCM播放器-1.md" << 'EOF'
---
title: 实现PCM播放器-1
icon: pcm-player1
order: 9
---

# 实现PCM播放器-1

## 基础架构
- 播放器框架
- 数据处理
- 播放控制
- 同步机制
- 交互控制

## 核心功能
- PCM解析
- 格式转换
- 音频播放
- 播放控制
- 性能优化

## 实现细节
- 初始化配置
- 数据读取
- 音频处理
- 播放控制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建7.10实现PCM播放器-2文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.10-实现PCM播放器-2.md" << 'EOF'
---
title: 实现PCM播放器-2
icon: pcm-player2
order: 10
---

# 实现PCM播放器-2

## 高级特性
- 音频缓冲
- 音量控制
- 播放速度
- 音效处理
- 实时控制

## 性能优化
- 缓冲策略
- 内存管理
- 线程控制
- 同步机制
- 资源管理

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.11实现PCM播放器-3文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.11-实现PCM播放器-3.md" << 'EOF'
---
title: 实现PCM播放器-3
icon: pcm-player3
order: 11
---

# 实现PCM播放器-3

## 扩展功能
- 格式支持
- 音频效果
- 可视化
- 播放列表
- 控制接口

## 工具集成
- 命令行工具
- GUI界面
- API接口
- 插件系统
- 自动化处理

## 应用场景
- 音频播放
- 音效处理
- 实时处理
- 音频分析
- 音频编辑

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建7.12作业：SDL窗口不显示的原因文件
cat > "$BASE_DIR/第7章-FFmpeg SDL音视频渲染实战/7.12-作业：SDL窗口不显示的原因.md" << 'EOF'
---
title: 作业：SDL窗口不显示的原因
icon: sdl-window-debug
order: 12
---

# 作业：SDL窗口不显示的原因

## 问题分析
- 初始化检查
- 窗口创建
- 渲染配置
- 事件处理
- 资源管理

## 常见原因
- 初始化失败
- 参数错误
- 资源问题
- 渲染问题
- 系统限制

## 解决方案
- 参数调整
- 资源检查
- 错误处理
- 调试分析
- 优化配置

## 最佳实践
- 调试策略
- 问题定位
- 性能优化
- 资源管理
- 注意事项
EOF

# 创建第8章目录
mkdir -p "$BASE_DIR/第8章-FFmpeg播放器核心功能开发"

# 创建第8章README文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/README.md" << 'EOF'
---
title: FFmpeg播放器核心功能开发
icon: player-dev
order: 8
---

# FFmpeg播放器核心功能开发

本章介绍FFmpeg播放器核心功能的开发实现。
EOF

# 创建8.1最简单的视频播放器-1文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.1-最简单的视频播放器-1.md" << 'EOF'
---
title: 最简单的视频播放器-1
icon: video-player1
order: 1
---

# 最简单的视频播放器-1

## 基础架构
- 播放器框架
- 解码模块
- 渲染模块
- 控制模块
- 同步模块

## 核心功能
- 视频解码
- 音频解码
- 视频渲染
- 音频播放
- 同步控制

## 实现细节
- 初始化配置
- 数据处理
- 渲染控制
- 播放控制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.2最简单的视频播放器-2文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.2-最简单的视频播放器-2.md" << 'EOF'
---
title: 最简单的视频播放器-2
icon: video-player2
order: 2
---

# 最简单的视频播放器-2

## 高级特性
- 多格式支持
- 播放控制
- 音视频同步
- 性能优化
- 错误处理

## 性能优化
- 解码优化
- 渲染优化
- 缓冲策略
- 同步机制
- 资源管理

## 功能扩展
- 播放控制
- 进度控制
- 音量控制
- 画面调整
- 特效支持

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.3最简单的视频播放器-3文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.3-最简单的视频播放器-3.md" << 'EOF'
---
title: 最简单的视频播放器-3
icon: video-player3
order: 3
---

# 最简单的视频播放器-3

## 高级功能
- 缓冲管理
- 帧率控制
- 音视频同步
- 状态管理
- 事件处理

## 性能优化
- 解码优化
- 渲染优化
- 内存管理
- 线程控制
- 资源调度

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态重置

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.4最简单的视频播放器-4文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.4-最简单的视频播放器-4.md" << 'EOF'
---
title: 最简单的视频播放器-4
icon: video-player4
order: 4
---

# 最简单的视频播放器-4

## 扩展功能
- 字幕支持
- 多音轨
- 播放列表
- 特效处理
- 控制接口

## 工具集成
- 命令行工具
- GUI界面
- API接口
- 插件系统
- 自动化处理

## 应用场景
- 本地播放
- 流媒体
- 直播系统
- 视频会议
- 在线教育

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.5最简单的视频播放器-5文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.5-最简单的视频播放器-5.md" << 'EOF'
---
title: 最简单的视频播放器-5
icon: video-player5
order: 5
---

# 最简单的视频播放器-5

## 高级特性
- 硬件加速
- 自适应码率
- 智能缓冲
- 画质增强
- 音效处理

## 性能调优
- CPU优化
- GPU加速
- 内存管理
- 并发控制
- 资源调度

## 功能完善
- 用户界面
- 控制面板
- 配置管理
- 插件系统
- 数据统计

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.6解复用音视频数据文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.6-解复用音视频数据.md" << 'EOF'
---
title: 解复用音视频数据
icon: demuxing
order: 6
---

# 解复用音视频数据

## 基础概念
- 复用格式
- 流类型
- 包格式
- 时间戳
- 同步标记

## 解复用流程
- 格式识别
- 流分离
- 数据读取
- 包处理
- 同步控制

## 核心实现
- 初始化配置
- 数据处理
- 流程控制
- 错误处理
- 资源管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.7音频设备参数设置文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.7-音频设备参数设置.md" << 'EOF'
---
title: 音频设备参数设置
icon: audio-config
order: 7
---

# 音频设备参数设置

## 设备参数
- 采样率
- 声道配置
- 采样格式
- 缓冲大小
- 延迟控制

## 参数配置
- 设备初始化
- 参数设置
- 格式转换
- 缓冲配置
- 回调设置

## 实现细节
- 设备检测
- 参数验证
- 配置应用
- 错误处理
- 状态管理

## 最佳实践
- 配置策略
- 性能优化
- 兼容处理
- 调试技巧
- 注意事项
EOF

# 创建8.8AVPacket队列实现-1文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.8-AVPacket队列实现-1.md" << 'EOF'
---
title: AVPacket队列实现-1
icon: packet-queue1
order: 8
---

# AVPacket队列实现-1

## 基础架构
- 队列设计
- 数据结构
- 接口定义
- 同步机制
- 内存管理

## 核心功能
- 入队操作
- 出队操作
- 队列管理
- 同步控制
- 资源管理

## 实现细节
- 初始化配置
- 数据处理
- 同步机制
- 错误处理
- 资源释放

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.9AVPacket队列实现-2文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.9-AVPacket队列实现-2.md" << 'EOF'
---
title: AVPacket队列实现-2
icon: packet-queue2
order: 9
---

# AVPacket队列实现-2

## 高级特性
- 缓冲策略
- 内存池
- 并发控制
- 性能优化
- 状态管理

## 性能优化
- 内存管理
- 并发处理
- 缓存策略
- 资源控制
- 调度优化

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态重置

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.10获取音频并解码-1文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.10-获取音频并解码-1.md" << 'EOF'
---
title: 获取音频并解码-1
icon: audio-decode1
order: 10
---

# 获取音频并解码-1

## 基础架构
- 解码器配置
- 数据获取
- 解码流程
- 缓冲管理
- 同步控制

## 核心功能
- 音频读取
- 格式解析
- 解码处理
- 数据转换
- 错误处理

## 实现细节
- 初始化配置
- 数据处理
- 解码控制
- 同步机制
- 资源管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.11获取音频并解码-2文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.11-获取音频并解码-2.md" << 'EOF'
---
title: 获取音频并解码-2
icon: audio-decode2
order: 11
---

# 获取音频并解码-2

## 高级特性
- 多格式支持
- 硬件加速
- 并发处理
- 缓存优化
- 质量控制

## 性能优化
- 解码策略
- 内存管理
- 并发控制
- 缓存机制
- 资源调度

## 错误处理
- 异常捕获
- 错误恢复
- 日志记录
- 资源清理
- 状态管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.12获取音频并解码-3文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.12-获取音频并解码-3.md" << 'EOF'
---
title: 获取音频并解码-3
icon: audio-decode3
order: 12
---

# 获取音频并解码-3

## 扩展功能
- 格式转换
- 音效处理
- 实时处理
- 流媒体支持
- 插件系统

## 工具集成
- 命令行工具
- GUI界面
- API接口
- 自动化处理
- 监控系统

## 应用场景
- 音频播放
- 流媒体处理
- 实时通信
- 音频编辑
- 音效处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.13调试播放器程序文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.13-调试播放器程序.md" << 'EOF'
---
title: 调试播放器程序
icon: player-debug
order: 13
---

# 调试播放器程序

## 调试环境
- 工具配置
- 环境设置
- 数据准备
- 日志配置
- 断点策略

## 调试方法
- 断点调试
- 日志分析
- 性能分析
- 内存检查
- 错误追踪

## 常见问题
- 解码错误
- 同步问题
- 性能问题
- 内存泄漏
- 资源管理

## 最佳实践
- 调试策略
- 问题定位
- 性能优化
- 内存管理
- 注意事项
EOF

# 创建8.14多线程与锁文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.14-多线程与锁.md" << 'EOF'
---
title: 多线程与锁
icon: threading
order: 14
---

# 多线程与锁

## 基础概念
- 线程模型
- 同步机制
- 锁类型
- 线程通信
- 资源管理

## 实现机制
- 线程创建
- 锁操作
- 同步控制
- 通信机制
- 资源共享

## 应用场景
- 并发处理
- 资源同步
- 任务调度
- 性能优化
- 状态管理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.15锁与条件变量应用文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.15-锁与条件变量应用.md" << 'EOF'
---
title: 锁与条件变量应用
icon: locks-conditions
order: 15
---

# 锁与条件变量应用

## 基础概念
- 互斥锁
- 条件变量
- 信号量
- 读写锁
- 自旋锁

## 应用场景
- 资源同步
- 线程通信
- 状态控制
- 任务调度
- 并发控制

## 实现细节
- 锁操作
- 条件等待
- 信号通知
- 超时处理
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 死锁预防
- 调试技巧
- 注意事项
EOF

# 创建8.16播放器线程模型文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.16-播放器线程模型.md" << 'EOF'
---
title: 播放器线程模型
icon: player-threads
order: 16
---

# 播放器线程模型

## 架构设计
- 线程划分
- 通信机制
- 同步策略
- 任务调度
- 资源管理

## 核心线程
- 解码线程
- 渲染线程
- 音频线程
- 控制线程
- 缓冲线程

## 线程交互
- 数据传递
- 状态同步
- 事件通知
- 资源共享
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.17播放器核心结构体文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.17-播放器核心结构体.md" << 'EOF'
---
title: 播放器核心结构体
icon: player-struct
order: 17
---

# 播放器核心结构体

## 基础结构
- 播放器状态
- 媒体信息
- 解码器配置
- 缓冲队列
- 同步控制

## 数据管理
- 音频数据
- 视频数据
- 字幕数据
- 时间戳
- 状态信息

## 控制接口
- 播放控制
- 进度控制
- 音量控制
- 画面控制
- 状态查询

## 最佳实践
- 设计策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.18线程退出机制文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.18-线程退出机制.md" << 'EOF'
---
title: 线程退出机制
icon: thread-exit
order: 18
---

# 线程退出机制

## 退出策略
- 退出标志
- 资源释放
- 状态同步
- 错误处理
- 超时控制

## 实现机制
- 信号处理
- 资源清理
- 状态更新
- 线程同步
- 异常处理

## 应用场景
- 正常退出
- 异常退出
- 强制退出
- 超时退出
- 重启处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.19音视频同步原理文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.19-音视频同步原理.md" << 'EOF'
---
title: 音视频同步原理
icon: av-sync
order: 19
---

# 音视频同步原理

## 基础概念
- 时间戳
- 同步策略
- 缓冲机制
- 延迟控制
- 帧率控制

## 同步方法
- 音频主同步
- 视频主同步
- 外部时钟
- 自适应同步
- 误差修正

## 实现细节
- 时钟管理
- 帧控制
- 缓冲控制
- 延迟处理
- 误差处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.20实现完整播放器-1文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.20-实现完整播放器-1.md" << 'EOF'
---
title: 实现完整播放器-1
icon: full-player1
order: 20
---

# 实现完整播放器-1

## 架构设计
- 模块划分
- 接口定义
- 数据流
- 控制流
- 资源管理

## 核心功能
- 解码系统
- 渲染系统
- 音频系统
- 控制系统
- 同步系统

## 实现细节
- 初始化配置
- 数据处理
- 播放控制
- 同步机制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.21实现完整播放器-2文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.21-实现完整播放器-2.md" << 'EOF'
---
title: 实现完整播放器-2
icon: full-player2
order: 21
---

# 实现完整播放器-2

## 高级特性
- 多格式支持
- 硬件加速
- 自适应码率
- 缓冲控制
- 特效处理

## 性能优化
- 解码优化
- 渲染优化
- 内存管理
- 并发控制
- 资源调度

## 功能扩展
- 播放控制
- 进度控制
- 音量控制
- 画面调整
- 特效支持

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建8.22实现完整播放器-3文件
cat > "$BASE_DIR/第8章-FFmpeg播放器核心功能开发/8.22-实现完整播放器-3.md" << 'EOF'
---
title: 实现完整播放器-3
icon: full-player3
order: 22
---

# 实现完整播放器-3

## 扩展功能
- 字幕支持
- 多音轨
- 播放列表
- 插件系统
- 控制接口

## 工具集成
- 命令行工具
- GUI界面
- API接口
- 自动化处理
- 监控系统

## 应用场景
- 本地播放
- 流媒体
- 直播系统
- 视频会议
- 在线教育

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第9章目录
mkdir -p "$BASE_DIR/第9章-如何在Android下使用FFmpeg"

# 创建第9章README文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/README.md" << 'EOF'
---
title: 如何在Android下使用FFmpeg
icon: android-ffmpeg
order: 9
---

# 如何在Android下使用FFmpeg

本章介绍如何在Android平台上集成和使用FFmpeg库。
EOF

# 创建9.1第一个JNI程序文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.1-第一个JNI程序.md" << 'EOF'
---
title: 第一个JNI程序
icon: jni-basic
order: 1
---

# 第一个JNI程序

## 基础概念
- JNI简介
- 开发环境
- 基本流程
- 数据类型
- 错误处理

## 开发准备
- 环境配置
- 工具安装
- 项目设置
- 编译配置
- 调试环境

## 实现步骤
- Java层接口
- Native层实现
- 编译构建
- 测试验证
- 错误处理

## 最佳实践
- 开发规范
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建9.2Java调用C接口-1文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.2-Java调用C接口-1.md" << 'EOF'
---
title: Java调用C接口-1
icon: java-c-interface1
order: 2
---

# Java调用C接口-1

## 基础知识
- 接口定义
- 数据类型
- 参数传递
- 返回值处理
- 异常处理

## 实现方法
- 接口声明
- 参数映射
- 类型转换
- 内存管理
- 错误处理

## 核心功能
- 基本类型
- 字符串处理
- 数组操作
- 对象传递
- 回调机制

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建9.3Java调用C接口-2文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.3-Java调用C接口-2.md" << 'EOF'
---
title: Java调用C接口-2
icon: java-c-interface2
order: 3
---

# Java调用C接口-2

## 高级特性
- 复杂对象
- 数组处理
- 异步调用
- 缓存策略
- 资源管理

## 性能优化
- 调用开销
- 数据传输
- 内存管理
- 并发处理
- 资源控制

## 错误处理
- 异常捕获
- 错误码
- 日志记录
- 资源清理
- 状态恢复

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建9.4JNI中的Signature文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.4-JNI中的Signature.md" << 'EOF'
---
title: JNI中的Signature
icon: jni-signature
order: 4
---

# JNI中的Signature

## 基础概念
- 类型签名
- 方法签名
- 字段签名
- 数组签名
- 对象签名

## 签名规则
- 基本类型
- 引用类型
- 数组类型
- 方法类型
- 构造函数

## 应用场景
- 方法调用
- 字段访问
- 对象创建
- 数组操作
- 异常处理

## 最佳实践
- 命名规范
- 类型映射
- 签名生成
- 调试技巧
- 注意事项
EOF

# 创建9.5C调用Java方法文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.5-C调用Java方法.md" << 'EOF'
---
title: C调用Java方法
icon: c-java-call
order: 5
---

# C调用Java方法

## 基础知识
- 环境准备
- 方法查找
- 参数传递
- 返回值处理
- 异常处理

## 实现方法
- 类查找
- 方法获取
- 参数构造
- 方法调用
- 结果处理

## 应用场景
- 回调实现
- 事件通知
- 状态更新
- 数据传递
- 异常处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建9.6编译Android下的FFmpeg-工具链方式文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.6-编译Android下的FFmpeg-工具链方式.md" << 'EOF'
---
title: 编译Android下的FFmpeg-工具链方式
icon: ffmpeg-android-build
order: 6
---

# 编译Android下的FFmpeg-工具链方式

## 环境准备
- NDK安装
- 工具链配置
- 环境变量
- 依赖检查
- 编译工具

## 编译配置
- 架构选择
- 功能配置
- 优化选项
- 依赖设置
- 输出配置

## 编译步骤
- 源码准备
- 配置生成
- 编译构建
- 测试验证
- 问题排查

## 最佳实践
- 编译策略
- 性能优化
- 问题解决
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建9.7编译Android下的FFmpeg-非工具链方式文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.7-编译Android下的FFmpeg-非工具链方式.md" << 'EOF'
---
title: 编译Android下的FFmpeg-非工具链方式
icon: ffmpeg-android-build2
order: 7
---

# 编译Android下的FFmpeg-非工具链方式

## 环境准备
- NDK配置
- 编译环境
- 依赖检查
- 工具安装
- 脚本准备

## 编译配置
- 架构选择
- 功能配置
- 优化选项
- 依赖设置
- 输出配置

## 编译步骤
- 源码准备
- 配置生成
- 编译构建
- 测试验证
- 问题排查

## 最佳实践
- 编译策略
- 性能优化
- 问题解决
- 调试技巧
- 注意事项
EOF

# 创建9.8实战：Android下的播放器文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.8-实战：Android下的播放器.md" << 'EOF'
---
title: 实战：Android下的播放器
icon: android-player
order: 8
---

# 实战：Android下的播放器

## 项目架构
- 界面设计
- 功能模块
- 数据流
- 控制流
- 资源管理

## 核心功能
- 视频播放
- 音频播放
- 播放控制
- 进度控制
- 音量控制

## 实现细节
- 初始化配置
- 数据处理
- 播放控制
- 同步机制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建9.9作业：Linux下无法编译ffplay的原因文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.9-作业：Linux下无法编译ffplay的原因.md" << 'EOF'
---
title: 作业：Linux下无法编译ffplay的原因
icon: linux-ffplay
order: 9
---

# 作业：Linux下无法编译ffplay的原因

## 问题分析
- 环境检查
- 依赖分析
- 配置检查
- 编译错误
- 系统限制

## 常见原因
- 依赖缺失
- 配置错误
- 权限问题
- 版本冲突
- 系统兼容

## 解决方案
- 依赖安装
- 配置修正
- 权限设置
- 版本调整
- 环境优化

## 最佳实践
- 排查策略
- 问题定位
- 解决方案
- 调试技巧
- 注意事项
EOF

# 创建9.10作业：错误分析文件
cat > "$BASE_DIR/第9章-如何在Android下使用FFmpeg/9.10-作业：错误分析.md" << 'EOF'
---
title: 作业：错误分析
icon: error-analysis
order: 10
---

# 作业：错误分析

## 错误类型
- 编译错误
- 运行错误
- 链接错误
- 配置错误
- 系统错误

## 分析方法
- 日志分析
- 堆栈跟踪
- 环境检查
- 代码审查
- 测试验证

## 解决策略
- 问题定位
- 原因分析
- 方案制定
- 验证测试
- 文档记录

## 最佳实践
- 分析方法
- 调试技巧
- 解决方案
- 预防措施
- 经验总结
EOF

# 创建第10章目录
mkdir -p "$BASE_DIR/第10章-如何在iOS下使用FFmpeg"

# 创建第10章README文件
cat > "$BASE_DIR/第10章-如何在iOS下使用FFmpeg/README.md" << 'EOF'
---
title: 如何在iOS下使用FFmpeg
icon: ios-ffmpeg
order: 10
---

# 如何在iOS下使用FFmpeg

本章介绍如何在iOS平台上集成和使用FFmpeg库。
EOF

# 创建10.1编译iOS下的FFmpeg文件
cat > "$BASE_DIR/第10章-如何在iOS下使用FFmpeg/10.1-编译iOS下的FFmpeg.md" << 'EOF'
---
title: 编译iOS下的FFmpeg
icon: ios-ffmpeg-build
order: 1
---

# 编译iOS下的FFmpeg

## 环境准备
- Xcode配置
- 编译工具
- 依赖检查
- 脚本准备
- 证书配置

## 编译配置
- 架构选择
- 功能配置
- 优化选项
- 依赖设置
- 输出配置

## 编译步骤
- 源码准备
- 配置生成
- 编译构建
- 测试验证
- 问题排查

## 最佳实践
- 编译策略
- 性能优化
- 问题解决
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建10.2iOS中使用FFmpeg文件
cat > "$BASE_DIR/第10章-如何在iOS下使用FFmpeg/10.2-iOS中使用FFmpeg.md" << 'EOF'
---
title: iOS中使用FFmpeg
icon: ios-ffmpeg-usage
order: 2
---

# iOS中使用FFmpeg

## 集成准备
- 库文件导入
- 头文件配置
- 依赖设置
- 权限配置
- 初始化设置

## 基本使用
- 初始化配置
- 接口调用
- 错误处理
- 资源管理
- 性能优化

## 功能实现
- 视频播放
- 音频处理
- 格式转换
- 滤镜应用
- 编解码处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建第11章目录
mkdir -p "$BASE_DIR/第11章-滤镜Filter的核心原理及实现"

# 创建第11章README文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/README.md" << 'EOF'
---
title: 滤镜Filter的核心原理及实现
icon: filter
order: 11
---

# 滤镜Filter的核心原理及实现

本章介绍FFmpeg滤镜系统的核心原理和具体实现方法。
EOF

# 创建11.1Filter核心原理文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.1-Filter核心原理.md" << 'EOF'
---
title: Filter核心原理
icon: filter-core
order: 1
---

# Filter核心原理

## 基础概念
- 滤镜定义
- 滤镜类型
- 滤镜链
- 数据流
- 参数配置

## 工作原理
- 数据输入
- 处理流程
- 数据输出
- 参数控制
- 状态管理

## 核心组件
- 滤镜节点
- 数据缓冲
- 参数系统
- 时间管理
- 资源控制

## 最佳实践
- 设计策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.2命令行使用Filter文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.2-命令行使用Filter.md" << 'EOF'
---
title: 命令行使用Filter
icon: filter-cli
order: 2
---

# 命令行使用Filter

## 基本用法
- 命令格式
- 参数设置
- 滤镜链
- 输出控制
- 错误处理

## 常用滤镜
- 视频滤镜
- 音频滤镜
- 复合滤镜
- 特效滤镜
- 转换滤镜

## 应用场景
- 视频处理
- 音频处理
- 特效制作
- 格式转换
- 实时处理

## 最佳实践
- 使用策略
- 性能优化
- 问题解决
- 调试技巧
- 注意事项
EOF

# 创建11.3引入avfilter库文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.3-引入avfilter库.md" << 'EOF'
---
title: 引入avfilter库
icon: avfilter-lib
order: 3
---

# 引入avfilter库

## 环境准备
- 库文件配置
- 头文件导入
- 依赖检查
- 初始化设置
- 错误处理

## 基本配置
- 库初始化
- 参数设置
- 资源配置
- 错误处理
- 状态管理

## 使用方法
- 接口调用
- 参数传递
- 数据处理
- 资源管理
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.4使用Filter的步骤-1文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.4-使用Filter的步骤-1.md" << 'EOF'
---
title: 使用Filter的步骤-1
icon: filter-steps1
order: 4
---

# 使用Filter的步骤-1

## 初始化配置
- 环境准备
- 参数设置
- 资源分配
- 错误处理
- 状态管理

## 滤镜创建
- 滤镜选择
- 参数配置
- 链接设置
- 资源分配
- 错误处理

## 数据处理
- 输入处理
- 滤镜应用
- 输出处理
- 同步控制
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.5使用Filter的步骤-2文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.5-使用Filter的步骤-2.md" << 'EOF'
---
title: 使用Filter的步骤-2
icon: filter-steps2
order: 5
---

# 使用Filter的步骤-2

## 高级配置
- 滤镜链接
- 参数优化
- 缓冲管理
- 性能调优
- 资源控制

## 数据流控制
- 输入管理
- 处理流程
- 输出控制
- 同步机制
- 错误处理

## 状态管理
- 状态监控
- 错误恢复
- 资源释放
- 性能统计
- 日志记录

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.6初始化Filter的原理文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.6-初始化Filter的原理.md" << 'EOF'
---
title: 初始化Filter的原理
icon: filter-init-theory
order: 6
---

# 初始化Filter的原理

## 基础原理
- 初始化流程
- 参数解析
- 资源分配
- 状态初始化
- 错误处理

## 核心组件
- 滤镜图
- 上下文
- 缓冲系统
- 参数系统
- 时间管理

## 工作机制
- 数据流向
- 处理流程
- 同步机制
- 资源管理
- 错误处理

## 最佳实践
- 设计策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.7初始化Filter实战-1文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.7-初始化Filter实战-1.md" << 'EOF'
---
title: 初始化Filter实战-1
icon: filter-init-practice1
order: 7
---

# 初始化Filter实战-1

## 实现步骤
- 环境准备
- 参数配置
- 资源分配
- 初始化流程
- 错误处理

## 核心代码
- 初始化函数
- 参数设置
- 资源管理
- 错误处理
- 状态检查

## 调试验证
- 功能测试
- 性能测试
- 内存检查
- 错误测试
- 状态验证

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.8初始化Filter实战-2文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.8-初始化Filter实战-2.md" << 'EOF'
---
title: 初始化Filter实战-2
icon: filter-init-practice2
order: 8
---

# 初始化Filter实战-2

## 高级特性
- 复杂配置
- 动态参数
- 链式处理
- 性能优化
- 资源管理

## 实现细节
- 参数处理
- 资源分配
- 状态管理
- 错误处理
- 性能优化

## 功能扩展
- 自定义滤镜
- 参数系统
- 缓存机制
- 并发处理
- 监控系统

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.9优化init_filter函数文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.9-优化init_filter函数.md" << 'EOF'
---
title: 优化init_filter函数
icon: filter-init-optimize
order: 9
---

# 优化init_filter函数

## 优化方向
- 性能提升
- 内存优化
- 错误处理
- 资源管理
- 代码结构

## 实现方法
- 代码重构
- 算法优化
- 缓存策略
- 并发处理
- 资源控制

## 测试验证
- 性能测试
- 内存测试
- 稳定性测试
- 压力测试
- 功能验证

## 最佳实践
- 优化策略
- 性能指标
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.10使用Filter读取数据文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.10-使用Filter读取数据.md" << 'EOF'
---
title: 使用Filter读取数据
icon: filter-read
order: 10
---

# 使用Filter读取数据

## 读取流程
- 数据准备
- 读取方法
- 缓冲管理
- 同步控制
- 错误处理

## 实现细节
- 接口调用
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 性能优化
- 读取策略
- 缓存机制
- 并发处理
- 内存管理
- 资源控制

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.11使用Filter获取原始数据文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.11-使用Filter获取原始数据.md" << 'EOF'
---
title: 使用Filter获取原始数据
icon: filter-raw-data
order: 11
---

# 使用Filter获取原始数据

## 获取流程
- 数据源配置
- 读取方法
- 格式转换
- 数据处理
- 错误处理

## 实现细节
- 接口调用
- 数据解析
- 格式处理
- 缓冲管理
- 错误处理

## 性能优化
- 读取策略
- 缓存机制
- 并发处理
- 内存管理
- 资源控制

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.12使用Filter进行滤镜处理文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.12-使用Filter进行滤镜处理.md" << 'EOF'
---
title: 使用Filter进行滤镜处理
icon: filter-process
order: 12
---

# 使用Filter进行滤镜处理

## 处理流程
- 滤镜选择
- 参数配置
- 数据处理
- 效果应用
- 结果输出

## 实现细节
- 滤镜链接
- 数据传输
- 参数控制
- 效果处理
- 错误处理

## 性能优化
- 处理策略
- 缓存机制
- 并发处理
- 内存管理
- 资源控制

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.13使用Filter输出数据文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.13-使用Filter输出数据.md" << 'EOF'
---
title: 使用Filter输出数据
icon: filter-output
order: 13
---

# 使用Filter输出数据

## 输出流程
- 数据准备
- 格式转换
- 输出控制
- 同步机制
- 错误处理

## 实现细节
- 接口调用
- 数据处理
- 格式处理
- 缓冲管理
- 错误处理

## 性能优化
- 输出策略
- 缓存机制
- 并发处理
- 内存管理
- 资源控制

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.14Filter代码优化文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.14-Filter代码优化.md" << 'EOF'
---
title: Filter代码优化
icon: filter-optimize
order: 14
---

# Filter代码优化

## 优化方向
- 性能提升
- 内存优化
- 代码结构
- 错误处理
- 资源管理

## 实现方法
- 代码重构
- 算法优化
- 缓存策略
- 并发处理
- 资源控制

## 测试验证
- 性能测试
- 内存测试
- 稳定性测试
- 压力测试
- 功能验证

## 最佳实践
- 优化策略
- 性能指标
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.15实现自定义Filter文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.15-实现自定义Filter.md" << 'EOF'
---
title: 实现自定义Filter
icon: custom-filter
order: 15
---

# 实现自定义Filter

## 基础架构
- 接口定义
- 参数系统
- 处理流程
- 资源管理
- 错误处理

## 核心实现
- 初始化逻辑
- 处理逻辑
- 资源管理
- 参数控制
- 错误处理

## 功能扩展
- 参数系统
- 效果处理
- 性能优化
- 调试支持
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.16Filter重要结构体文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.16-Filter重要结构体.md" << 'EOF'
---
title: Filter重要结构体
icon: filter-struct
order: 16
---

# Filter重要结构体

## 基础结构
- 数据结构
- 成员定义
- 接口设计
- 资源管理
- 状态控制

## 核心功能
- 数据处理
- 参数控制
- 资源管理
- 状态管理
- 错误处理

## 使用方法
- 结构初始化
- 成员访问
- 资源管理
- 状态控制
- 错误处理

## 最佳实践
- 设计策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.17drawboxfilter实现分析-1文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.17-drawboxfilter实现分析-1.md" << 'EOF'
---
title: drawboxfilter实现分析-1
icon: drawbox-filter1
order: 17
---

# drawboxfilter实现分析-1

## 基础架构
- 数据结构
- 参数系统
- 处理流程
- 资源管理
- 错误处理

## 核心实现
- 初始化逻辑
- 绘制算法
- 参数处理
- 资源管理
- 错误处理

## 功能特性
- 绘制控制
- 颜色管理
- 位置控制
- 大小调整
- 透明度处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF

# 创建11.18drawboxfilter实现分析-2文件
cat > "$BASE_DIR/第11章-滤镜Filter的核心原理及实现/11.18-drawboxfilter实现分析-2.md" << 'EOF'
---
title: drawboxfilter实现分析-2
icon: drawbox-filter2
order: 18
---

# drawboxfilter实现分析-2

## 高级特性
- 复杂绘制
- 动态效果
- 性能优化
- 资源管理
- 错误处理

## 实现细节
- 算法优化
- 缓存策略
- 并发处理
- 内存管理
- 资源控制

## 应用场景
- 视频标注
- 区域高亮
- 特效制作
- 实时处理
- 批量处理

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 注意事项
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第12章目录
mkdir -p "$BASE_DIR/第12章-课程总结"

# 创建第12章README文件
cat > "$BASE_DIR/第12章-课程总结/README.md" << 'EOF'
---
title: 课程总结
icon: summary
order: 12
---

# 课程总结

本章对整个音视频开发课程进行系统总结，并提供进阶学习建议。
EOF

# 创建12.1课程总结文件
cat > "$BASE_DIR/第12章-课程总结/12.1-课程总结.md" << 'EOF'
---
title: 课程总结
icon: course-summary
order: 1
---

# 课程总结

## 基础知识
- 音视频基础
- 编解码原理
- FFmpeg架构
- SDL基础
- 开发环境

## 核心技术
- 音视频编解码
- 播放器开发
- 滤镜处理
- 跨平台开发
- 性能优化

## 实战项目
- 音视频播放器
- 滤镜应用
- Android开发
- iOS开发
- 性能调优

## 学习建议
- 知识巩固
- 实践应用
- 进阶方向
- 项目实战
- 持续学习
EOF

# 创建12.2音视频进阶学习建议与行业痛点分析文件
cat > "$BASE_DIR/第12章-课程总结/12.2-音视频进阶学习建议与行业痛点分析.md" << 'EOF'
---
title: 音视频进阶学习建议与行业痛点分析
icon: advanced-guide
order: 2
---

# 音视频进阶学习建议与行业痛点分析

## 进阶方向
- 音视频算法
- 流媒体技术
- 实时通信
- 音视频处理
- 跨平台开发

## 行业痛点
- 性能优化
- 跨平台兼容
- 实时性要求
- 质量保证
- 资源消耗

## 解决方案
- 技术创新
- 架构优化
- 算法改进
- 工具支持
- 标准规范

## 发展趋势
- 技术演进
- 市场需求
- 应用场景
- 发展机遇
- 未来展望
EOF

# 创建WebRTC开发课程目录
mkdir -p "$BASE_DIR/WebRTC开发课程"

# 创建WebRTC开发课程README文件
cat > "$BASE_DIR/WebRTC开发课程/README.md" << 'EOF'
---
title: WebRTC开发课程
icon: webrtc
order: 13
---

# WebRTC开发课程

本课程介绍WebRTC实时通信技术的核心原理与开发实践。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第1章目录
mkdir -p "$BASE_DIR/第1章-学习指南"

# 创建第1章README文件
cat > "$BASE_DIR/第1章-学习指南/README.md" << 'EOF'
---
title: 学习指南
icon: guide
order: 1
---

# 学习指南

本章介绍WebRTC开发课程的学习路线和基础知识。
EOF

# 创建1.1学前必看-课程导学文件
cat > "$BASE_DIR/第1章-学习指南/1.1-学前必看-课程导学.md" << 'EOF'
---
title: 学前必看-课程导学
icon: course-intro
order: 1
---

# 学前必看-课程导学

## 课程概述
- 学习目标
- 课程内容
- 学习路线
- 前置知识
- 实践项目

## 学习准备
- 开发环境
- 工具安装
- 资源获取
- 知识储备
- 学习建议

## 课程特点
- 实战导向
- 原理剖析
- 案例分析
- 最佳实践
- 进阶指导

## 学习方法
- 知识积累
- 实践操作
- 问题解决
- 项目实战
- 持续学习
EOF

# 创建1.2WebRTC介绍文件
cat > "$BASE_DIR/第1章-学习指南/1.2-WebRTC介绍.md" << 'EOF'
---
title: WebRTC介绍
icon: webrtc-intro
order: 2
---

# WebRTC介绍

## 基础概念
- WebRTC定义
- 核心功能
- 技术特点
- 应用场景
- 发展历程

## 核心组件
- 音视频引擎
- 传输协议
- 网络穿透
- 数据通道
- 信令服务

## 技术优势
- 实时性能
- 跨平台支持
- 标准协议
- 安全机制
- 开源生态

## 应用领域
- 视频会议
- 在线教育
- 远程医疗
- 游戏直播
- 智能客服
EOF

# 创建第2章目录
mkdir -p "$BASE_DIR/第2章-WebRTC原理与架构"

# 创建第2章README文件
cat > "$BASE_DIR/第2章-WebRTC原理与架构/README.md" << 'EOF'
---
title: WebRTC原理与架构
icon: webrtc-arch
order: 2
---

# WebRTC原理与架构

本章深入介绍WebRTC的技术原理和系统架构。
EOF

# 创建2.1WebRTC架构文件
cat > "$BASE_DIR/第2章-WebRTC原理与架构/2.1-WebRTC架构.md" << 'EOF'
---
title: WebRTC架构
icon: webrtc-structure
order: 1
---

# WebRTC架构

## 整体架构
- 应用层
- API层
- 引擎层
- 传输层
- 网络层

## 核心模块
- 音频引擎
- 视频引擎
- 传输模块
- 会话管理
- 数据通道

## 协议栈
- 信令协议
- 传输协议
- 媒体协议
- 安全协议
- 网络协议

## 最佳实践
- 架构设计
- 性能优化
- 安全考虑
- 扩展性
- 可维护性
EOF

# 创建2.2WebRTC目录结构文件
cat > "$BASE_DIR/第2章-WebRTC原理与架构/2.2-WebRTC目录结构.md" << 'EOF'
---
title: WebRTC目录结构
icon: webrtc-directory
order: 2
---

# WebRTC目录结构

## 主要目录
- 源码结构
- 核心模块
- 工具目录
- 测试目录
- 示例代码

## 模块说明
- 音频模块
- 视频模块
- 网络模块
- 工具模块
- 测试模块

## 代码组织
- 模块划分
- 依赖关系
- 接口定义
- 实现细节
- 版本管理

## 最佳实践
- 目录规范
- 代码组织
- 版本控制
- 文档管理
- 测试规范
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建2.3WebRTC运行机制文件
cat > "$BASE_DIR/第2章-WebRTC原理与架构/2.3-WebRTC运行机制.md" << 'EOF'
---
title: WebRTC运行机制
icon: webrtc-mechanism
order: 3
---

# WebRTC运行机制

## 基本流程
- 连接建立
- 媒体协商
- 数据传输
- 状态管理
- 连接关闭

## 核心机制
- ICE机制
- NAT穿透
- 媒体协商
- 流控制
- 安全机制

## 数据传输
- RTP/RTCP
- DTLS/SRTP
- SCTP
- ICE/STUN/TURN
- 带宽控制

## 最佳实践
- 连接优化
- 性能调优
- 错误处理
- 安全保障
- 质量监控
EOF

# 创建第3章目录
mkdir -p "$BASE_DIR/第3章-Web服务器原理与Nodejs搭建"

# 创建第3章README文件
cat > "$BASE_DIR/第3章-Web服务器原理与Nodejs搭建/README.md" << 'EOF'
---
title: Web服务器原理与Nodejs搭建
icon: web-server
order: 3
---

# Web服务器原理与Nodejs搭建

本章介绍Web服务器的基本原理和使用Node.js搭建服务器的方法。
EOF

# 创建3.1Web服务器工作原理文件
cat > "$BASE_DIR/第3章-Web服务器原理与Nodejs搭建/3.1-Web服务器工作原理.md" << 'EOF'
---
title: Web服务器工作原理
icon: server-principle
order: 1
---

# Web服务器工作原理

## 基本概念
- 服务器架构
- 请求处理
- 响应机制
- 协议支持
- 并发处理

## 工作流程
- 请求接收
- 请求解析
- 业务处理
- 响应生成
- 响应发送

## 核心功能
- 连接管理
- 路由处理
- 静态资源
- 动态内容
- 安全控制

## 最佳实践
- 性能优化
- 安全配置
- 负载均衡
- 监控管理
- 错误处理
EOF

# 创建3.2Nodejs环境搭建文件
cat > "$BASE_DIR/第3章-Web服务器原理与Nodejs搭建/3.2-Nodejs环境搭建.md" << 'EOF'
---
title: Nodejs环境搭建
icon: nodejs-setup
order: 2
---

# Nodejs环境搭建

## 环境准备
- 系统要求
- 下载安装
- 环境配置
- 版本管理
- 工具安装

## 配置过程
- 安装步骤
- 环境变量
- 包管理器
- 开发工具
- 测试验证

## 常用工具
- npm使用
- 开发框架
- 调试工具
- 性能监控
- 部署工具

## 最佳实践
- 版本选择
- 配置优化
- 安全设置
- 开发规范
- 部署策略
EOF

# 创建3.3最简单的http服务文件
cat > "$BASE_DIR/第3章-Web服务器原理与Nodejs搭建/3.3-最简单的http服务.md" << 'EOF'
---
title: 最简单的http服务
icon: http-server
order: 3
---

# 最简单的http服务

## 基础实现
- 服务创建
- 路由配置
- 请求处理
- 响应生成
- 错误处理

## 核心功能
- 请求解析
- 路由管理
- 静态文件
- 中间件
- 错误处理

## 扩展功能
- 会话管理
- 安全控制
- 日志记录
- 性能监控
- 调试支持

## 最佳实践
- 代码组织
- 错误处理
- 性能优化
- 安全配置
- 部署策略
EOF

# 创建3.4创建https服务文件
cat > "$BASE_DIR/第3章-Web服务器原理与Nodejs搭建/3.4-创建https服务.md" << 'EOF'
---
title: 创建https服务
icon: https-server
order: 4
---

# 创建https服务

## 基础配置
- 证书准备
- 服务配置
- 安全设置
- 端口管理
- 错误处理

## 实现步骤
- 证书生成
- 服务创建
- 配置加载
- 路由设置
- 启动服务

## 安全机制
- SSL/TLS
- 证书验证
- 加密通信
- 安全头部
- 最佳实践

## 最佳实践
- 证书管理
- 性能优化
- 安全加固
- 监控告警
- 维护更新
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建3.5实现一个真正的Web服务器文件
cat > "$BASE_DIR/第3章-Web服务器原理与Nodejs搭建/3.5-实现一个真正的Web服务器.md" << 'EOF'
---
title: 实现一个真正的Web服务器
icon: real-server
order: 5
---

# 实现一个真正的Web服务器

## 基础架构
- 服务器框架
- 路由系统
- 中间件机制
- 静态资源
- 错误处理

## 核心功能
- 请求处理
- 响应生成
- 会话管理
- 安全控制
- 日志系统

## 高级特性
- 缓存机制
- 压缩支持
- 负载均衡
- 反向代理
- 监控系统

## 最佳实践
- 架构设计
- 性能优化
- 安全加固
- 部署策略
- 运维管理
EOF

# 创建第4章目录
mkdir -p "$BASE_DIR/第4章-JavaScript必备知识回顾"

# 创建第4章README文件
cat > "$BASE_DIR/第4章-JavaScript必备知识回顾/README.md" << 'EOF'
---
title: JavaScript必备知识回顾
icon: javascript
order: 4
---

# JavaScript必备知识回顾

本章回顾WebRTC开发所需的JavaScript核心知识。
EOF

# 创建4.1JavaScript调试文件
cat > "$BASE_DIR/第4章-JavaScript必备知识回顾/4.1-JavaScript调试.md" << 'EOF'
---
title: JavaScript调试
icon: js-debug
order: 1
---

# JavaScript调试

## 调试工具
- 浏览器工具
- IDE集成
- 断点设置
- 变量监控
- 性能分析

## 调试技巧
- 代码检查
- 错误追踪
- 性能优化
- 内存分析
- 网络监控

## 常见问题
- 语法错误
- 逻辑错误
- 异步问题
- 内存泄漏
- 性能问题

## 最佳实践
- 调试策略
- 工具使用
- 问题定位
- 性能优化
- 代码规范
EOF

# 创建4.2变量与基本运算文件
cat > "$BASE_DIR/第4章-JavaScript必备知识回顾/4.2-变量与基本运算.md" << 'EOF'
---
title: 变量与基本运算
icon: js-basics
order: 2
---

# 变量与基本运算

## 变量声明
- var/let/const
- 作用域
- 变量提升
- 数据类型
- 类型转换

## 基本运算
- 算术运算
- 比较运算
- 逻辑运算
- 位运算
- 运算符优先级

## 数据类型
- 基本类型
- 引用类型
- 类型判断
- 类型转换
- 深浅拷贝

## 最佳实践
- 命名规范
- 类型使用
- 性能优化
- 代码规范
- 调试技巧
EOF

# 创建4.3判断循环与函数文件
cat > "$BASE_DIR/第4章-JavaScript必备知识回顾/4.3-判断循环与函数.md" << 'EOF'
---
title: 判断循环与函数
icon: js-control
order: 3
---

# 判断循环与函数

## 条件判断
- if语句
- switch语句
- 三元运算符
- 短路运算
- 条件优化

## 循环结构
- for循环
- while循环
- do-while循环
- for...in
- for...of

## 函数使用
- 函数声明
- 函数表达式
- 箭头函数
- 参数处理
- 返回值

## 最佳实践
- 代码组织
- 性能优化
- 错误处理
- 调试技巧
- 代码规范
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第5章目录
mkdir -p "$BASE_DIR/第5章-WebRTC设备管理"

# 创建第5章README文件
cat > "$BASE_DIR/第5章-WebRTC设备管理/README.md" << 'EOF'
---
title: WebRTC设备管理
icon: device-management
order: 5
---

# WebRTC设备管理

本章介绍如何在WebRTC中管理和使用音视频设备。
EOF

# 创建5.1获取音视频设备文件
cat > "$BASE_DIR/第5章-WebRTC设备管理/5.1-获取音视频设备.md" << 'EOF'
---
title: 获取音视频设备
icon: device-access
order: 1
---

# 获取音视频设备

## 设备枚举
- 摄像头列表
- 麦克风列表
- 扬声器列表
- 设备信息
- 权限管理

## 设备访问
- 权限请求
- 设备选择
- 状态检测
- 错误处理
- 设备切换

## 设备控制
- 开启关闭
- 参数设置
- 状态监控
- 事件处理
- 错误恢复

## 最佳实践
- 设备管理
- 性能优化
- 兼容处理
- 调试技巧
- 用户体验
EOF

# 创建5.2在页面中显示设备文件
cat > "$BASE_DIR/第5章-WebRTC设备管理/5.2-在页面中显示设备.md" << 'EOF'
---
title: 在页面中显示设备
icon: device-display
order: 2
---

# 在页面中显示设备

## 界面实现
- 视频预览
- 音频显示
- 设备列表
- 控制面板
- 状态显示

## 交互控制
- 设备切换
- 参数调节
- 状态反馈
- 错误提示
- 用户操作

## 功能扩展
- 画面调整
- 音量控制
- 特效处理
- 录制功能
- 截图功能

## 最佳实践
- 界面设计
- 交互优化
- 性能优化
- 兼容处理
- 用户体验
EOF

# 创建第6章目录
mkdir -p "$BASE_DIR/第6章-WebRTC音视频数据采集"

# 创建第6章README文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/README.md" << 'EOF'
---
title: WebRTC音视频数据采集
icon: media-capture
order: 6
---

# WebRTC音视频数据采集

本章介绍WebRTC音视频数据采集的基础知识和实现方法。
EOF

# 创建6.1音视频数据采集基础文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.1-音视频数据采集基础.md" << 'EOF'
---
title: 音视频数据采集基础
icon: capture-basics
order: 1
---

# 音视频数据采集基础

## 基础概念
- 采集原理
- 数据格式
- 采样率
- 分辨率
- 帧率控制

## 采集流程
- 设备初始化
- 数据获取
- 格式转换
- 数据处理
- 错误处理

## 参数控制
- 质量设置
- 码率控制
- 延迟控制
- 缓冲管理
- 性能优化

## 最佳实践
- 采集策略
- 性能优化
- 质量控制
- 调试技巧
- 错误处理
EOF

# 创建6.2WebRTC_API适配文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.2-WebRTC_API适配.md" << 'EOF'
---
title: WebRTC_API适配
icon: api-adaptation
order: 2
---

# WebRTC_API适配

## API概述
- 核心接口
- 参数配置
- 事件处理
- 状态管理
- 错误处理

## 实现方法
- 接口调用
- 参数设置
- 数据处理
- 事件监听
- 错误处理

## 功能扩展
- 自定义处理
- 数据转换
- 特效处理
- 状态监控
- 调试支持

## 最佳实践
- 接口使用
- 性能优化
- 兼容处理
- 调试技巧
- 错误处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建6.3获取设备访问权限文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.3-获取设备访问权限.md" << 'EOF'
---
title: 获取设备访问权限
icon: device-permission
order: 3
---

# 获取设备访问权限

## 权限机制
- 权限类型
- 请求流程
- 权限状态
- 错误处理
- 用户交互

## 实现方法
- 权限检查
- 权限请求
- 状态处理
- 错误处理
- 用户提示

## 最佳实践
- 权限管理
- 用户体验
- 错误恢复
- 安全考虑
- 兼容处理

## 注意事项
- 浏览器差异
- 安全限制
- 用户隐私
- 错误处理
- 降级方案
EOF

# 创建6.4视频约束文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.4-视频约束.md" << 'EOF'
---
title: 视频约束
icon: video-constraints
order: 4
---

# 视频约束

## 基本约束
- 分辨率
- 帧率
- 码率
- 方向
- 质量

## 高级设置
- 自动对焦
- 白平衡
- 曝光控制
- 降噪
- HDR支持

## 约束应用
- 参数配置
- 动态调整
- 性能优化
- 质量控制
- 错误处理

## 最佳实践
- 参数选择
- 性能平衡
- 兼容处理
- 调试技巧
- 用户体验
EOF

# 创建6.5音频约束文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.5-音频约束.md" << 'EOF'
---
title: 音频约束
icon: audio-constraints
order: 5
---

# 音频约束

## 基本约束
- 采样率
- 声道数
- 音量控制
- 降噪
- 回声消除

## 高级设置
- 自动增益
- 噪声抑制
- 回声消除
- 立体声
- 音频处理

## 约束应用
- 参数配置
- 动态调整
- 性能优化
- 质量控制
- 错误处理

## 最佳实践
- 参数选择
- 性能平衡
- 兼容处理
- 调试技巧
- 用户体验
EOF

# 创建6.6视频特效文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.6-视频特效.md" << 'EOF'
---
title: 视频特效
icon: video-effects
order: 6
---

# 视频特效

## 基础特效
- 滤镜效果
- 色彩调整
- 亮度对比
- 模糊效果
- 叠加效果

## 高级特效
- 人脸识别
- 背景替换
- 动态贴纸
- 视频合成
- AR效果

## 实现方法
- Canvas处理
- WebGL应用
- 着色器编程
- 性能优化
- 实时处理

## 最佳实践
- 效果选择
- 性能优化
- 兼容处理
- 调试技巧
- 用户体验
EOF

# 创建6.7从视频中获取图片文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.7-从视频中获取图片.md" << 'EOF'
---
title: 从视频中获取图片
icon: video-capture
order: 7
---

# 从视频中获取图片

## 基本原理
- 帧捕获
- 图像格式
- 时间控制
- 质量设置
- 存储管理

## 实现方法
- Canvas绘制
- 数据转换
- 格式处理
- 质量控制
- 错误处理

## 功能扩展
- 批量截取
- 定时截图
- 图片处理
- 存储优化
- 预览功能

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 用户体验
EOF

# 创建6.8只采集音频数据文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.8-只采集音频数据.md" << 'EOF'
---
title: 只采集音频数据
icon: audio-capture
order: 8
---

# 只采集音频数据

## 采集配置
- 设备选择
- 参数设置
- 格式控制
- 质量设置
- 错误处理

## 数据处理
- 音频分析
- 数据转换
- 格式处理
- 效果处理
- 存储管理

## 功能扩展
- 音频录制
- 实时处理
- 效果添加
- 数据分析
- 可视化

## 最佳实践
- 采集策略
- 性能优化
- 内存管理
- 调试技巧
- 用户体验
EOF

# 创建6.9MediaStreamAPI及视频约束文件
cat > "$BASE_DIR/第6章-WebRTC音视频数据采集/6.9-MediaStreamAPI及视频约束.md" << 'EOF'
---
title: MediaStreamAPI及视频约束
icon: media-stream
order: 9
---

# MediaStreamAPI及视频约束

## API概述
- 接口定义
- 功能特性
- 事件系统
- 状态管理
- 错误处理

## 视频约束
- 基本约束
- 高级设置
- 动态调整
- 质量控制
- 性能优化

## 实现方法
- 接口调用
- 参数配置
- 事件处理
- 状态管理
- 错误处理

## 最佳实践
- 接口使用
- 性能优化
- 兼容处理
- 调试技巧
- 错误处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第7章目录
mkdir -p "$BASE_DIR/第7章-WebRTC音视频录制实战"

# 创建第7章README文件
cat > "$BASE_DIR/第7章-WebRTC音视频录制实战/README.md" << 'EOF'
---
title: WebRTC音视频录制实战
icon: media-recording
order: 7
---

# WebRTC音视频录制实战

本章介绍WebRTC音视频录制的基础知识和实战应用。
EOF

# 创建7.1录制基本知识文件
cat > "$BASE_DIR/第7章-WebRTC音视频录制实战/7.1-录制基本知识.md" << 'EOF'
---
title: 录制基本知识
icon: recording-basics
order: 1
---

# 录制基本知识

## 基础概念
- 录制原理
- 数据格式
- 编码标准
- 存储方式
- 质量控制

## 录制流程
- 初始化配置
- 数据采集
- 编码处理
- 存储管理
- 错误处理

## 关键技术
- 媒体格式
- 编码选择
- 同步控制
- 缓冲管理
- 性能优化

## 最佳实践
- 录制策略
- 性能优化
- 质量控制
- 调试技巧
- 错误处理
EOF

# 创建7.2录制音视频实战-1文件
cat > "$BASE_DIR/第7章-WebRTC音视频录制实战/7.2-录制音视频实战-1.md" << 'EOF'
---
title: 录制音视频实战-1
icon: recording-practice1
order: 2
---

# 录制音视频实战-1

## 环境准备
- 开发环境
- 依赖配置
- API接口
- 工具支持
- 调试环境

## 基础实现
- 录制初始化
- 数据采集
- 编码处理
- 存储管理
- 错误处理

## 核心功能
- 录制控制
- 参数设置
- 状态管理
- 事件处理
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 错误处理
EOF

# 创建7.3录制音视频实战-2文件
cat > "$BASE_DIR/第7章-WebRTC音视频录制实战/7.3-录制音视频实战-2.md" << 'EOF'
---
title: 录制音视频实战-2
icon: recording-practice2
order: 3
---

# 录制音视频实战-2

## 高级特性
- 多轨录制
- 实时预览
- 格式转换
- 质量控制
- 性能优化

## 功能扩展
- 暂停恢复
- 分段录制
- 合并处理
- 特效添加
- 后期编辑

## 性能优化
- 编码优化
- 存储优化
- 内存管理
- 并发处理
- 资源控制

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 错误处理
EOF

# 创建7.4采集屏幕数据文件
cat > "$BASE_DIR/第7章-WebRTC音视频录制实战/7.4-采集屏幕数据.md" << 'EOF'
---
title: 采集屏幕数据
icon: screen-capture
order: 4
---

# 采集屏幕数据

## 基础实现
- 权限获取
- 屏幕选择
- 数据采集
- 格式处理
- 错误处理

## 高级特性
- 区域选择
- 窗口捕获
- 多屏支持
- 性能优化
- 质量控制

## 应用场景
- 屏幕共享
- 录屏教学
- 远程协助
- 直播推流
- 演示录制

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 错误处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第8章目录
mkdir -p "$BASE_DIR/第8章-WebRTC信令服务器实现"

# 创建第8章README文件
cat > "$BASE_DIR/第8章-WebRTC信令服务器实现/README.md" << 'EOF'
---
title: WebRTC信令服务器实现
icon: signaling-server
order: 8
---

# WebRTC信令服务器实现

本章介绍WebRTC信令服务器的原理和实现方法。
EOF

# 创建8.1使用socket.io发送消息文件
cat > "$BASE_DIR/第8章-WebRTC信令服务器实现/8.1-使用socket.io发送消息.md" << 'EOF'
---
title: 使用socket.io发送消息
icon: socketio
order: 1
---

# 使用socket.io发送消息

## 基础配置
- 环境搭建
- 依赖安装
- 服务配置
- 连接管理
- 错误处理

## 消息处理
- 消息发送
- 消息接收
- 事件处理
- 广播机制
- 错误处理

## 功能实现
- 实时通信
- 房间管理
- 状态同步
- 心跳检测
- 断线重连

## 最佳实践
- 实现策略
- 性能优化
- 内存管理
- 调试技巧
- 错误处理
EOF

# 创建8.2信令服务器原理文件
cat > "$BASE_DIR/第8章-WebRTC信令服务器实现/8.2-信令服务器原理.md" << 'EOF'
---
title: 信令服务器原理
icon: signaling-theory
order: 2
---

# 信令服务器原理

## 基本概念
- 信令定义
- 工作原理
- 协议选择
- 状态管理
- 安全机制

## 核心功能
- 会话建立
- 媒体协商
- 连接管理
- 状态同步
- 错误处理

## 技术架构
- 服务模型
- 通信协议
- 数据格式
- 安全机制
- 扩展性

## 最佳实践
- 设计策略
- 性能优化
- 安全考虑
- 调试技巧
- 维护管理
EOF

# 创建8.3信令服务器实现文件
cat > "$BASE_DIR/第8章-WebRTC信令服务器实现/8.3-信令服务器实现.md" << 'EOF'
---
title: 信令服务器实现
icon: signaling-implement
order: 3
---

# 信令服务器实现

## 基础架构
- 服务框架
- 通信模块
- 会话管理
- 状态控制
- 错误处理

## 核心实现
- 连接管理
- 消息处理
- 会话控制
- 状态同步
- 安全机制

## 功能扩展
- 房间管理
- 用户管理
- 权限控制
- 监控统计
- 日志系统

## 最佳实践
- 实现策略
- 性能优化
- 安全加固
- 调试技巧
- 运维管理
EOF

# 创建8.4实现简单聊天室-1文件
cat > "$BASE_DIR/第8章-WebRTC信令服务器实现/8.4-实现简单聊天室-1.md" << 'EOF'
---
title: 实现简单聊天室-1
icon: chat-room1
order: 4
---

# 实现简单聊天室-1

## 基础架构
- 界面设计
- 通信模块
- 消息处理
- 用户管理
- 状态控制

## 核心功能
- 用户登录
- 消息发送
- 消息接收
- 在线状态
- 错误处理

## 实现细节
- 界面交互
- 数据处理
- 状态管理
- 事件处理
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 错误处理
EOF

# 创建8.5实现简单聊天室-2文件
cat > "$BASE_DIR/第8章-WebRTC信令服务器实现/8.5-实现简单聊天室-2.md" << 'EOF'
---
title: 实现简单聊天室-2
icon: chat-room2
order: 5
---

# 实现简单聊天室-2

## 高级功能
- 群组聊天
- 私聊功能
- 文件传输
- 在线状态
- 历史记录

## 功能优化
- 消息队列
- 离线消息
- 消息推送
- 状态同步
- 性能优化

## 扩展特性
- 表情支持
- 图片分享
- 语音消息
- 在线状态
- 用户设置

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 错误处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第9章目录
mkdir -p "$BASE_DIR/第9章-WebRTC网络基础补充"

# 创建第9章README文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/README.md" << 'EOF'
---
title: WebRTC网络基础补充
icon: network-basics
order: 9
---

# WebRTC网络基础补充

本章介绍WebRTC网络传输的基础知识和关键技术。
EOF

# 创建9.1WebRTC网络传输基础文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.1-WebRTC网络传输基础.md" << 'EOF'
---
title: WebRTC网络传输基础
icon: network-transport
order: 1
---

# WebRTC网络传输基础

## 基本概念
- 传输协议
- 网络模型
- 连接建立
- 数据传输
- 安全机制

## 传输机制
- UDP传输
- TCP传输
- SCTP传输
- 混合传输
- 可靠性保证

## 网络优化
- 带宽控制
- 拥塞控制
- 丢包处理
- 延迟控制
- QoS保证

## 最佳实践
- 传输策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF

# 创建9.2NAT打洞原理文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.2-NAT打洞原理.md" << 'EOF'
---
title: NAT打洞原理
icon: nat-traversal
order: 2
---

# NAT打洞原理

## 基本原理
- NAT类型
- 打洞机制
- 连接建立
- 会话维护
- 错误处理

## 实现方法
- UDP打洞
- TCP打洞
- ICE框架
- 穿透策略
- 失败处理

## 关键技术
- 地址映射
- 会话保持
- 超时处理
- 重传机制
- 安全考虑

## 最佳实践
- 实现策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF

# 创建9.3NAT类型检测文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.3-NAT类型检测.md" << 'EOF'
---
title: NAT类型检测
icon: nat-detection
order: 3
---

# NAT类型检测

## 检测原理
- 类型分类
- 检测方法
- 判断标准
- 结果处理
- 错误处理

## 实现方法
- STUN检测
- 行为分析
- 结果验证
- 超时处理
- 错误恢复

## 应用场景
- P2P通信
- 实时音视频
- 游戏联网
- 即时通讯
- 远程控制

## 最佳实践
- 检测策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建9.4STUN协议一文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.4-STUN协议一.md" << 'EOF'
---
title: STUN协议一
icon: stun-protocol1
order: 4
---

# STUN协议一

## 协议基础
- 协议定义
- 消息格式
- 属性类型
- 传输机制
- 安全机制

## 核心功能
- 地址探测
- 绑定请求
- 响应处理
- 错误处理
- 超时机制

## 实现细节
- 消息编解码
- 事务处理
- 认证机制
- 完整性检查
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF

# 创建9.5STUN协议二文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.5-STUN协议二.md" << 'EOF'
---
title: STUN协议二
icon: stun-protocol2
order: 5
---

# STUN协议二

## 高级特性
- 扩展属性
- 安全机制
- 传输控制
- 会话管理
- 错误处理

## 应用场景
- NAT穿透
- 地址探测
- 连接维护
- 会话保持
- 故障恢复

## 性能优化
- 消息处理
- 并发控制
- 资源管理
- 超时处理
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF

# 创建9.6TURN协议文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.6-TURN协议.md" << 'EOF'
---
title: TURN协议
icon: turn-protocol
order: 6
---

# TURN协议

## 协议基础
- 协议定义
- 消息格式
- 传输机制
- 中继原理
- 安全机制

## 核心功能
- 中继传输
- 带宽控制
- 会话管理
- 认证授权
- 错误处理

## 应用场景
- 音视频通信
- 数据传输
- 实时通信
- 故障转移
- 负载均衡

## 最佳实践
- 实现策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建9.7ICE框架文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.7-ICE框架.md" << 'EOF'
---
title: ICE框架
icon: ice-framework
order: 7
---

# ICE框架

## 基础架构
- 框架组成
- 工作原理
- 协议支持
- 连接管理
- 状态控制

## 核心功能
- 候选收集
- 连接检查
- 优先级处理
- 连接维护
- 故障恢复

## 实现细节
- STUN集成
- TURN集成
- 连接建立
- 数据传输
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF

# 创建9.8网络分析方法-tcpdump与wireshark文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.8-网络分析方法-tcpdump与wireshark.md" << 'EOF'
---
title: 网络分析方法-tcpdump与wireshark
icon: network-analysis
order: 8
---

# 网络分析方法-tcpdump与wireshark

## 工具介绍
- tcpdump基础
- wireshark基础
- 功能特点
- 使用场景
- 工具配置

## 抓包分析
- 数据捕获
- 过滤规则
- 协议分析
- 问题定位
- 性能分析

## 实战应用
- 流量分析
- 协议调试
- 性能优化
- 故障排查
- 安全分析

## 最佳实践
- 分析策略
- 工具使用
- 问题定位
- 调试技巧
- 性能优化
EOF

# 创建9.9网络分析实战-1文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.9-网络分析实战-1.md" << 'EOF'
---
title: 网络分析实战-1
icon: network-practice1
order: 9
---

# 网络分析实战-1

## 环境准备
- 工具安装
- 环境配置
- 测试场景
- 数据采集
- 分析准备

## 分析方法
- 数据捕获
- 协议分析
- 性能评估
- 问题定位
- 优化建议

## 实战案例
- 连接问题
- 性能问题
- 协议问题
- 安全问题
- 优化方案

## 最佳实践
- 分析策略
- 工具使用
- 问题定位
- 调试技巧
- 性能优化
EOF

# 创建9.10网络分析实战-2文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.10-网络分析实战-2.md" << 'EOF'
---
title: 网络分析实战-2
icon: network-practice2
order: 10
---

# 网络分析实战-2

## 高级分析
- 深度分析
- 性能优化
- 安全评估
- 故障诊断
- 优化方案

## 复杂场景
- 多协议分析
- 加密流量
- 性能瓶颈
- 安全威胁
- 优化策略

## 问题解决
- 故障排查
- 性能调优
- 安全加固
- 方案实施
- 效果验证

## 最佳实践
- 分析方法
- 工具使用
- 问题处理
- 优化技巧
- 持续改进
EOF

# 创建9.11搭建TURN服务文件
cat > "$BASE_DIR/第9章-WebRTC网络基础补充/9.11-搭建TURN服务.md" << 'EOF'
---
title: 搭建TURN服务
icon: turn-server
order: 11
---

# 搭建TURN服务

## 环境准备
- 服务器选择
- 系统配置
- 依赖安装
- 网络设置
- 安全配置

## 服务配置
- 基本配置
- 高级设置
- 性能优化
- 安全加固
- 监控管理

## 部署运维
- 服务部署
- 性能监控
- 日志管理
- 故障处理
- 维护更新

## 最佳实践
- 部署策略
- 性能优化
- 安全考虑
- 运维管理
- 问题处理
EOF

# 创建第10章目录
mkdir -p "$BASE_DIR/第10章-端对端1V1传输基本流程"

# 创建第10章README文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/README.md" << 'EOF'
---
title: 端对端1V1传输基本流程
icon: p2p-transmission
order: 10
---

# 端对端1V1传输基本流程

本章介绍WebRTC端对端1V1传输的基本流程和实现方法。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建10.1媒体能力协商过程一文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/10.1-媒体能力协商过程一.md" << 'EOF'
---
title: 媒体能力协商过程一
icon: media-negotiation1
order: 1
---

# 媒体能力协商过程一

## 基本概念
- SDP协议
- 媒体描述
- 编解码能力
- 传输参数
- 安全机制

## 协商流程
- 能力收集
- 参数匹配
- 优先级处理
- 结果确认
- 错误处理

## 实现细节
- SDP生成
- 参数解析
- 能力匹配
- 状态管理
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建10.2媒体能力协商过程二文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/10.2-媒体能力协商过程二.md" << 'EOF'
---
title: 媒体能力协商过程二
icon: media-negotiation2
order: 2
---

# 媒体能力协商过程二

## 高级特性
- 复杂场景
- 多流处理
- 动态调整
- 重协商
- 错误恢复

## 实现方法
- 参数配置
- 状态管理
- 事件处理
- 错误处理
- 性能优化

## 应用场景
- 音视频通话
- 屏幕共享
- 文件传输
- 数据通道
- 混合传输

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建10.3-1V1连接基本流程文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/10.3-1V1连接基本流程.md" << 'EOF'
---
title: 1V1连接基本流程
icon: p2p-connection
order: 3
---

# 1V1连接基本流程

## 连接建立
- ICE配置
- 候选收集
- 连接检查
- 状态管理
- 错误处理

## 数据传输
- 媒体流处理
- 数据通道
- 流控制
- 质量保证
- 错误恢复

## 连接管理
- 状态监控
- 重连机制
- 资源释放
- 会话维护
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建10.4本机内1V1音视频互通-1文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/10.4-本机内1V1音视频互通-1.md" << 'EOF'
---
title: 本机内1V1音视频互通-1
icon: local-p2p1
order: 4
---

# 本机内1V1音视频互通-1

## 基础配置
- 环境准备
- 设备配置
- 连接设置
- 参数调整
- 错误处理

## 实现流程
- 设备获取
- 媒体处理
- 连接建立
- 数据传输
- 状态管理

## 功能测试
- 音频测试
- 视频测试
- 连接测试
- 性能测试
- 稳定性测试

## 最佳实践
- 实现策略
- 性能优化
- 调试技巧
- 问题处理
- 用户体验
EOF

# 创建10.5本机内1V1音视频互通-2文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/10.5-本机内1V1音视频互通-2.md" << 'EOF'
---
title: 本机内1V1音视频互通-2
icon: local-p2p2
order: 5
---

# 本机内1V1音视频互通-2

## 高级功能
- 质量控制
- 特效处理
- 录制功能
- 截图功能
- 统计分析

## 性能优化
- 资源管理
- 带宽控制
- 延迟优化
- 质量保证
- 故障恢复

## 调试分析
- 状态监控
- 数据统计
- 问题定位
- 性能分析
- 优化建议

## 最佳实践
- 实现策略
- 性能优化
- 调试技巧
- 问题处理
- 用户体验
EOF

# 创建10.6获取offer/answer的SDP文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/10.6-获取offer_answer的SDP.md" << 'EOF'
---
title: 获取offer/answer的SDP
icon: sdp-exchange
order: 6
---

# 获取offer/answer的SDP

## SDP生成
- Offer生成
- Answer生成
- 参数配置
- 格式处理
- 错误处理

## 数据处理
- SDP解析
- 参数提取
- 能力匹配
- 状态管理
- 错误处理

## 应用场景
- 音视频通话
- 屏幕共享
- 数据通道
- 混合传输
- 特殊需求

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建10.7WebRTC媒体协商过程文件
cat > "$BASE_DIR/第10章-端对端1V1传输基本流程/10.7-WebRTC媒体协商过程.md" << 'EOF'
---
title: WebRTC媒体协商过程
icon: media-negotiation
order: 7
---

# WebRTC媒体协商过程

## 协商流程
- 初始化准备
- 能力收集
- 参数协商
- 连接建立
- 状态管理

## 实现细节
- SDP处理
- 参数配置
- 状态控制
- 错误处理
- 优化策略

## 应用场景
- 基本通话
- 多媒体会议
- 屏幕共享
- 文件传输
- 混合应用

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第11章目录
mkdir -p "$BASE_DIR/第11章-WebRTC核心之SDP详解"

# 创建第11章README文件
cat > "$BASE_DIR/第11章-WebRTC核心之SDP详解/README.md" << 'EOF'
---
title: WebRTC核心之SDP详解
icon: sdp-core
order: 11
---

# WebRTC核心之SDP详解

本章深入介绍WebRTC中SDP协议的核心概念和实现细节。
EOF

# 创建11.1SDP规范文件
cat > "$BASE_DIR/第11章-WebRTC核心之SDP详解/11.1-SDP规范.md" << 'EOF'
---
title: SDP规范
icon: sdp-spec
order: 1
---

# SDP规范

## 基本概念
- 协议定义
- 语法规则
- 属性类型
- 格式要求
- 扩展机制

## 协议结构
- 会话描述
- 媒体描述
- 时间描述
- 属性描述
- 带宽描述

## 关键字段
- 版本信息
- 会话信息
- 连接信息
- 媒体信息
- 属性信息

## 最佳实践
- 规范使用
- 兼容处理
- 扩展应用
- 调试技巧
- 问题处理
EOF

# 创建11.2WebRTC中的SDP文件
cat > "$BASE_DIR/第11章-WebRTC核心之SDP详解/11.2-WebRTC中的SDP.md" << 'EOF'
---
title: WebRTC中的SDP
icon: webrtc-sdp
order: 2
---

# WebRTC中的SDP

## 应用特点
- WebRTC扩展
- 特殊属性
- 媒体能力
- 安全机制
- 传输控制

## 实现细节
- SDP生成
- 参数配置
- 能力协商
- 状态管理
- 错误处理

## 关键属性
- ICE相关
- 编解码器
- 传输参数
- 安全参数
- 扩展属性

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建11.3Offer_AnswerSDP详解文件
cat > "$BASE_DIR/第11章-WebRTC核心之SDP详解/11.3-Offer_AnswerSDP详解.md" << 'EOF'
---
title: Offer_AnswerSDP详解
icon: sdp-exchange
order: 3
---

# Offer_AnswerSDP详解

## 基本流程
- Offer生成
- Answer生成
- 参数协商
- 状态管理
- 错误处理

## 关键字段
- 媒体描述
- 编码参数
- 传输参数
- ICE信息
- 安全参数

## 协商过程
- 能力收集
- 参数匹配
- 优先级处理
- 结果确认
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建11.4SDP协议的作用文件
cat > "$BASE_DIR/第11章-WebRTC核心之SDP详解/11.4-SDP协议的作用.md" << 'EOF'
---
title: SDP协议的作用
icon: sdp-role
order: 4
---

# SDP协议的作用

## 核心功能
- 媒体描述
- 能力协商
- 参数配置
- 会话控制
- 安全机制

## 应用场景
- 音视频通话
- 屏幕共享
- 数据传输
- 混合应用
- 特殊需求

## 实现价值
- 标准化描述
- 灵活扩展
- 互操作性
- 安全保障
- 性能优化

## 最佳实践
- 应用策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第12章目录
mkdir -p "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统"

# 创建第12章README文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/README.md" << 'EOF'
---
title: 实现1V1音视频实时互动直播系统
icon: live-streaming
order: 12
---

# 实现1V1音视频实时互动直播系统

本章介绍如何实现一个完整的1V1音视频实时互动直播系统。
EOF

# 创建12.1STUN_TURN服务器搭建文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.1-STUN_TURN服务器搭建.md" << 'EOF'
---
title: STUN_TURN服务器搭建
icon: stun-turn-setup
order: 1
---

# STUN_TURN服务器搭建

## 环境准备
- 服务器选择
- 系统配置
- 依赖安装
- 网络设置
- 安全配置

## 服务部署
- STUN配置
- TURN配置
- 性能优化
- 监控管理
- 安全加固

## 运维管理
- 服务监控
- 日志管理
- 性能调优
- 故障处理
- 安全维护

## 最佳实践
- 部署策略
- 性能优化
- 安全考虑
- 运维管理
- 问题处理
EOF

# 创建12.2再论RTCPeerConnection文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.2-再论RTCPeerConnection.md" << 'EOF'
---
title: 再论RTCPeerConnection
icon: peer-connection
order: 2
---

# 再论RTCPeerConnection

## 深入理解
- 连接建立
- 状态管理
- 事件处理
- 数据传输
- 错误处理

## 高级特性
- ICE处理
- 媒体控制
- 数据通道
- 统计信息
- 质量监控

## 实现细节
- 配置优化
- 状态处理
- 事件监听
- 错误恢复
- 性能调优

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建12.3直播系统中的信令逻辑文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.3-直播系统中的信令逻辑.md" << 'EOF'
---
title: 直播系统中的信令逻辑
icon: signaling-logic
order: 3
---

# 直播系统中的信令逻辑

## 基本流程
- 会话建立
- 状态同步
- 媒体协商
- 连接管理
- 错误处理

## 信令设计
- 消息类型
- 状态管理
- 事件处理
- 超时处理
- 错误恢复

## 实现细节
- 协议设计
- 状态机制
- 消息处理
- 安全机制
- 性能优化

## 最佳实践
- 设计策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF

# 创建12.4实现1V1音视频互动信令服务器文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.4-实现1V1音视频互动信令服务器.md" << 'EOF'
---
title: 实现1V1音视频互动信令服务器
icon: signaling-server
order: 4
---

# 实现1V1音视频互动信令服务器

## 服务架构
- 系统设计
- 模块划分
- 接口定义
- 数据流转
- 状态管理

## 核心功能
- 连接管理
- 消息处理
- 会话控制
- 状态同步
- 错误处理

## 实现细节
- 协议实现
- 状态处理
- 事件处理
- 安全机制
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF

# 创建12.5再论CreateOffer文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.5-再论CreateOffer.md" << 'EOF'
---
title: 再论CreateOffer
icon: create-offer
order: 5
---

# 再论CreateOffer

## 深入理解
- 工作原理
- 参数配置
- 状态管理
- 错误处理
- 性能优化

## 高级特性
- 媒体约束
- 编码配置
- 传输控制
- 安全机制
- 质量保证

## 实现细节
- 参数设置
- 状态处理
- 事件监听
- 错误恢复
- 性能调优

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建12.6WebRTC客户端状态机文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.6-WebRTC客户端状态机.md" << 'EOF'
---
title: WebRTC客户端状态机
icon: state-machine
order: 6
---

# WebRTC客户端状态机

## 状态设计
- 状态定义
- 转换规则
- 事件处理
- 错误处理
- 状态恢复

## 实现机制
- 状态管理
- 事件驱动
- 异常处理
- 日志记录
- 监控统计

## 应用场景
- 连接管理
- 会话控制
- 媒体处理
- 数据传输
- 错误恢复

## 最佳实践
- 设计策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.7WebRTC客户端实现-基本结构文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.7-WebRTC客户端实现-基本结构.md" << 'EOF'
---
title: WebRTC客户端实现-基本结构
icon: client-structure
order: 7
---

# WebRTC客户端实现-基本结构

## 架构设计
- 模块划分
- 接口定义
- 状态管理
- 事件系统
- 错误处理

## 核心组件
- 连接管理
- 媒体控制
- 数据通道
- 信令处理
- 状态监控

## 实现细节
- 初始化流程
- 事件处理
- 状态同步
- 错误恢复
- 资源管理

## 最佳实践
- 设计策略
- 性能优化
- 代码组织
- 调试技巧
- 问题处理
EOF

# 创建12.8WebRTC客户端实现-增加PeerConnection逻辑-1文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.8-WebRTC客户端实现-增加PeerConnection逻辑-1.md" << 'EOF'
---
title: WebRTC客户端实现-增加PeerConnection逻辑-1
icon: peer-connection1
order: 8
---

# WebRTC客户端实现-增加PeerConnection逻辑-1

## 基础实现
- 连接创建
- 配置设置
- 事件绑定
- 状态管理
- 错误处理

## 核心功能
- ICE处理
- 候选收集
- 连接建立
- 状态监控
- 错误恢复

## 实现细节
- 参数配置
- 事件处理
- 状态同步
- 资源管理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 代码组织
- 调试技巧
- 问题处理
EOF

# 创建12.9WebRTC客户端实现-增加PeerConnection逻辑-2文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.9-WebRTC客户端实现-增加PeerConnection逻辑-2.md" << 'EOF'
---
title: WebRTC客户端实现-增加PeerConnection逻辑-2
icon: peer-connection2
order: 9
---

# WebRTC客户端实现-增加PeerConnection逻辑-2

## 高级功能
- 重连机制
- 质量监控
- 统计分析
- 故障恢复
- 性能优化

## 扩展实现
- 多流处理
- 带宽控制
- 编码适配
- 安全机制
- 日志系统

## 优化细节
- 性能调优
- 内存管理
- 资源控制
- 错误处理
- 状态同步

## 最佳实践
- 实现策略
- 性能优化
- 代码组织
- 调试技巧
- 问题处理
EOF

# 创建12.10WebRTC客户端实现-增加媒体协商逻辑-3文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.10-WebRTC客户端实现-增加媒体协商逻辑-3.md" << 'EOF'
---
title: WebRTC客户端实现-增加媒体协商逻辑-3
icon: media-negotiation
order: 10
---

# WebRTC客户端实现-增加媒体协商逻辑-3

## 协商实现
- Offer创建
- Answer处理
- SDP处理
- 状态管理
- 错误处理

## 功能扩展
- 重协商
- 编码适配
- 质量控制
- 带宽管理
- 统计分析

## 优化细节
- 性能调优
- 资源管理
- 状态同步
- 错误恢复
- 日志记录

## 最佳实践
- 实现策略
- 性能优化
- 代码组织
- 调试技巧
- 问题处理
EOF

# 创建12.11实现共享远程桌面文件
cat > "$BASE_DIR/第12章-实现1V1音视频实时互动直播系统/12.11-实现共享远程桌面.md" << 'EOF'
---
title: 实现共享远程桌面
icon: screen-share
order: 11
---

# 实现共享远程桌面

## 基础实现
- 屏幕采集
- 数据传输
- 画面显示
- 控制管理
- 错误处理

## 功能扩展
- 区域选择
- 质量控制
- 帧率控制
- 权限管理
- 交互控制

## 优化细节
- 性能优化
- 带宽控制
- 延迟处理
- 画质调整
- 资源管理

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 问题处理
EOF

# 创建第13章目录
mkdir -p "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计"

# 创建第13章README文件
cat > "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计/README.md" << 'EOF'
---
title: WebRTC核心之RTP媒体控制与数据统计
icon: rtp-control
order: 13
---

# WebRTC核心之RTP媒体控制与数据统计

本章介绍WebRTC中RTP媒体控制和数据统计的核心概念和实现方法。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建13.1RTPReceiver发送器文件
cat > "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计/13.1-RTPReceiver发送器.md" << 'EOF'
---
title: RTPReceiver发送器
icon: rtp-receiver
order: 1
---

# RTPReceiver发送器

## 基本原理
- 接收机制
- 数据处理
- 缓冲控制
- 丢包处理
- 错误恢复

## 核心功能
- 数据接收
- 包重组
- 解码处理
- 时序控制
- 质量监控

## 实现细节
- 参数配置
- 状态管理
- 事件处理
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建13.2RTPSender发送器文件
cat > "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计/13.2-RTPSender发送器.md" << 'EOF'
---
title: RTPSender发送器
icon: rtp-sender
order: 2
---

# RTPSender发送器

## 基本原理
- 发送机制
- 数据封装
- 流控制
- 拥塞控制
- 错误处理

## 核心功能
- 数据发送
- 包分片
- 编码处理
- 速率控制
- 质量保证

## 实现细节
- 参数配置
- 状态管理
- 事件处理
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建13.3传输速率控制-1文件
cat > "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计/13.3-传输速率控制-1.md" << 'EOF'
---
title: 传输速率控制-1
icon: rate-control1
order: 3
---

# 传输速率控制-1

## 基本原理
- 速率模型
- 控制算法
- 反馈机制
- 调整策略
- 优化方法

## 核心功能
- 带宽估计
- 拥塞控制
- 速率调整
- 质量保证
- 状态监控

## 实现细节
- 参数配置
- 算法实现
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 控制策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建13.4传输速率控制-2文件
cat > "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计/13.4-传输速率控制-2.md" << 'EOF'
---
title: 传输速率控制-2
icon: rate-control2
order: 4
---

# 传输速率控制-2

## 高级特性
- 自适应控制
- 多流控制
- QoS保证
- 动态调整
- 优化策略

## 扩展功能
- 智能控制
- 预测模型
- 质量评估
- 性能监控
- 故障恢复

## 优化方法
- 算法优化
- 参数调优
- 资源控制
- 延迟优化
- 质量保证

## 最佳实践
- 控制策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建13.5WebRTC统计信息-1文件
cat > "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计/13.5-WebRTC统计信息-1.md" << 'EOF'
---
title: WebRTC统计信息-1
icon: webrtc-stats1
order: 5
---

# WebRTC统计信息-1

## 基础指标
- 连接状态
- 传输质量
- 媒体质量
- 网络状况
- 系统资源

## 数据采集
- 指标收集
- 数据处理
- 存储管理
- 分析方法
- 展示方式

## 实现细节
- 接口调用
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 采集策略
- 分析方法
- 展示技巧
- 调试方法
- 问题处理
EOF

# 创建13.6WebRTC统计信息-2文件
cat > "$BASE_DIR/第13章-WebRTC核心之RTP媒体控制与数据统计/13.6-WebRTC统计信息-2.md" << 'EOF'
---
title: WebRTC统计信息-2
icon: webrtc-stats2
order: 6
---

# WebRTC统计信息-2

## 高级分析
- 性能分析
- 质量评估
- 故障诊断
- 趋势预测
- 优化建议

## 应用场景
- 质量监控
- 故障排查
- 性能优化
- 用户体验
- 运维管理

## 扩展功能
- 自动分析
- 告警系统
- 报表生成
- 可视化
- 决策支持

## 最佳实践
- 分析策略
- 展示方法
- 应用技巧
- 调试方法
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第14章目录
mkdir -p "$BASE_DIR/第14章-WebRTC非音视频数据传输"

# 创建第14章README文件
cat > "$BASE_DIR/第14章-WebRTC非音视频数据传输/README.md" << 'EOF'
---
title: WebRTC非音视频数据传输
icon: data-transfer
order: 14
---

# WebRTC非音视频数据传输

本章介绍WebRTC中非音视频数据的传输机制和应用场景。
EOF

# 创建14.1非音视频数据传输基础文件
cat > "$BASE_DIR/第14章-WebRTC非音视频数据传输/14.1-非音视频数据传输基础.md" << 'EOF'
---
title: 非音视频数据传输基础
icon: data-basics
order: 1
---

# 非音视频数据传输基础

## 基本概念
- 数据通道
- 传输模式
- 协议选择
- 安全机制
- 错误处理

## 核心功能
- 通道建立
- 数据发送
- 数据接收
- 流控制
- 状态管理

## 实现细节
- 参数配置
- 事件处理
- 错误处理
- 性能优化
- 资源管理

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建14.2端到端文本聊天文件
cat > "$BASE_DIR/第14章-WebRTC非音视频数据传输/14.2-端到端文本聊天.md" << 'EOF'
---
title: 端到端文本聊天
icon: text-chat
order: 2
---

# 端到端文本聊天

## 基础实现
- 连接建立
- 消息发送
- 消息接收
- 状态管理
- 错误处理

## 功能特性
- 实时通信
- 消息格式
- 状态同步
- 离线处理
- 历史记录

## 优化细节
- 性能优化
- 延迟控制
- 资源管理
- 安全机制
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 问题处理
EOF

# 创建14.3文件实时传输文件
cat > "$BASE_DIR/第14章-WebRTC非音视频数据传输/14.3-文件实时传输.md" << 'EOF'
---
title: 文件实时传输
icon: file-transfer
order: 3
---

# 文件实时传输

## 基础实现
- 文件读取
- 数据分片
- 传输控制
- 进度管理
- 错误处理

## 功能特性
- 断点续传
- 并发传输
- 压缩处理
- 校验机制
- 安全控制

## 优化细节
- 性能优化
- 带宽控制
- 内存管理
- 进度显示
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 问题处理
EOF

# 创建第15章目录
mkdir -p "$BASE_DIR/第15章-WebRTC实时数据传输网络协议详解"

# 创建第15章README文件
cat > "$BASE_DIR/第15章-WebRTC实时数据传输网络协议详解/README.md" << 'EOF'
---
title: WebRTC实时数据传输网络协议详解
icon: network-protocol
order: 15
---

# WebRTC实时数据传输网络协议详解

本章深入介绍WebRTC实时数据传输的网络协议细节。
EOF

# 创建15.1RTP-SRTP协议头讲解文件
cat > "$BASE_DIR/第15章-WebRTC实时数据传输网络协议详解/15.1-RTP-SRTP协议头讲解.md" << 'EOF'
---
title: RTP-SRTP协议头讲解
icon: rtp-protocol
order: 1
---

# RTP-SRTP协议头讲解

## 协议结构
- 头部格式
- 字段定义
- 扩展机制
- 安全特性
- 版本控制

## 核心功能
- 数据封装
- 时序控制
- 安全保护
- 状态管理
- 错误处理

## 实现细节
- 头部解析
- 数据处理
- 安全机制
- 状态同步
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 安全考虑
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建15.2RTCP中的SR与RR报文文件
cat > "$BASE_DIR/第15章-WebRTC实时数据传输网络协议详解/15.2-RTCP中的SR与RR报文.md" << 'EOF'
---
title: RTCP中的SR与RR报文
icon: rtcp-packets
order: 2
---

# RTCP中的SR与RR报文

## 报文结构
- SR报文格式
- RR报文格式
- 字段定义
- 扩展机制
- 版本控制

## 功能特性
- 发送统计
- 接收统计
- 质量监控
- 状态反馈
- 性能评估

## 实现细节
- 报文解析
- 数据处理
- 统计计算
- 状态更新
- 错误处理

## 最佳实践
- 实现策略
- 性能优化
- 分析方法
- 调试技巧
- 问题处理
EOF

# 创建15.3DTLS协议文件
cat > "$BASE_DIR/第15章-WebRTC实时数据传输网络协议详解/15.3-DTLS协议.md" << 'EOF'
---
title: DTLS协议
icon: dtls-protocol
order: 3
---

# DTLS协议

## 协议基础
- 协议定义
- 工作原理
- 安全机制
- 握手过程
- 数据传输

## 核心功能
- 身份认证
- 密钥交换
- 数据加密
- 完整性保护
- 重传机制

## 实现细节
- 协议实现
- 状态管理
- 安全控制
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 安全加固
- 调试技巧
- 问题处理
EOF

# 创建15.4Wireshark分析RTP-RTCP包文件
cat > "$BASE_DIR/第15章-WebRTC实时数据传输网络协议详解/15.4-Wireshark分析RTP-RTCP包.md" << 'EOF'
---
title: Wireshark分析RTP-RTCP包
icon: packet-analysis
order: 4
---

# Wireshark分析RTP-RTCP包

## 分析基础
- 工具配置
- 过滤规则
- 数据捕获
- 包解析
- 统计分析

## 分析方法
- RTP分析
- RTCP分析
- 统计信息
- 问题定位
- 性能评估

## 实战技巧
- 抓包技巧
- 分析方法
- 问题诊断
- 性能优化
- 调试方法

## 最佳实践
- 分析策略
- 工具使用
- 问题定位
- 调试技巧
- 优化建议
EOF

# 创建15.5DTLS与SRTP关系文件
cat > "$BASE_DIR/第15章-WebRTC实时数据传输网络协议详解/15.5-DTLS与SRTP关系.md" << 'EOF'
---
title: DTLS与SRTP关系
icon: dtls-srtp
order: 5
---

# DTLS与SRTP关系

## 基本概念
- 协议关系
- 工作原理
- 安全机制
- 密钥管理
- 协议交互

## 核心功能
- 密钥协商
- 安全传输
- 身份认证
- 数据保护
- 会话管理

## 实现细节
- 协议实现
- 状态管理
- 安全控制
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 安全加固
- 性能优化
- 调试技巧
- 问题处理
EOF

# 创建第16章目录
mkdir -p "$BASE_DIR/第16章-Android端与浏览器互通"

# 创建第16章README文件
cat > "$BASE_DIR/第16章-Android端与浏览器互通/README.md" << 'EOF'
---
title: Android端与浏览器互通
icon: android-browser
order: 16
---

# Android端与浏览器互通

本章介绍Android端与浏览器之间的WebRTC互通实现。
EOF

# 创建16.1Android与浏览器互通基础文件
cat > "$BASE_DIR/第16章-Android端与浏览器互通/16.1-Android与浏览器互通基础.md" << 'EOF'
---
title: Android与浏览器互通基础
icon: android-basics
order: 1
---

# Android与浏览器互通基础

## 基础架构
- 系统架构
- 通信模型
- 协议支持
- 接口定义
- 兼容处理

## 核心功能
- 连接建立
- 媒体传输
- 数据通道
- 状态同步
- 错误处理

## 实现细节
- 接口实现
- 状态管理
- 事件处理
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 兼容处理
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建16.2WebRTC Native开发逻辑文件
cat > "$BASE_DIR/第16章-Android端与浏览器互通/16.2-WebRTC_Native开发逻辑.md" << 'EOF'
---
title: WebRTC Native开发逻辑
icon: native-dev
order: 2
---

# WebRTC Native开发逻辑

## 基础架构
- Native API
- 开发模型
- 线程管理
- 内存管理
- 性能优化

## 核心功能
- 媒体处理
- 连接管理
- 数据传输
- 状态控制
- 错误处理

## 实现细节
- API调用
- 线程同步
- 资源管理
- 状态维护
- 性能调优

## 最佳实践
- 开发策略
- 性能优化
- 内存管理
- 调试技巧
- 问题处理
EOF

# 创建16.3权限申请与界面布局文件
cat > "$BASE_DIR/第16章-Android端与浏览器互通/16.3-权限申请与界面布局.md" << 'EOF'
---
title: 权限申请与界面布局
icon: permissions-ui
order: 3
---

# 权限申请与界面布局

## 权限管理
- 权限类型
- 申请流程
- 运行时权限
- 权限检查
- 错误处理

## 界面设计
- 布局结构
- 控件设计
- 交互逻辑
- 适配处理
- 性能优化

## 实现细节
- 权限实现
- 布局实现
- 事件处理
- 状态管理
- 错误处理

## 最佳实践
- 实现策略
- 用户体验
- 性能优化
- 调试技巧
- 问题处理
EOF

# 创建16.4通过socket.io实现信令收发文件
cat > "$BASE_DIR/第16章-Android端与浏览器互通/16.4-通过socket.io实现信令收发.md" << 'EOF'
---
title: 通过socket.io实现信令收发
icon: socketio-signaling
order: 4
---

# 通过socket.io实现信令收发

## 基础配置
- 环境搭建
- 依赖配置
- 连接管理
- 事件处理
- 错误处理

## 核心功能
- 连接建立
- 消息发送
- 消息接收
- 状态管理
- 错误恢复

## 实现细节
- 接口实现
- 事件处理
- 状态同步
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建16.5Android与浏览器互通实战文件
cat > "$BASE_DIR/第16章-Android端与浏览器互通/16.5-Android与浏览器互通实战.md" << 'EOF'
---
title: Android与浏览器互通实战
icon: android-practice
order: 5
---

# Android与浏览器互通实战

## 实战准备
- 环境配置
- 架构设计
- 接口定义
- 测试方案
- 调试工具

## 核心实现
- 连接建立
- 媒体处理
- 数据传输
- 状态管理
- 错误处理

## 功能优化
- 性能优化
- 质量控制
- 资源管理
- 兼容处理
- 错误恢复

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 问题处理
EOF

# 创建第17章目录
mkdir -p "$BASE_DIR/第17章-iOS端与浏览器互通"

# 创建第17章README文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/README.md" << 'EOF'
---
title: iOS端与浏览器互通
icon: ios-browser
order: 17
---

# iOS端与浏览器互通

本章介绍iOS端与浏览器之间的WebRTC互通实现。
EOF

# 创建17.1iOS权限获取文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.1-iOS权限获取.md" << 'EOF'
---
title: iOS权限获取
icon: ios-permissions
order: 1
---

# iOS权限获取

## 权限类型
- 摄像头权限
- 麦克风权限
- 网络权限
- 存储权限
- 隐私设置

## 申请流程
- 权限检查
- 申请时机
- 用户提示
- 结果处理
- 错误处理

## 实现细节
- 权限实现
- 状态管理
- 事件处理
- 错误处理
- 用户体验

## 最佳实践
- 实现策略
- 用户体验
- 安全考虑
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建17.2引入WebRTC库文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.2-引入WebRTC库.md" << 'EOF'
---
title: 引入WebRTC库
icon: webrtc-lib
order: 2
---

# 引入WebRTC库

## 环境配置
- 依赖管理
- 库引入方式
- 版本选择
- 配置优化
- 兼容处理

## 基础设置
- 初始化配置
- 参数设置
- 线程管理
- 内存管理
- 错误处理

## 功能验证
- 基础测试
- 功能验证
- 性能测试
- 兼容性测试
- 问题排查

## 最佳实践
- 配置策略
- 性能优化
- 内存管理
- 调试技巧
- 问题处理
EOF

# 创建17.3iOS端SocketIO使用文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.3-iOS端SocketIO使用.md" << 'EOF'
---
title: iOS端SocketIO使用
icon: ios-socketio
order: 3
---

# iOS端SocketIO使用

## 基础配置
- 环境搭建
- 依赖配置
- 初始化设置
- 连接管理
- 错误处理

## 核心功能
- 连接建立
- 消息发送
- 消息接收
- 状态管理
- 错误恢复

## 实现细节
- 接口实现
- 事件处理
- 状态同步
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建17.4iOS界面布局文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.4-iOS界面布局.md" << 'EOF'
---
title: iOS界面布局
icon: ios-layout
order: 4
---

# iOS界面布局

## 布局设计
- 界面结构
- 控件布局
- 自适应设计
- 交互逻辑
- 性能优化

## 核心组件
- 视频视图
- 控制按钮
- 状态显示
- 交互控件
- 提示信息

## 实现细节
- 布局实现
- 事件处理
- 状态管理
- 动画效果
- 性能优化

## 最佳实践
- 设计策略
- 用户体验
- 性能优化
- 调试技巧
- 问题处理
EOF

# 创建17.5iOS本地视频采集与展示文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.5-iOS本地视频采集与展示.md" << 'EOF'
---
title: iOS本地视频采集与展示
icon: ios-capture
order: 5
---

# iOS本地视频采集与展示

## 视频采集
- 设备管理
- 参数配置
- 数据采集
- 预处理
- 错误处理

## 视频展示
- 渲染配置
- 画面控制
- 性能优化
- 效果调整
- 错误处理

## 实现细节
- 采集实现
- 渲染实现
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 问题处理
EOF

# 创建17.6iOS端RTCPeerConnection文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.6-iOS端RTCPeerConnection.md" << 'EOF'
---
title: iOS端RTCPeerConnection
icon: ios-peer-connection
order: 6
---

# iOS端RTCPeerConnection

## 基础配置
- 连接创建
- 参数设置
- ICE配置
- 状态管理
- 错误处理

## 核心功能
- 连接建立
- 数据传输
- 状态监控
- 事件处理
- 错误恢复

## 实现细节
- 接口实现
- 状态管理
- 事件处理
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建17.7iOS媒体协商文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.7-iOS媒体协商.md" << 'EOF'
---
title: iOS媒体协商
icon: ios-negotiation
order: 7
---

# iOS媒体协商

## 协商流程
- Offer创建
- Answer处理
- SDP处理
- 状态管理
- 错误处理

## 核心功能
- 能力协商
- 参数配置
- 状态同步
- 质量控制
- 错误恢复

## 实现细节
- 接口实现
- 状态管理
- 事件处理
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建17.8iOS远端视频渲染文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.8-iOS远端视频渲染.md" << 'EOF'
---
title: iOS远端视频渲染
icon: ios-remote-render
order: 8
---

# iOS远端视频渲染

## 渲染配置
- 视图创建
- 参数设置
- 渲染控制
- 性能优化
- 错误处理

## 核心功能
- 画面显示
- 尺寸适配
- 质量控制
- 性能监控
- 错误恢复

## 实现细节
- 接口实现
- 状态管理
- 事件处理
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 用户体验
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建17.9HTTPS服务文件
cat > "$BASE_DIR/第17章-iOS端与浏览器互通/17.9-HTTPS服务.md" << 'EOF'
---
title: HTTPS服务
icon: https-service
order: 9
---

# HTTPS服务

## 基础配置
- 证书管理
- 服务配置
- 安全设置
- 性能优化
- 错误处理

## 核心功能
- 安全传输
- 身份认证
- 数据加密
- 会话管理
- 错误恢复

## 实现细节
- 服务实现
- 状态管理
- 安全控制
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 安全加固
- 性能优化
- 调试技巧
- 问题处理
EOF

# 创建第18章目录
mkdir -p "$BASE_DIR/第18章-课程总结"

# 创建第18章README文件
cat > "$BASE_DIR/第18章-课程总结/README.md" << 'EOF'
---
title: 课程总结
icon: course-summary
order: 18
---

# 课程总结

本章对整个WebRTC课程进行系统总结和回顾。
EOF

# 创建18.1课程总结与回顾文件
cat > "$BASE_DIR/第18章-课程总结/18.1-课程总结与回顾.md" << 'EOF'
---
title: 课程总结与回顾
icon: summary-review
order: 1
---

# 课程总结与回顾

## 基础知识
- WebRTC概述
- 核心组件
- 基本原理
- 应用场景
- 发展趋势

## 技术要点
- 媒体处理
- 网络传输
- 数据通道
- 安全机制
- 跨平台开发

## 实践经验
- 开发流程
- 最佳实践
- 性能优化
- 问题处理
- 调试技巧

## 未来展望
- 技术发展
- 应用前景
- 发展方向
- 学习建议
- 实践指导
EOF

# 创建WebRTC源码剖析课程目录
mkdir -p "$BASE_DIR/WebRTC源码剖析课程"

# 创建WebRTC源码剖析课程README文件
cat > "$BASE_DIR/WebRTC源码剖析课程/README.md" << 'EOF'
---
title: WebRTC源码剖析课程
icon: source-analysis
order: 19
---

# WebRTC源码剖析课程

本课程深入剖析WebRTC源码，帮助开发者更好地理解WebRTC的内部实现机制。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第1章目录
mkdir -p "$BASE_DIR/第1章-课程介绍与学习指南"

# 创建第1章README文件
cat > "$BASE_DIR/第1章-课程介绍与学习指南/README.md" << 'EOF'
---
title: 课程介绍与学习指南
icon: course-intro
order: 1
---

# 课程介绍与学习指南

本章介绍WebRTC源码剖析课程的学习方法和整体规划。
EOF

# 创建1.1课前必读文件
cat > "$BASE_DIR/第1章-课程介绍与学习指南/1.1-课前必读.md" << 'EOF'
---
title: 课前必读
icon: pre-reading
order: 1
---

# 课前必读

## 课程准备
- 知识储备
- 环境配置
- 工具准备
- 学习建议
- 注意事项

## 学习路径
- 基础知识
- 进阶内容
- 实践要求
- 学习方法
- 时间规划

## 课程特点
- 课程设计
- 重点难点
- 学习目标
- 预期收获
- 应用场景

## 学习建议
- 学习方法
- 实践要求
- 资源获取
- 问题解决
- 交流互动
EOF

# 创建1.2WebRTC源码剖析课程导学文件
cat > "$BASE_DIR/第1章-课程介绍与学习指南/1.2-WebRTC源码剖析课程导学.md" << 'EOF'
---
title: WebRTC源码剖析课程导学
icon: course-guide
order: 2
---

# WebRTC源码剖析课程导学

## 课程概述
- 课程目标
- 内容安排
- 学习要求
- 考核方式
- 预期成果

## 学习规划
- 知识体系
- 学习路径
- 时间安排
- 实践要求
- 资源配置

## 重点难点
- 核心概念
- 关键技术
- 难点分析
- 解决方案
- 注意事项

## 学习建议
- 学习方法
- 实践指导
- 资源利用
- 问题处理
- 进阶建议
EOF

# 创建第2章目录
mkdir -p "$BASE_DIR/第2章-WebRTC的整体架构"

# 创建第2章README文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/README.md" << 'EOF'
---
title: WebRTC的整体架构
icon: webrtc-architecture
order: 2
---

# WebRTC的整体架构

本章深入分析WebRTC的整体架构设计和实现原理。
EOF

# 创建2.1WebRTC整体架构分析文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/2.1-WebRTC整体架构分析.md" << 'EOF'
---
title: WebRTC整体架构分析
icon: architecture-analysis
order: 1
---

# WebRTC整体架构分析

## 架构概述
- 整体设计
- 核心组件
- 模块划分
- 接口定义
- 交互流程

## 关键模块
- 媒体引擎
- 网络传输
- 信令控制
- 数据通道
- 安全机制

## 实现原理
- 工作流程
- 数据流转
- 状态管理
- 资源控制
- 性能优化

## 设计特点
- 架构优势
- 扩展性
- 可维护性
- 性能考虑
- 安全机制
EOF

# 创建2.2音视频直播的由来文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/2.2-音视频直播的由来.md" << 'EOF'
---
title: 音视频直播的由来
icon: live-streaming-history
order: 2
---

# 音视频直播的由来

## 发展历程
- 技术演进
- 应用场景
- 关键突破
- 行业变革
- 未来趋势

## 核心技术
- 编解码
- 传输协议
- 延迟控制
- 质量保证
- 互动特性

## 应用场景
- 直播平台
- 在线教育
- 远程会议
- 游戏直播
- 社交直播

## 技术展望
- 发展方向
- 技术创新
- 应用前景
- 挑战机遇
- 解决方案
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建2.3直播技术的方向文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/2.3-直播技术的方向.md" << 'EOF'
---
title: 直播技术的方向
icon: live-tech-trends
order: 3
---

# 直播技术的方向

## 技术趋势
- 低延迟传输
- 智能编码
- 画质优化
- 交互增强
- 云端集成

## 创新方向
- AI应用
- 虚拟现实
- 边缘计算
- 5G集成
- 新型编码

## 应用场景
- 电商直播
- 教育直播
- 会议系统
- 游戏直播
- 远程医疗

## 发展前景
- 技术演进
- 市场需求
- 应用创新
- 挑战机遇
- 解决方案
EOF

# 创建2.4实时互动直播的难点文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/2.4-实时互动直播的难点.md" << 'EOF'
---
title: 实时互动直播的难点
icon: live-challenges
order: 4
---

# 实时互动直播的难点

## 技术挑战
- 延迟控制
- 质量保证
- 带宽优化
- 并发处理
- 跨平台兼容

## 性能问题
- 资源消耗
- 网络波动
- 编码效率
- 服务扩展
- 系统稳定

## 实现难点
- 架构设计
- 协议选择
- 数据处理
- 错误恢复
- 性能优化

## 解决方案
- 技术选型
- 架构优化
- 算法改进
- 资源调度
- 监控管理
EOF

# 创建2.5几个重要指标和评测方法文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/2.5-几个重要指标和评测方法.md" << 'EOF'
---
title: 几个重要指标和评测方法
icon: metrics-testing
order: 5
---

# 几个重要指标和评测方法

## 关键指标
- 延迟指标
- 质量指标
- 性能指标
- 稳定性指标
- 资源指标

## 评测方法
- 性能测试
- 压力测试
- 稳定性测试
- 用户体验测试
- 兼容性测试

## 数据分析
- 指标采集
- 数据处理
- 结果分析
- 问题诊断
- 优化建议

## 优化策略
- 性能优化
- 质量提升
- 资源调优
- 架构改进
- 监控预警
EOF

# 创建2.6为什么要使用WebRTC文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/2.6-为什么要使用WebRTC.md" << 'EOF'
---
title: 为什么要使用WebRTC
icon: why-webrtc
order: 6
---

# 为什么要使用WebRTC

## 技术优势
- 标准化协议
- 跨平台支持
- 实时性能
- 安全机制
- 开源生态

## 应用价值
- 开发效率
- 成本控制
- 功能完整
- 性能保证
- 维护便利

## 实践经验
- 应用案例
- 成功经验
- 问题解决
- 最佳实践
- 发展趋势

## 选型建议
- 场景匹配
- 技术评估
- 资源需求
- 成本分析
- 风险控制
EOF

# 创建2.7WebRTC整体架构详解文件
cat > "$BASE_DIR/第2章-WebRTC的整体架构/2.7-WebRTC整体架构详解.md" << 'EOF'
---
title: WebRTC整体架构详解
icon: webrtc-arch-detail
order: 7
---

# WebRTC整体架构详解

## 架构层次
- 应用层
- 会话层
- 传输层
- 媒体层
- 网络层

## 核心组件
- 音视频引擎
- 网络栈
- 会话管理
- 数据通道
- 安全模块

## 工作流程
- 连接建立
- 媒体协商
- 数据传输
- 状态管理
- 资源控制

## 设计特点
- 模块化设计
- 扩展性
- 安全性
- 可靠性
- 性能优化
EOF

# 创建第3章目录
mkdir -p "$BASE_DIR/第3章-WebRTC源码分析环境的搭建"

# 创建第3章README文件
cat > "$BASE_DIR/第3章-WebRTC源码分析环境的搭建/README.md" << 'EOF'
---
title: WebRTC源码分析环境的搭建
icon: env-setup
order: 3
---

# WebRTC源码分析环境的搭建

本章介绍如何搭建WebRTC源码分析的开发环境。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建3.1WebRTC开发环境搭建概述文件
cat > "$BASE_DIR/第3章-WebRTC源码分析环境的搭建/3.1-WebRTC开发环境搭建概述.md" << 'EOF'
---
title: WebRTC开发环境搭建概述
icon: env-overview
order: 1
---

# WebRTC开发环境搭建概述

## 环境要求
- 系统要求
- 硬件配置
- 开发工具
- 依赖组件
- 网络环境

## 准备工作
- 环境检查
- 工具安装
- 配置设置
- 权限管理
- 资源准备

## 搭建步骤
- 环境配置
- 工具安装
- 依赖管理
- 验证测试
- 问题处理

## 注意事项
- 版本兼容
- 系统配置
- 资源需求
- 常见问题
- 解决方案
EOF

# 创建3.2获取WebRTC源码文件
cat > "$BASE_DIR/第3章-WebRTC源码分析环境的搭建/3.2-获取WebRTC源码.md" << 'EOF'
---
title: 获取WebRTC源码
icon: get-source
order: 2
---

# 获取WebRTC源码

## 获取方式
- 代码仓库
- 下载工具
- 版本选择
- 分支管理
- 同步策略

## 操作步骤
- 环境准备
- 命令执行
- 进度监控
- 验证检查
- 问题处理

## 源码管理
- 版本控制
- 分支管理
- 更新同步
- 冲突处理
- 备份策略

## 最佳实践
- 下载策略
- 版本选择
- 存储管理
- 同步方法
- 问题解决
EOF

# 创建3.3编译WebRTC的必备工具文件
cat > "$BASE_DIR/第3章-WebRTC源码分析环境的搭建/3.3-编译WebRTC的必备工具.md" << 'EOF'
---
title: 编译WebRTC的必备工具
icon: build-tools
order: 3
---

# 编译WebRTC的必备工具

## 工具清单
- 编译器
- 构建工具
- 依赖管理
- 版本控制
- 调试工具

## 安装配置
- 工具获取
- 环境配置
- 版本管理
- 权限设置
- 验证测试

## 使用说明
- 基本用法
- 参数配置
- 常用命令
- 注意事项
- 问题处理

## 最佳实践
- 工具选择
- 配置优化
- 使用技巧
- 问题解决
- 维护更新
EOF

# 创建3.4编译WebRTC源码文件
cat > "$BASE_DIR/第3章-WebRTC源码分析环境的搭建/3.4-编译WebRTC源码.md" << 'EOF'
---
title: 编译WebRTC源码
icon: build-source
order: 4
---

# 编译WebRTC源码

## 编译准备
- 环境检查
- 参数配置
- 资源准备
- 依赖检查
- 清理工作

## 编译过程
- 命令执行
- 进度监控
- 错误处理
- 日志分析
- 结果验证

## 常见问题
- 环境问题
- 依赖问题
- 配置问题
- 资源问题
- 编译错误

## 优化建议
- 性能优化
- 参数调优
- 资源管理
- 问题预防
- 维护策略
EOF

# 创建3.5WebRTC中的重要Demo文件
cat > "$BASE_DIR/第3章-WebRTC源码分析环境的搭建/3.5-WebRTC中的重要Demo.md" << 'EOF'
---
title: WebRTC中的重要Demo
icon: webrtc-demos
order: 5
---

# WebRTC中的重要Demo

## Demo概述
- 示例类型
- 功能特点
- 实现原理
- 使用场景
- 学习价值

## 运行方法
- 环境准备
- 配置设置
- 启动步骤
- 测试验证
- 问题处理

## 代码分析
- 结构分析
- 关键实现
- 重要接口
- 工作流程
- 设计特点

## 实践指导
- 使用方法
- 修改定制
- 调试技巧
- 问题解决
- 优化建议
EOF

# 创建第4章目录
mkdir -p "$BASE_DIR/第4章-开启WebRTC源码分析之路"

# 创建第4章README文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/README.md" << 'EOF'
---
title: 开启WebRTC源码分析之路
icon: source-analysis
order: 4
---

# 开启WebRTC源码分析之路

本章开始深入分析WebRTC源码的内部实现机制。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建4.1分析WebRTC必经之路章节概述文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.1-分析WebRTC必经之路章节概述.md" << 'EOF'
---
title: 分析WebRTC必经之路章节概述
icon: analysis-overview
order: 1
---

# 分析WebRTC必经之路章节概述

## 学习路线
- 基础知识
- 核心概念
- 分析方法
- 实践要求
- 学习目标

## 分析重点
- 架构设计
- 核心模块
- 关键流程
- 实现机制
- 性能优化

## 工具方法
- 分析工具
- 调试方法
- 测试技巧
- 问题定位
- 性能分析

## 实践指导
- 分析策略
- 重点把握
- 难点突破
- 方法总结
- 经验分享
EOF

# 创建4.2一对一实时通信架构文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.2-一对一实时通信架构.md" << 'EOF'
---
title: 一对一实时通信架构
icon: p2p-arch
order: 2
---

# 一对一实时通信架构

## 架构设计
- 整体架构
- 模块划分
- 接口定义
- 数据流转
- 交互流程

## 核心组件
- 信令服务
- 媒体传输
- 连接管理
- 数据通道
- 状态控制

## 实现机制
- 连接建立
- 数据传输
- 状态同步
- 错误处理
- 资源管理

## 优化策略
- 性能优化
- 质量保证
- 资源控制
- 错误恢复
- 监控管理
EOF

# 创建4.3peerconnection_client的构成文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.3-peerconnection_client的构成.md" << 'EOF'
---
title: peerconnection_client的构成
icon: peer-client
order: 3
---

# peerconnection_client的构成

## 基础结构
- 类层次
- 模块组织
- 接口设计
- 状态管理
- 资源控制

## 核心功能
- 连接管理
- 数据传输
- 事件处理
- 状态同步
- 错误处理

## 实现细节
- 接口实现
- 数据流转
- 状态维护
- 资源管理
- 性能优化

## 设计特点
- 架构特点
- 扩展性
- 可维护性
- 性能考虑
- 安全机制
EOF

# 创建4.4几个重要的信令文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.4-几个重要的信令.md" << 'EOF'
---
title: 几个重要的信令
icon: signaling
order: 4
---

# 几个重要的信令

## 信令类型
- 会话建立
- 媒体协商
- 连接控制
- 状态同步
- 错误处理

## 实现机制
- 消息格式
- 传输协议
- 处理流程
- 状态管理
- 错误恢复

## 关键流程
- 信令交换
- 状态转换
- 数据同步
- 错误处理
- 资源管理

## 最佳实践
- 设计策略
- 实现方法
- 优化建议
- 调试技巧
- 问题处理
EOF

# 创建4.5WebRTC中的媒体协商文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.5-WebRTC中的媒体协商.md" << 'EOF'
---
title: WebRTC中的媒体协商
icon: media-negotiation
order: 5
---

# WebRTC中的媒体协商

## 协商机制
- 协商流程
- 参数配置
- 能力交换
- 状态管理
- 错误处理

## 实现细节
- SDP处理
- 编码协商
- 传输控制
- 质量保证
- 资源管理

## 关键流程
- Offer创建
- Answer处理
- 状态同步
- 错误恢复
- 资源控制

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建4.6完美协商文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.6-完美协商.md" << 'EOF'
---
title: 完美协商
icon: perfect-negotiation
order: 6
---

# 完美协商

## 协商原理
- 设计思想
- 工作机制
- 优势特点
- 应用场景
- 实现要求

## 实现细节
- 流程设计
- 冲突处理
- 状态管理
- 错误恢复
- 性能优化

## 关键技术
- 角色确定
- 状态同步
- 冲突解决
- 重试机制
- 资源控制

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF

# 创建4.7Windows窗口与消息文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.7-Windows窗口与消息.md" << 'EOF'
---
title: Windows窗口与消息
icon: windows-msg
order: 7
---

# Windows窗口与消息

## 基础概念
- 窗口系统
- 消息机制
- 事件处理
- 线程模型
- 资源管理

## 实现机制
- 窗口创建
- 消息处理
- 事件分发
- 状态管理
- 资源控制

## 关键技术
- 消息循环
- 事件处理
- 线程同步
- 资源管理
- 性能优化

## 最佳实践
- 实现策略
- 性能优化
- 可靠性
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建4.8实战-实现一个最简单的Windows应用程序文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.8-实战-实现一个最简单的Windows应用程序.md" << 'EOF'
---
title: 实战-实现一个最简单的Windows应用程序
icon: windows-app
order: 8
---

# 实战-实现一个最简单的Windows应用程序

## 基础架构
- 程序入口
- 窗口创建
- 消息循环
- 事件处理
- 资源管理

## 核心实现
- 窗口类
- 消息处理
- 界面布局
- 交互逻辑
- 错误处理

## 功能扩展
- 控件使用
- 事件响应
- 状态管理
- 资源控制
- 性能优化

## 最佳实践
- 开发流程
- 代码组织
- 调试技巧
- 性能优化
- 问题处理
EOF

# 创建4.9peerconnection-client界面实现文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.9-peerconnection-client界面实现.md" << 'EOF'
---
title: peerconnection-client界面实现
icon: client-ui
order: 9
---

# peerconnection-client界面实现

## 界面设计
- 布局结构
- 控件设计
- 交互逻辑
- 样式定义
- 资源管理

## 功能实现
- 界面绘制
- 事件处理
- 状态管理
- 数据绑定
- 错误处理

## 交互逻辑
- 用户操作
- 响应处理
- 状态更新
- 数据同步
- 错误恢复

## 优化策略
- 性能优化
- 体验优化
- 资源管理
- 错误处理
- 维护性
EOF

# 创建4.10源码分析-client界面文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.10-源码分析-client界面.md" << 'EOF'
---
title: 源码分析-client界面
icon: client-analysis
order: 10
---

# 源码分析-client界面

## 代码结构
- 类层次
- 模块组织
- 接口设计
- 依赖关系
- 资源管理

## 核心实现
- 界面构建
- 事件处理
- 状态管理
- 数据流转
- 错误处理

## 关键流程
- 初始化流程
- 交互处理
- 状态更新
- 资源管理
- 错误恢复

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建4.11信令逻辑文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.11-信令逻辑.md" << 'EOF'
---
title: 信令逻辑
icon: signaling-logic
order: 11
---

# 信令逻辑

## 基本流程
- 连接建立
- 消息交换
- 状态管理
- 错误处理
- 资源控制

## 实现机制
- 协议设计
- 消息格式
- 处理流程
- 状态同步
- 错误恢复

## 关键技术
- 消息路由
- 状态维护
- 并发处理
- 安全机制
- 性能优化

## 最佳实践
- 设计策略
- 实现方法
- 优化建议
- 调试技巧
- 问题处理
EOF

# 创建4.12源码分析-信令的实现文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.12-源码分析-信令的实现.md" << 'EOF'
---
title: 源码分析-信令的实现
icon: signaling-impl
order: 12
---

# 源码分析-信令的实现

## 代码结构
- 类设计
- 模块划分
- 接口定义
- 依赖关系
- 资源管理

## 核心实现
- 连接管理
- 消息处理
- 状态控制
- 错误处理
- 资源管理

## 关键流程
- 初始化流程
- 消息处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建4.13WebRTC-Native开发过程文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.13-WebRTC-Native开发过程.md" << 'EOF'
---
title: WebRTC-Native开发过程
icon: native-dev
order: 13
---

# WebRTC-Native开发过程

## 开发环境
- 环境搭建
- 工具配置
- 依赖管理
- 调试设置
- 部署流程

## 开发流程
- 需求分析
- 设计实现
- 测试验证
- 性能优化
- 部署发布

## 关键技术
- API使用
- 功能实现
- 性能优化
- 调试技巧
- 问题处理

## 最佳实践
- 开发规范
- 代码组织
- 调试方法
- 优化策略
- 维护建议
EOF

# 创建4.14源码分析-媒体协商文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.14-源码分析-媒体协商.md" << 'EOF'
---
title: 源码分析-媒体协商
icon: media-negotiation-analysis
order: 14
---

# 源码分析-媒体协商

## 代码结构
- 类设计
- 模块划分
- 接口定义
- 依赖关系
- 资源管理

## 核心实现
- 协商流程
- 状态管理
- 数据处理
- 错误处理
- 资源控制

## 关键流程
- 初始化流程
- 协商过程
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建4.15源码分析-视频渲染文件
cat > "$BASE_DIR/第4章-开启WebRTC源码分析之路/4.15-源码分析-视频渲染.md" << 'EOF'
---
title: 源码分析-视频渲染
icon: video-render
order: 15
---

# 源码分析-视频渲染

## 代码结构
- 类设计
- 模块划分
- 接口定义
- 依赖关系
- 资源管理

## 核心实现
- 渲染流程
- 帧处理
- 同步机制
- 性能优化
- 资源控制

## 关键技术
- 渲染引擎
- 格式转换
- 缓冲管理
- 同步控制
- 性能调优

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建第5章目录
mkdir -p "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）"

# 创建第5章README文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/README.md" << 'EOF'
---
title: 抓住WebRTC的脉络（线程模型）
icon: thread-model
order: 5
---

# 抓住WebRTC的脉络（线程模型）

本章深入分析WebRTC的线程模型设计与实现。
EOF

# 创建5.1WebRTC线程模型概述文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.1-WebRTC线程模型概述.md" << 'EOF'
---
title: WebRTC线程模型概述
icon: thread-overview
order: 1
---

# WebRTC线程模型概述

## 基本架构
- 线程设计
- 模型特点
- 工作机制
- 交互方式
- 资源管理

## 核心组件
- 线程类型
- 任务调度
- 同步机制
- 通信方式
- 状态管理

## 实现机制
- 线程创建
- 任务分配
- 状态控制
- 资源管理
- 性能优化

## 设计特点
- 架构优势
- 扩展性
- 可维护性
- 性能考虑
- 安全机制
EOF

# 创建5.2线程基础知识文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.2-线程基础知识.md" << 'EOF'
---
title: 线程基础知识
icon: thread-basics
order: 2
---

# 线程基础知识

## 基本概念
- 线程定义
- 线程状态
- 线程优先级
- 线程安全
- 同步机制

## 核心特性
- 创建管理
- 状态转换
- 同步控制
- 通信机制
- 资源共享

## 常见问题
- 死锁处理
- 竞态条件
- 资源管理
- 性能优化
- 调试技巧

## 最佳实践
- 设计模式
- 实现策略
- 优化方法
- 调试方法
- 问题处理
EOF

# 创建5.3常见的线程模型文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.3-常见的线程模型.md" << 'EOF'
---
title: 常见的线程模型
icon: thread-patterns
order: 3
---

# 常见的线程模型

## 模型类型
- 单线程模型
- 多线程模型
- 线程池模型
- 事件驱动模型
- 异步模型

## 实现机制
- 模型设计
- 任务调度
- 同步控制
- 资源管理
- 性能优化

## 应用场景
- 场景分析
- 模型选择
- 实现策略
- 优化方法
- 注意事项

## 最佳实践
- 设计原则
- 实现方法
- 优化建议
- 调试技巧
- 问题处理
EOF

# 创建5.4WebRTC中的线程文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.4-WebRTC中的线程.md" << 'EOF'
---
title: WebRTC中的线程
icon: webrtc-threads
order: 4
---

# WebRTC中的线程

## 线程类型
- 信令线程
- 媒体线程
- 网络线程
- 工作线程
- 渲染线程

## 工作机制
- 线程创建
- 任务分配
- 同步控制
- 通信方式
- 资源管理

## 实现细节
- 线程实现
- 任务处理
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 设计策略
- 实现方法
- 优化建议
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建5.5WebRTC中的线程管理文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.5-WebRTC中的线程管理.md" << 'EOF'
---
title: WebRTC中的线程管理
icon: thread-management
order: 5
---

# WebRTC中的线程管理

## 管理机制
- 线程创建
- 生命周期
- 调度策略
- 资源分配
- 状态监控

## 核心功能
- 线程池管理
- 任务分发
- 同步控制
- 资源调度
- 性能监控

## 实现细节
- 管理接口
- 调度算法
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 管理策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建5.6WebRTC三大线程文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.6-WebRTC三大线程.md" << 'EOF'
---
title: WebRTC三大线程
icon: three-threads
order: 6
---

# WebRTC三大线程

## 信令线程
- 功能职责
- 工作机制
- 交互模式
- 状态管理
- 资源控制

## 网络线程
- 功能职责
- 数据传输
- 连接管理
- 状态监控
- 错误处理

## 工作线程
- 功能职责
- 任务处理
- 资源管理
- 性能优化
- 状态同步

## 线程协作
- 通信机制
- 同步控制
- 资源共享
- 状态维护
- 错误处理
EOF

# 创建5.7WebRTC线程的启动与运行文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.7-WebRTC线程的启动与运行.md" << 'EOF'
---
title: WebRTC线程的启动与运行
icon: thread-startup
order: 7
---

# WebRTC线程的启动与运行

## 启动流程
- 初始化
- 线程创建
- 资源分配
- 状态设置
- 错误处理

## 运行机制
- 任务调度
- 消息循环
- 状态管理
- 资源控制
- 性能监控

## 实现细节
- 启动实现
- 运行控制
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 启动策略
- 运行优化
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建5.8WebRTC事件处理基础知识文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.8-WebRTC事件处理基础知识.md" << 'EOF'
---
title: WebRTC事件处理基础知识
icon: event-basics
order: 8
---

# WebRTC事件处理基础知识

## 基本概念
- 事件模型
- 事件类型
- 处理机制
- 回调函数
- 状态管理

## 核心功能
- 事件分发
- 事件队列
- 处理流程
- 状态同步
- 错误处理

## 实现机制
- 事件注册
- 事件触发
- 事件处理
- 状态维护
- 资源管理

## 最佳实践
- 设计模式
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF

# 创建5.9WebRTC线程事件处理文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.9-WebRTC线程事件处理.md" << 'EOF'
---
title: WebRTC线程事件处理
icon: thread-events
order: 9
---

# WebRTC线程事件处理

## 处理机制
- 事件分发
- 线程调度
- 同步控制
- 状态管理
- 资源控制

## 核心功能
- 事件处理
- 消息队列
- 状态同步
- 错误恢复
- 性能优化

## 实现细节
- 处理流程
- 状态维护
- 资源管理
- 错误处理
- 性能调优

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建5.10WebRTC接口宏文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.10-WebRTC接口宏.md" << 'EOF'
---
title: WebRTC接口宏
icon: interface-macros
order: 10
---

# WebRTC接口宏

## 基本概念
- 宏定义
- 使用场景
- 实现机制
- 优势特点
- 注意事项

## 核心功能
- 接口封装
- 代码生成
- 类型检查
- 错误处理
- 调试支持

## 实现细节
- 宏展开
- 代码生成
- 类型处理
- 错误检查
- 性能优化

## 最佳实践
- 使用规范
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF

# 创建5.11WebRTC接口的设计原理文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.11-WebRTC接口的设计原理.md" << 'EOF'
---
title: WebRTC接口的设计原理
icon: interface-design
order: 11
---

# WebRTC接口的设计原理

## 设计思想
- 设计原则
- 架构考虑
- 接口抽象
- 扩展性
- 维护性

## 核心特性
- 接口定义
- 类型系统
- 错误处理
- 资源管理
- 性能考虑

## 实现机制
- 接口实现
- 状态管理
- 资源控制
- 错误处理
- 性能优化

## 最佳实践
- 设计模式
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建5.12WebRTC接口调用过程文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.12-WebRTC接口调用过程.md" << 'EOF'
---
title: WebRTC接口调用过程
icon: interface-call
order: 12
---

# WebRTC接口调用过程

## 调用流程
- 初始化
- 参数准备
- 接口调用
- 结果处理
- 错误处理

## 核心步骤
- 接口验证
- 参数检查
- 线程切换
- 状态同步
- 资源管理

## 实现细节
- 调用实现
- 状态维护
- 资源控制
- 错误处理
- 性能优化

## 最佳实践
- 调用策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建5.13Post方法进行线程切换文件
cat > "$BASE_DIR/第5章-抓住WebRTC的脉络（线程模型）/5.13-Post方法进行线程切换.md" << 'EOF'
---
title: Post方法进行线程切换
icon: thread-switch
order: 13
---

# Post方法进行线程切换

## 基本原理
- 切换机制
- 消息传递
- 同步控制
- 状态管理
- 资源控制

## 核心功能
- 任务投递
- 线程调度
- 状态同步
- 错误处理
- 性能优化

## 实现细节
- 方法实现
- 状态维护
- 资源管理
- 错误处理
- 性能调优

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建第6章目录
mkdir -p "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）"

# 创建第6章README文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/README.md" << 'EOF'
---
title: 开始"聊天"之前先认识一下（媒体协商）
icon: media-negotiation
order: 6
---

# 开始"聊天"之前先认识一下（媒体协商）

本章深入介绍WebRTC的媒体协商机制。
EOF

# 创建6.1WebRTC媒体协商--综述文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.1-WebRTC媒体协商--综述.md" << 'EOF'
---
title: WebRTC媒体协商--综述
icon: negotiation-overview
order: 1
---

# WebRTC媒体协商--综述

## 基本概念
- 协商定义
- 协商流程
- 协商机制
- 协商目的
- 协商特点

## 核心功能
- 能力交换
- 参数协商
- 状态同步
- 错误处理
- 资源管理

## 实现机制
- 协商过程
- 状态管理
- 资源控制
- 错误处理
- 性能优化

## 最佳实践
- 协商策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建6.2SDP协议文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.2-SDP协议.md" << 'EOF'
---
title: SDP协议
icon: sdp-protocol
order: 2
---

# SDP协议

## 协议基础
- 协议定义
- 协议结构
- 协议语法
- 协议语义
- 协议特点

## 核心内容
- 会话描述
- 媒体描述
- 属性定义
- 参数配置
- 扩展机制

## 实现细节
- 协议解析
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 兼容处理
- 调试技巧
- 问题处理
EOF

# 创建6.3WebRTC中的SDP类结构文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.3-WebRTC中的SDP类结构.md" << 'EOF'
---
title: WebRTC中的SDP类结构
icon: sdp-structure
order: 3
---

# WebRTC中的SDP类结构

## 类设计
- 类层次
- 类关系
- 接口定义
- 属性设计
- 方法设计

## 核心功能
- 数据管理
- 状态控制
- 参数配置
- 错误处理
- 资源管理

## 实现细节
- 类实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 设计模式
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建6.4如何生成SDP文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.4-如何生成SDP.md" << 'EOF'
---
title: 如何生成SDP
icon: sdp-generation
order: 4
---

# 如何生成SDP

## 生成流程
- 信息收集
- 格式构建
- 参数配置
- 验证检查
- 错误处理

## 核心步骤
- 媒体描述
- 编码配置
- 网络参数
- 安全设置
- 扩展属性

## 实现细节
- 数据组织
- 格式处理
- 参数验证
- 错误处理
- 性能优化

## 最佳实践
- 生成策略
- 优化方法
- 验证方案
- 调试技巧
- 问题处理
EOF

# 创建6.5编解码器信息的收集文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.5-编解码器信息的收集.md" << 'EOF'
---
title: 编解码器信息的收集
icon: codec-collection
order: 5
---

# 编解码器信息的收集

## 收集流程
- 信息获取
- 数据整理
- 参数验证
- 格式转换
- 错误处理

## 核心功能
- 编码能力
- 参数配置
- 格式支持
- 性能特性
- 扩展功能

## 实现细节
- 收集实现
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 收集策略
- 优化方法
- 验证方案
- 调试技巧
- 问题处理
EOF

# 创建6.6编解码器信息的收集之二文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.6-编解码器信息的收集之二.md" << 'EOF'
---
title: 编解码器信息的收集之二
icon: codec-collection-2
order: 6
---

# 编解码器信息的收集之二

## 高级特性
- 扩展能力
- 特殊参数
- 优化配置
- 兼容处理
- 性能调优

## 实现机制
- 数据结构
- 处理流程
- 状态管理
- 资源控制
- 错误处理

## 关键技术
- 信息提取
- 数据处理
- 格式转换
- 参数验证
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 验证方案
- 调试技巧
- 问题处理
EOF

# 创建6.7源码分析-CreateOffer之一文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.7-源码分析-CreateOffer之一.md" << 'EOF'
---
title: 源码分析-CreateOffer之一
icon: create-offer-1
order: 7
---

# 源码分析-CreateOffer之一

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 初始化流程
- 参数处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建6.8CreateOffer源码分析之二文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.8-CreateOffer源码分析之二.md" << 'EOF'
---
title: CreateOffer源码分析之二
icon: create-offer-2
order: 8
---

# CreateOffer源码分析之二

## 深入分析
- 内部机制
- 数据流转
- 状态变化
- 资源管理
- 性能优化

## 实现细节
- 具体实现
- 参数处理
- 状态维护
- 错误处理
- 资源控制

## 关键技术
- 核心算法
- 优化策略
- 同步机制
- 安全控制
- 性能调优

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
- 维护建议
EOF

# 创建6.9源码分析-SetLocalDescription之一文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.9-源码分析-SetLocalDescription之一.md" << 'EOF'
---
title: 源码分析-SetLocalDescription之一
icon: set-local-desc-1
order: 9
---

# 源码分析-SetLocalDescription之一

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 初始化流程
- 参数处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建6.10源码分析-SetLocalDescription之二文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.10-源码分析-SetLocalDescription之二.md" << 'EOF'
---
title: 源码分析-SetLocalDescription之二
icon: set-local-desc-2
order: 10
---

# 源码分析-SetLocalDescription之二

## 深入分析
- 内部机制
- 数据流转
- 状态变化
- 资源管理
- 性能优化

## 实现细节
- 具体实现
- 参数处理
- 状态维护
- 错误处理
- 资源控制

## 关键技术
- 核心算法
- 优化策略
- 同步机制
- 安全控制
- 性能调优

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
- 维护建议
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建6.11收集Candidate的过程文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.11-收集Candidate的过程.md" << 'EOF'
---
title: 收集Candidate的过程
icon: candidate-collection
order: 11
---

# 收集Candidate的过程

## 收集流程
- 初始化准备
- 网络探测
- 数据收集
- 状态管理
- 错误处理

## 核心功能
- 地址收集
- 类型识别
- 优先级计算
- 状态同步
- 资源管理

## 实现细节
- 收集实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 收集策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建6.12生成SDP文本信息文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.12-生成SDP文本信息.md" << 'EOF'
---
title: 生成SDP文本信息
icon: sdp-generation
order: 12
---

# 生成SDP文本信息

## 生成流程
- 数据准备
- 格式构建
- 参数配置
- 文本生成
- 验证检查

## 核心功能
- 信息组织
- 格式转换
- 参数设置
- 验证处理
- 错误处理

## 实现细节
- 生成实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 生成策略
- 优化方法
- 验证方案
- 调试技巧
- 问题处理
EOF

# 创建6.13解析SDP文本信息文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.13-解析SDP文本信息.md" << 'EOF'
---
title: 解析SDP文本信息
icon: sdp-parsing
order: 13
---

# 解析SDP文本信息

## 解析流程
- 文本读取
- 语法分析
- 数据提取
- 结构构建
- 验证检查

## 核心功能
- 格式解析
- 数据转换
- 参数提取
- 验证处理
- 错误处理

## 实现细节
- 解析实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 解析策略
- 优化方法
- 验证方案
- 调试技巧
- 问题处理
EOF

# 创建6.14源码分析-CreateAnswer文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.14-源码分析-CreateAnswer.md" << 'EOF'
---
title: 源码分析-CreateAnswer
icon: create-answer
order: 14
---

# 源码分析-CreateAnswer

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 初始化流程
- 参数处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建6.15源码分析-SetRemoteDescription文件
cat > "$BASE_DIR/第6章-开始"聊天"之前先认识一下（媒体协商）/6.15-源码分析-SetRemoteDescription.md" << 'EOF'
---
title: 源码分析-SetRemoteDescription
icon: set-remote-desc
order: 15
---

# 源码分析-SetRemoteDescription

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 初始化流程
- 参数处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建第7章目录
mkdir -p "$BASE_DIR/第7章-音频数据采集"

# 创建第7章README文件
cat > "$BASE_DIR/第7章-音频数据采集/README.md" << 'EOF'
---
title: 音频数据采集
icon: audio-capture
order: 7
---

# 音频数据采集

本章深入介绍WebRTC的音频数据采集机制和实现。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建7.1音频数据采集与播放概述文件
cat > "$BASE_DIR/第7章-音频数据采集/7.1-音频数据采集与播放概述.md" << 'EOF'
---
title: 音频数据采集与播放概述
icon: audio-overview
order: 1
---

# 音频数据采集与播放概述

## 基本概念
- 音频采集
- 数据格式
- 采样率
- 缓冲区
- 播放机制

## 核心功能
- 设备管理
- 数据采集
- 格式转换
- 缓冲控制
- 播放控制

## 实现机制
- 采集流程
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 采集策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.2ADM的创建文件
cat > "$BASE_DIR/第7章-音频数据采集/7.2-ADM的创建.md" << 'EOF'
---
title: ADM的创建
icon: adm-creation
order: 2
---

# ADM的创建

## 创建流程
- 初始化准备
- 参数配置
- 资源分配
- 状态设置
- 错误处理

## 核心功能
- 设备管理
- 参数设置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 创建策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.3CoreAudio基本概念文件
cat > "$BASE_DIR/第7章-音频数据采集/7.3-CoreAudio基本概念.md" << 'EOF'
---
title: CoreAudio基本概念
icon: core-audio-basics
order: 3
---

# CoreAudio基本概念

## 基础架构
- 系统架构
- 组件关系
- 工作流程
- 接口定义
- 资源管理

## 核心概念
- 音频会话
- 音频流
- 数据格式
- 缓冲区
- 时间控制

## 关键特性
- 设备管理
- 格式控制
- 同步机制
- 状态管理
- 错误处理

## 应用实践
- 使用场景
- 实现方法
- 优化策略
- 调试技巧
- 问题处理
EOF

# 创建7.4CoreAudio-API文件
cat > "$BASE_DIR/第7章-音频数据采集/7.4-CoreAudio-API.md" << 'EOF'
---
title: CoreAudio-API
icon: core-audio-api
order: 4
---

# CoreAudio-API

## API概述
- 接口分类
- 功能特点
- 使用场景
- 调用方式
- 注意事项

## 核心接口
- 设备管理
- 音频控制
- 数据处理
- 状态管理
- 错误处理

## 实现细节
- 接口实现
- 参数处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.5AudioDeviceWindowsCore的构造函数文件
cat > "$BASE_DIR/第7章-音频数据采集/7.5-AudioDeviceWindowsCore的构造函数.md" << 'EOF'
---
title: AudioDeviceWindowsCore的构造函数
icon: audio-device-constructor
order: 5
---

# AudioDeviceWindowsCore的构造函数

## 构造流程
- 参数初始化
- 资源分配
- 状态设置
- 错误处理
- 性能优化

## 核心功能
- 设备初始化
- 参数配置
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 构造实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.6ADM初始化文件
cat > "$BASE_DIR/第7章-音频数据采集/7.6-ADM初始化.md" << 'EOF'
---
title: ADM初始化
icon: adm-init
order: 6
---

# ADM初始化

## 初始化流程
- 参数配置
- 资源分配
- 设备检测
- 状态设置
- 错误处理

## 核心功能
- 设备初始化
- 参数设置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 初始化实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 初始化策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.7源码分析-ADM初始化之枚举音频设备文件
cat > "$BASE_DIR/第7章-音频数据采集/7.7-源码分析-ADM初始化之枚举音频设备.md" << 'EOF'
---
title: 源码分析-ADM初始化之枚举音频设备
icon: adm-enum-devices
order: 7
---

# 源码分析-ADM初始化之枚举音频设备

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 设备枚举
- 数据收集
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 枚举过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建7.8ADM初始化之InitSpeaker文件
cat > "$BASE_DIR/第7章-音频数据采集/7.8-ADM初始化之InitSpeaker.md" << 'EOF'
---
title: ADM初始化之InitSpeaker
icon: init-speaker
order: 8
---

# ADM初始化之InitSpeaker

## 初始化流程
- 设备检测
- 参数配置
- 资源分配
- 状态设置
- 错误处理

## 核心功能
- 扬声器初始化
- 参数设置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 初始化实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 初始化策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.9ADM初始化之设置通道数文件
cat > "$BASE_DIR/第7章-音频数据采集/7.9-ADM初始化之设置通道数.md" << 'EOF'
---
title: ADM初始化之设置通道数
icon: set-channels
order: 9
---

# ADM初始化之设置通道数

## 设置流程
- 参数验证
- 通道配置
- 资源分配
- 状态更新
- 错误处理

## 核心功能
- 通道管理
- 参数设置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 设置实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 设置策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.10ADM初始化之InitMicrophone文件
cat > "$BASE_DIR/第7章-音频数据采集/7.10-ADM初始化之InitMicrophone.md" << 'EOF'
---
title: ADM初始化之InitMicrophone
icon: init-microphone
order: 10
---

# ADM初始化之InitMicrophone

## 初始化流程
- 设备检测
- 参数配置
- 资源分配
- 状态设置
- 错误处理

## 核心功能
- 麦克风初始化
- 参数设置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 初始化实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 初始化策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.11AudioState文件
cat > "$BASE_DIR/第7章-音频数据采集/7.11-AudioState.md" << 'EOF'
---
title: AudioState
icon: audio-state
order: 11
---

# AudioState

## 状态定义
- 状态类型
- 状态转换
- 状态管理
- 状态同步
- 错误处理

## 核心功能
- 状态控制
- 状态监控
- 状态维护
- 错误处理
- 资源管理

## 实现细节
- 状态实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 状态策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.12Engine_PeerConnection_Call等对象之间的关系文件
cat > "$BASE_DIR/第7章-音频数据采集/7.12-Engine_PeerConnection_Call等对象之间的关系.md" << 'EOF'
---
title: Engine_PeerConnection_Call等对象之间的关系
icon: object-relations
order: 12
---

# Engine_PeerConnection_Call等对象之间的关系

## 对象关系
- 类层次结构
- 对象交互
- 依赖关系
- 生命周期
- 资源管理

## 核心功能
- 对象创建
- 状态管理
- 数据流转
- 资源控制
- 错误处理

## 实现机制
- 关系实现
- 交互处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 设计模式
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.13打开播放设备文件
cat > "$BASE_DIR/第7章-音频数据采集/7.13-打开播放设备.md" << 'EOF'
---
title: 打开播放设备
icon: open-playback
order: 13
---

# 打开播放设备

## 打开流程
- 设备检测
- 参数配置
- 资源分配
- 状态设置
- 错误处理

## 核心功能
- 设备控制
- 参数设置
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 打开实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 操作策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.14InitPlay基础知识文件
cat > "$BASE_DIR/第7章-音频数据采集/7.14-InitPlay基础知识.md" << 'EOF'
---
title: InitPlay基础知识
icon: init-play-basics
order: 14
---

# InitPlay基础知识

## 基本概念
- 初始化流程
- 参数配置
- 资源管理
- 状态控制
- 错误处理

## 核心功能
- 播放初始化
- 参数设置
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 初始化实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 初始化策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建7.15InitPlayout源码分析文件
cat > "$BASE_DIR/第7章-音频数据采集/7.15-InitPlayout源码分析.md" << 'EOF'
---
title: InitPlayout源码分析
icon: init-playout-analysis
order: 15
---

# InitPlayout源码分析

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 初始化流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建7.16播放声音的基础API文件
cat > "$BASE_DIR/第7章-音频数据采集/7.16-播放声音的基础API.md" << 'EOF'
---
title: 播放声音的基础API
icon: audio-play-api
order: 16
---

# 播放声音的基础API

## API概述
- 接口分类
- 功能特点
- 使用场景
- 调用方式
- 注意事项

## 核心接口
- 播放控制
- 音量控制
- 格式转换
- 状态管理
- 错误处理

## 实现细节
- 接口实现
- 参数处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.17播放声音的具体流程文件
cat > "$BASE_DIR/第7章-音频数据采集/7.17-播放声音的具体流程.md" << 'EOF'
---
title: 播放声音的具体流程
icon: audio-play-process
order: 17
---

# 播放声音的具体流程

## 播放流程
- 初始化准备
- 数据加载
- 格式处理
- 播放控制
- 资源释放

## 核心步骤
- 数据准备
- 缓冲管理
- 播放控制
- 状态同步
- 错误处理

## 实现细节
- 流程实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.18源码分析-StartPlayout文件
cat > "$BASE_DIR/第7章-音频数据采集/7.18-源码分析-StartPlayout.md" << 'EOF'
---
title: 源码分析-StartPlayout
icon: start-playout
order: 18
---

# 源码分析-StartPlayout

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 启动流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建7.19再论音频DMO文件
cat > "$BASE_DIR/第7章-音频数据采集/7.19-再论音频DMO.md" << 'EOF'
---
title: 再论音频DMO
icon: audio-dmo
order: 19
---

# 再论音频DMO

## 基本概念
- DMO定义
- 工作原理
- 功能特点
- 应用场景
- 注意事项

## 核心功能
- 数据处理
- 格式转换
- 效果处理
- 状态管理
- 错误处理

## 实现机制
- 处理流程
- 数据转换
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建7.20源码分析-InitRecording文件
cat > "$BASE_DIR/第7章-音频数据采集/7.20-源码分析-InitRecording.md" << 'EOF'
---
title: 源码分析-InitRecording
icon: init-recording
order: 20
---

# 源码分析-InitRecording

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 初始化流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建7.21StartRecording处理逻辑文件
cat > "$BASE_DIR/第7章-音频数据采集/7.21-StartRecording处理逻辑.md" << 'EOF'
---
title: StartRecording处理逻辑
icon: start-recording
order: 21
---

# StartRecording处理逻辑

## 处理流程
- 初始化准备
- 参数配置
- 资源分配
- 状态设置
- 错误处理

## 核心功能
- 录音控制
- 数据采集
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 处理实现
- 数据管理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建7.22源码分析-StartRecording文件
cat > "$BASE_DIR/第7章-音频数据采集/7.22-源码分析-StartRecording.md" << 'EOF'
---
title: 源码分析-StartRecording
icon: start-recording-analysis
order: 22
---

# 源码分析-StartRecording

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 启动流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建第8章目录
mkdir -p "$BASE_DIR/第8章-视频数据采集"

# 创建第8章README文件
cat > "$BASE_DIR/第8章-视频数据采集/README.md" << 'EOF'
---
title: 视频数据采集
icon: video-capture
order: 8
---

# 视频数据采集

本章深入介绍WebRTC的视频数据采集机制和实现。
EOF

# 创建8.1视频采集概述文件
cat > "$BASE_DIR/第8章-视频数据采集/8.1-视频采集概述.md" << 'EOF'
---
title: 视频采集概述
icon: video-overview
order: 1
---

# 视频采集概述

## 基本概念
- 采集原理
- 数据格式
- 采集流程
- 处理机制
- 性能要求

## 核心功能
- 设备管理
- 数据采集
- 格式处理
- 性能优化
- 错误处理

## 实现机制
- 采集流程
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 采集策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.2DirectShow基础知识文件
cat > "$BASE_DIR/第8章-视频数据采集/8.2-DirectShow基础知识.md" << 'EOF'
---
title: DirectShow基础知识
icon: directshow-basics
order: 2
---

# DirectShow基础知识

## 基本概念
- 架构设计
- 组件模型
- 过滤器图
- 媒体类型
- 同步机制

## 核心组件
- 过滤器
- 接口定义
- 数据流转
- 状态管理
- 错误处理

## 实现机制
- 组件通信
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.3WebRTC视频采集整体架构文件
cat > "$BASE_DIR/第8章-视频数据采集/8.3-WebRTC视频采集整体架构.md" << 'EOF'
---
title: WebRTC视频采集整体架构
icon: video-arch
order: 3
---

# WebRTC视频采集整体架构

## 架构设计
- 系统架构
- 模块划分
- 接口定义
- 数据流转
- 资源管理

## 核心组件
- 采集模块
- 处理模块
- 传输模块
- 控制模块
- 管理模块

## 实现机制
- 组件通信
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建8.4视频处理流程的建立文件
cat > "$BASE_DIR/第8章-视频数据采集/8.4-视频处理流程的建立.md" << 'EOF'
---
title: 视频处理流程的建立
icon: video-process
order: 4
---

# 视频处理流程的建立

## 流程设计
- 初始化准备
- 数据采集
- 处理流程
- 传输控制
- 资源管理

## 核心步骤
- 流程配置
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 实现细节
- 流程实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.5源码分析-视频处理流程的建立文件
cat > "$BASE_DIR/第8章-视频数据采集/8.5-源码分析-视频处理流程的建立.md" << 'EOF'
---
title: 源码分析-视频处理流程的建立
icon: video-process-analysis
order: 5
---

# 源码分析-视频处理流程的建立

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 流程建立
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建8.6构造设备信息对象文件
cat > "$BASE_DIR/第8章-视频数据采集/8.6-构造设备信息对象.md" << 'EOF'
---
title: 构造设备信息对象
icon: device-info
order: 6
---

# 构造设备信息对象

## 构造流程
- 参数准备
- 对象创建
- 属性设置
- 状态初始化
- 错误处理

## 核心功能
- 信息收集
- 数据组织
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 构造实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.7获音视频设备信息基础知识文件
cat > "$BASE_DIR/第8章-视频数据采集/8.7-获音视频设备信息基础知识.md" << 'EOF'
---
title: 获音视频设备信息基础知识
icon: device-info-basics
order: 7
---

# 获音视频设备信息基础知识

## 基本概念
- 设备类型
- 信息结构
- 获取方式
- 处理流程
- 注意事项

## 核心功能
- 设备枚举
- 信息收集
- 数据处理
- 状态管理
- 错误处理

## 实现机制
- 获取流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.8源码分析-获取视频设备信息文件
cat > "$BASE_DIR/第8章-视频数据采集/8.8-源码分析-获取视频设备信息.md" << 'EOF'
---
title: 源码分析-获取视频设备信息
icon: video-device-info
order: 8
---

# 源码分析-获取视频设备信息

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 获取流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建8.9创建并初始化VideoCapture文件
cat > "$BASE_DIR/第8章-视频数据采集/8.9-创建并初始化VideoCapture.md" << 'EOF'
---
title: 创建并初始化VideoCapture
icon: video-capture-init
order: 9
---

# 创建并初始化VideoCapture

## 创建流程
- 参数准备
- 对象创建
- 初始化配置
- 状态设置
- 错误处理

## 核心功能
- 采集配置
- 参数设置
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.10源码分析-构造并初始化VideoCapture文件
cat > "$BASE_DIR/第8章-视频数据采集/8.10-源码分析-构造并初始化VideoCapture.md" << 'EOF'
---
title: 源码分析-构造并初始化VideoCapture
icon: video-capture-analysis
order: 10
---

# 源码分析-构造并初始化VideoCapture

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 构造流程
- 初始化过程
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建8.11获取CaptureFilter文件
cat > "$BASE_DIR/第8章-视频数据采集/8.11-获取CaptureFilter.md" << 'EOF'
---
title: 获取CaptureFilter
icon: capture-filter
order: 11
---

# 获取CaptureFilter

## 获取流程
- 参数准备
- 过滤器创建
- 配置设置
- 状态初始化
- 错误处理

## 核心功能
- 过滤器管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.12获取CaptureFilter的输出Pin文件
cat > "$BASE_DIR/第8章-视频数据采集/8.12-获取CaptureFilter的输出Pin.md" << 'EOF'
---
title: 获取CaptureFilter的输出Pin
icon: output-pin
order: 12
---

# 获取CaptureFilter的输出Pin

## 获取流程
- Pin查找
- 参数验证
- 状态检查
- 错误处理
- 资源管理

## 核心功能
- Pin管理
- 接口访问
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.13构造SinkFilter文件
cat > "$BASE_DIR/第8章-视频数据采集/8.13-构造SinkFilter.md" << 'EOF'
---
title: 构造SinkFilter
icon: sink-filter
order: 13
---

# 构造SinkFilter

## 构造流程
- 参数准备
- 对象创建
- 配置设置
- 状态初始化
- 错误处理

## 核心功能
- 过滤器管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 构造实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.14源码分析-SinkFilter的构造文件
cat > "$BASE_DIR/第8章-视频数据采集/8.14-源码分析-SinkFilter的构造.md" << 'EOF'
---
title: 源码分析-SinkFilter的构造
icon: sink-filter-analysis
order: 14
---

# 源码分析-SinkFilter的构造

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 构造流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建8.15获取SinkFilter的输入Pin文件
cat > "$BASE_DIR/第8章-视频数据采集/8.15-获取SinkFilter的输入Pin.md" << 'EOF'
---
title: 获取SinkFilter的输入Pin
icon: input-pin
order: 15
---

# 获取SinkFilter的输入Pin

## 获取流程
- Pin查找
- 参数验证
- 状态检查
- 错误处理
- 资源管理

## 核心功能
- Pin管理
- 接口访问
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.16Filter之间的连接文件
cat > "$BASE_DIR/第8章-视频数据采集/8.16-Filter之间的连接.md" << 'EOF'
---
title: Filter之间的连接
icon: filter-connection
order: 16
---

# Filter之间的连接

## 连接流程
- 参数准备
- 接口验证
- 连接建立
- 状态管理
- 错误处理

## 核心功能
- 连接管理
- 数据传输
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 连接实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.17SetCameraOutput文件
cat > "$BASE_DIR/第8章-视频数据采集/8.17-SetCameraOutput.md" << 'EOF'
---
title: SetCameraOutput
icon: camera-output
order: 17
---

# SetCameraOutput

## 设置流程
- 参数配置
- 输出设置
- 状态更新
- 错误处理
- 资源管理

## 核心功能
- 输出控制
- 参数设置
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 设置实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建8.18源码分析-连接Filter（一）文件
cat > "$BASE_DIR/第8章-视频数据采集/8.18-源码分析-连接Filter（一）.md" << 'EOF'
---
title: 源码分析-连接Filter（一）
icon: filter-connection-analysis
order: 18
---

# 源码分析-连接Filter（一）

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 连接流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.19源码分析-连接Filter（二）文件
cat > "$BASE_DIR/第8章-视频数据采集/8.19-源码分析-连接Filter（二）.md" << 'EOF'
---
title: 源码分析-连接Filter（二）
icon: filter-connection-analysis-2
order: 19
---

# 源码分析-连接Filter（二）

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 连接流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建8.20输出采集后的视频数据文件
cat > "$BASE_DIR/第8章-视频数据采集/8.20-输出采集后的视频数据.md" << 'EOF'
---
title: 输出采集后的视频数据
icon: video-output
order: 20
---

# 输出采集后的视频数据

## 输出流程
- 数据准备
- 格式转换
- 输出控制
- 状态管理
- 错误处理

## 核心功能
- 数据处理
- 格式管理
- 输出控制
- 资源管理
- 错误处理

## 实现细节
- 输出实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建第9章目录
mkdir -p "$BASE_DIR/第9章-音频引擎（音频编解码）"

# 创建第9章README文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/README.md" << 'EOF'
---
title: 音频引擎（音频编解码）
icon: audio-engine
order: 9
---

# 音频引擎（音频编解码）

本章深入介绍WebRTC的音频引擎架构和实现机制。
EOF

# 创建9.1音频引擎章节概述文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.1-音频引擎章节概述.md" << 'EOF'
---
title: 音频引擎章节概述
icon: audio-engine-overview
order: 1
---

# 音频引擎章节概述

## 基本概念
- 引擎定义
- 功能特点
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 编码处理
- 解码处理
- 数据管理
- 状态控制
- 资源管理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 技术特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建9.2音频引擎架构文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.2-音频引擎架构.md" << 'EOF'
---
title: 音频引擎架构
icon: audio-engine-arch
order: 2
---

# 音频引擎架构

## 架构设计
- 系统架构
- 模块划分
- 接口定义
- 数据流转
- 资源管理

## 核心组件
- 编码模块
- 解码模块
- 处理模块
- 控制模块
- 管理模块

## 实现机制
- 组件通信
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建9.3创建音频引擎文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.3-创建音频引擎.md" << 'EOF'
---
title: 创建音频引擎
icon: create-audio-engine
order: 3
---

# 创建音频引擎

## 创建流程
- 参数准备
- 引擎初始化
- 资源分配
- 状态设置
- 错误处理

## 核心功能
- 引擎管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建9.4音频初始化之编解码器的收集文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.4-音频初始化之编解码器的收集.md" << 'EOF'
---
title: 音频初始化之编解码器的收集
icon: codec-collection
order: 4
---

# 音频初始化之编解码器的收集

## 收集流程
- 编解码器枚举
- 参数验证
- 能力检测
- 状态管理
- 错误处理

## 核心功能
- 编码器管理
- 解码器管理
- 参数配置
- 资源控制
- 错误处理

## 实现细节
- 收集实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建9.5音频初始化之AudioState对象的创建文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.5-音频初始化之AudioState对象的创建.md" << 'EOF'
---
title: 音频初始化之AudioState对象的创建
icon: audio-state-creation
order: 5
---

# 音频初始化之AudioState对象的创建

## 创建流程
- 参数准备
- 对象初始化
- 状态设置
- 资源分配
- 错误处理

## 核心功能
- 状态管理
- 参数配置
- 资源控制
- 错误处理
- 性能优化

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建9.6音频引擎初始化之获取音频数据文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.6-音频引擎初始化之获取音频数据.md" << 'EOF'
---
title: 音频引擎初始化之获取音频数据
icon: audio-data-fetch
order: 6
---

# 音频引擎初始化之获取音频数据

## 获取流程
- 数据准备
- 格式验证
- 数据读取
- 状态管理
- 错误处理

## 核心功能
- 数据管理
- 格式处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建9.7Channel-Stream与编解码器文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.7-Channel-Stream与编解码器.md" << 'EOF'
---
title: Channel-Stream与编解码器
icon: channel-codec
order: 7
---

# Channel-Stream与编解码器

## 基本概念
- Channel定义
- Stream定义
- 编解码关系
- 数据流转
- 状态管理

## 核心功能
- 通道管理
- 流处理
- 编解码控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据转换
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建9.8创建音频编码器之一文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.8-创建音频编码器之一.md" << 'EOF'
---
title: 创建音频编码器之一
icon: audio-encoder-1
order: 8
---

# 创建音频编码器之一

## 创建流程
- 参数准备
- 编码器初始化
- 资源分配
- 状态设置
- 错误处理

## 核心功能
- 编码器管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建9.9创建Opus编码器文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.9-创建Opus编码器.md" << 'EOF'
---
title: 创建Opus编码器
icon: opus-encoder
order: 9
---

# 创建Opus编码器

## 创建流程
- 参数准备
- 编码器初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 编码器管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建9.10音频编码文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.10-音频编码.md" << 'EOF'
---
title: 音频编码
icon: audio-encoding
order: 10
---

# 音频编码

## 编码流程
- 数据准备
- 参数设置
- 编码处理
- 状态管理
- 错误处理

## 核心功能
- 编码控制
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 编码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建9.11音频解码器的创建文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.11-音频解码器的创建.md" << 'EOF'
---
title: 音频解码器的创建
icon: audio-decoder
order: 11
---

# 音频解码器的创建

## 创建流程
- 参数准备
- 解码器初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 解码器管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建9.12音频解码文件
cat > "$BASE_DIR/第9章-音频引擎（音频编解码）/9.12-音频解码.md" << 'EOF'
---
title: 音频解码
icon: audio-decoding
order: 12
---

# 音频解码

## 解码流程
- 数据准备
- 参数设置
- 解码处理
- 状态管理
- 错误处理

## 核心功能
- 解码控制
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 解码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建第10章目录
mkdir -p "$BASE_DIR/第10章-视频引擎（视频编解码）"

# 创建第10章README文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/README.md" << 'EOF'
---
title: 视频引擎（视频编解码）
icon: video-engine
order: 10
---

# 视频引擎（视频编解码）

本章深入介绍WebRTC的视频引擎架构和实现机制。
EOF

# 创建10.1视频引擎章节概述文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.1-视频引擎章节概述.md" << 'EOF'
---
title: 视频引擎章节概述
icon: video-engine-overview
order: 1
---

# 视频引擎章节概述

## 基本概念
- 引擎定义
- 功能特点
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 编码处理
- 解码处理
- 数据管理
- 状态控制
- 资源管理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 技术特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建10.2视频数据采集的时间文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.2-视频数据采集的时间.md" << 'EOF'
---
title: 视频数据采集的时间
icon: video-capture-timing
order: 2
---

# 视频数据采集的时间

## 时间管理
- 采集周期
- 时间戳
- 同步机制
- 延迟控制
- 性能优化

## 核心功能
- 时间控制
- 数据同步
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 时间实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.3视频分发器VideoBroadcaster文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.3-视频分发器VideoBroadcaster.md" << 'EOF'
---
title: 视频分发器VideoBroadcaster
icon: video-broadcaster
order: 3
---

# 视频分发器VideoBroadcaster

## 基本概念
- 分发器定义
- 功能特点
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 数据分发
- 流量控制
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 分发流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建10.4视频数据是如何进入视频分发器的文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.4-视频数据是如何进入视频分发器的.md" << 'EOF'
---
title: 视频数据是如何进入视频分发器的
icon: video-data-flow
order: 4
---

# 视频数据是如何进入视频分发器的

## 数据流程
- 数据源
- 传输路径
- 处理流程
- 分发机制
- 状态管理

## 核心功能
- 数据接收
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 流程实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.5视频引擎及其作用文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.5-视频引擎及其作用.md" << 'EOF'
---
title: 视频引擎及其作用
icon: video-engine-role
order: 5
---

# 视频引擎及其作用

## 基本概念
- 引擎定义
- 核心功能
- 工作原理
- 应用场景
- 技术特点

## 主要作用
- 数据处理
- 编解码控制
- 流程管理
- 资源控制
- 性能优化

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 技术特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建10.6视频编码器的创建与视频编码流程文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.6-视频编码器的创建与视频编码流程.md" << 'EOF'
---
title: 视频编码器的创建与视频编码流程
icon: video-encoder-process
order: 6
---

# 视频编码器的创建与视频编码流程

## 创建流程
- 参数准备
- 编码器初始化
- 配置设置
- 状态管理
- 错误处理

## 编码流程
- 数据准备
- 编码处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 流程实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.7VideoStreamEncoder的创建文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.7-VideoStreamEncoder的创建.md" << 'EOF'
---
title: VideoStreamEncoder的创建
icon: video-stream-encoder
order: 7
---

# VideoStreamEncoder的创建

## 创建流程
- 参数准备
- 对象初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 编码控制
- 参数配置
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.8获取编解码器参数文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.8-获取编解码器参数.md" << 'EOF'
---
title: 获取编解码器参数
icon: codec-params
order: 8
---

# 获取编解码器参数

## 获取流程
- 参数定义
- 参数收集
- 参数验证
- 状态管理
- 错误处理

## 核心功能
- 参数管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.9应用视频编码参数文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.9-应用视频编码参数.md" << 'EOF'
---
title: 应用视频编码参数
icon: apply-codec-params
order: 9
---

# 应用视频编码参数

## 应用流程
- 参数验证
- 参数设置
- 状态更新
- 资源管理
- 错误处理

## 核心功能
- 参数应用
- 状态控制
- 资源管理
- 错误处理
- 性能优化

## 实现细节
- 应用实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.10创建WebRtcVideoSendStream的时机文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.10-创建WebRtcVideoSendStream的时机.md" << 'EOF'
---
title: 创建WebRtcVideoSendStream的时机
icon: video-send-stream
order: 10
---

# 创建WebRtcVideoSendStream的时机

## 创建时机
- 触发条件
- 前置准备
- 时序控制
- 状态检查
- 资源验证

## 核心功能
- 时机控制
- 状态管理
- 资源控制
- 错误处理
- 性能优化

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建10.11创建内部VideoSendStream文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.11-创建内部VideoSendStream.md" << 'EOF'
---
title: 创建内部VideoSendStream
icon: video-send-stream-internal
order: 11
---

# 创建内部VideoSendStream

## 创建流程
- 参数准备
- 对象初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 流管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.12VP8编码器的创建及编码文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.12-VP8编码器的创建及编码.md" << 'EOF'
---
title: VP8编码器的创建及编码
icon: vp8-encoder
order: 12
---

# VP8编码器的创建及编码

## 创建流程
- 参数准备
- 编码器初始化
- 配置设置
- 状态管理
- 错误处理

## 编码流程
- 数据准备
- 编码处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 流程实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.13应用视频解码器参数文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.13-应用视频解码器参数.md" << 'EOF'
---
title: 应用视频解码器参数
icon: decoder-params
order: 13
---

# 应用视频解码器参数

## 应用流程
- 参数验证
- 参数设置
- 状态更新
- 资源管理
- 错误处理

## 核心功能
- 参数应用
- 状态控制
- 资源管理
- 错误处理
- 性能优化

## 实现细节
- 应用实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.14编解码器CodecID的设置文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.14-编解码器CodecID的设置.md" << 'EOF'
---
title: 编解码器CodecID的设置
icon: codec-id
order: 14
---

# 编解码器CodecID的设置

## 设置流程
- ID定义
- 参数验证
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- ID管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 设置实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.15SessionDescription文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.15-SessionDescription.md" << 'EOF'
---
title: SessionDescription
icon: session-desc
order: 15
---

# SessionDescription

## 基本概念
- 定义说明
- 功能特点
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 会话描述
- 参数管理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.16创建WebRtcVideoReceiveStream文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.16-创建WebRtcVideoReceiveStream.md" << 'EOF'
---
title: 创建WebRtcVideoReceiveStream
icon: video-receive-stream
order: 16
---

# 创建WebRtcVideoReceiveStream

## 创建流程
- 参数准备
- 对象初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 流管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建10.17创建解码器及初始化文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.17-创建解码器及初始化.md" << 'EOF'
---
title: 创建解码器及初始化
icon: decoder-init
order: 17
---

# 创建解码器及初始化

## 创建流程
- 参数准备
- 解码器初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 解码器管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建10.18视频解码文件
cat > "$BASE_DIR/第10章-视频引擎（视频编解码）/10.18-视频解码.md" << 'EOF'
---
title: 视频解码
icon: video-decoding
order: 18
---

# 视频解码

## 解码流程
- 数据准备
- 参数设置
- 解码处理
- 状态管理
- 错误处理

## 核心功能
- 解码控制
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 解码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建第11章目录
mkdir -p "$BASE_DIR/第11章-深入理解WebRTC网络传输"

# 创建第11章README文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/README.md" << 'EOF'
---
title: 深入理解WebRTC网络传输
icon: network-transport
order: 11
---

# 深入理解WebRTC网络传输

本章深入介绍WebRTC的网络传输机制和实现原理。
EOF

# 创建11.1深入理解WebRTC网络传输-概述文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.1-深入理解WebRTC网络传输-概述.md" << 'EOF'
---
title: 深入理解WebRTC网络传输-概述
icon: network-overview
order: 1
---

# 深入理解WebRTC网络传输-概述

## 基本概念
- 传输原理
- 网络协议
- 传输机制
- 应用场景
- 技术特点

## 核心功能
- 数据传输
- 网络管理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 传输流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 技术特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建11.2网络设备管理文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.2-网络设备管理.md" << 'EOF'
---
title: 网络设备管理
icon: network-device
order: 2
---

# 网络设备管理

## 管理流程
- 设备发现
- 设备配置
- 状态监控
- 资源管理
- 错误处理

## 核心功能
- 设备控制
- 参数配置
- 状态管理
- 资源管理
- 错误处理

## 实现细节
- 管理实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.3读取网卡信息的重要API文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.3-读取网卡信息的重要API.md" << 'EOF'
---
title: 读取网卡信息的重要API
icon: network-api
order: 3
---

# 读取网卡信息的重要API

## API概述
- 接口分类
- 功能特点
- 使用场景
- 调用方式
- 注意事项

## 核心接口
- 信息读取
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 接口实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.4源码分析-CreateNetworks文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.4-源码分析-CreateNetworks.md" << 'EOF'
---
title: 源码分析-CreateNetworks
icon: create-networks
order: 4
---

# 源码分析-CreateNetworks

## 代码结构
- 类设计
- 接口定义
- 参数配置
- 状态管理
- 资源控制

## 核心实现
- 创建流程
- 数据处理
- 状态维护
- 错误处理
- 资源管理

## 关键流程
- 调用过程
- 数据处理
- 状态更新
- 错误恢复
- 资源释放

## 设计特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.5获得本地默认IP地址和端口文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.5-获得本地默认IP地址和端口.md" << 'EOF'
---
title: 获得本地默认IP地址和端口
icon: local-address
order: 5
---

# 获得本地默认IP地址和端口

## 获取流程
- 地址查询
- 端口分配
- 参数验证
- 状态管理
- 错误处理

## 核心功能
- 地址管理
- 端口管理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.6获得本地默认IP地址文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.6-获得本地默认IP地址.md" << 'EOF'
---
title: 获得本地默认IP地址
icon: default-ip
order: 6
---

# 获得本地默认IP地址

## 获取流程
- 地址查询
- 参数验证
- 状态检查
- 错误处理
- 资源管理

## 核心功能
- 地址管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.7ICE文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.7-ICE.md" << 'EOF'
---
title: ICE
icon: ice-protocol
order: 7
---

# ICE

## 基本概念
- ICE定义
- 工作原理
- 协议特点
- 应用场景
- 技术特点

## 核心功能
- 连接建立
- 穿透处理
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.8Candidate文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.8-Candidate.md" << 'EOF'
---
title: Candidate
icon: ice-candidate
order: 8
---

# Candidate

## 基本概念
- 候选项定义
- 类型分类
- 优先级机制
- 应用场景
- 技术特点

## 核心功能
- 候选项管理
- 优先级处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.9创建PortAllocator文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.9-创建PortAllocator.md" << 'EOF'
---
title: 创建PortAllocator
icon: port-allocator
order: 9
---

# 创建PortAllocator

## 创建流程
- 参数准备
- 对象初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 端口分配
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.10创建PortAllocatorSession文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.10-创建PortAllocatorSession.md" << 'EOF'
---
title: 创建PortAllocatorSession
icon: port-allocator-session
order: 10
---

# 创建PortAllocatorSession

## 创建流程
- 参数准备
- 会话初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 会话管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.11创建AllocationSequence文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.11-创建AllocationSequence.md" << 'EOF'
---
title: 创建AllocationSequence
icon: allocation-sequence
order: 11
---

# 创建AllocationSequence

## 创建流程
- 参数准备
- 序列初始化
- 配置设置
- 状态管理
- 错误处理

## 核心功能
- 序列管理
- 参数配置
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.12收集Candidate文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.12-收集Candidate.md" << 'EOF'
---
title: 收集Candidate
icon: collect-candidate
order: 12
---

# 收集Candidate

## 收集流程
- 候选项发现
- 优先级计算
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 候选项管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 收集实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.13获得本地Candidate文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.13-获得本地Candidate.md" << 'EOF'
---
title: 获得本地Candidate
icon: local-candidate
order: 13
---

# 获得本地Candidate

## 获取流程
- 本地发现
- 参数验证
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 候选项管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 获取实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.14STUN协议文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.14-STUN协议.md" << 'EOF'
---
title: STUN协议
icon: stun-protocol
order: 14
---

# STUN协议

## 基本概念
- 协议定义
- 工作原理
- 协议特点
- 应用场景
- 技术特点

## 核心功能
- 地址发现
- 消息处理
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.15发送StunBindingRequest消息文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.15-发送StunBindingRequest消息.md" << 'EOF'
---
title: 发送StunBindingRequest消息
icon: stun-binding
order: 15
---

# 发送StunBindingRequest消息

## 发送流程
- 消息构建
- 参数设置
- 发送控制
- 状态管理
- 错误处理

## 核心功能
- 消息管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 发送实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.16收集Srflx类型的Candidate文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.16-收集Srflx类型的Candidate.md" << 'EOF'
---
title: 收集Srflx类型的Candidate
icon: srflx-candidate
order: 16
---

# 收集Srflx类型的Candidate

## 收集流程
- 候选项发现
- 类型验证
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 候选项管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 收集实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.17TURN协议基本原理文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.17-TURN协议基本原理.md" << 'EOF'
---
title: TURN协议基本原理
icon: turn-protocol
order: 17
---

# TURN协议基本原理

## 基本概念
- 协议定义
- 工作原理
- 协议特点
- 应用场景
- 技术特点

## 核心功能
- 中继传输
- 会话管理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.18TurnClient与TurnServer的连接过程文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.18-TurnClient与TurnServer的连接过程.md" << 'EOF'
---
title: TurnClient与TurnServer的连接过程
icon: turn-connection
order: 18
---

# TurnClient与TurnServer的连接过程

## 连接流程
- 初始化准备
- 认证过程
- 连接建立
- 状态管理
- 错误处理

## 核心功能
- 连接管理
- 数据传输
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 连接实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.19Turn协议数据传输机制文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.19-Turn协议数据传输机制.md" << 'EOF'
---
title: Turn协议数据传输机制
icon: turn-transport
order: 19
---

# Turn协议数据传输机制

## 传输原理
- 数据流向
- 传输模式
- 协议特点
- 应用场景
- 技术特点

## 核心功能
- 数据传输
- 流量控制
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 传输流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.20收集Turn类型Candidate（一）文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.20-收集Turn类型Candidate（一）.md" << 'EOF'
---
title: 收集Turn类型Candidate（一）
icon: turn-candidate-1
order: 20
---

# 收集Turn类型Candidate（一）

## 收集流程
- 候选项发现
- 类型验证
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 候选项管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 收集实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.21收集Turn类型Candidate（二）文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.21-收集Turn类型Candidate（二）.md" << 'EOF'
---
title: 收集Turn类型Candidate（二）
icon: turn-candidate-2
order: 21
---

# 收集Turn类型Candidate（二）

## 收集流程
- 高级特性
- 优化策略
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 候选项管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 收集实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.22收集TCP类型的Candidate文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.22-收集TCP类型的Candidate.md" << 'EOF'
---
title: 收集TCP类型的Candidate
icon: tcp-candidate
order: 22
---

# 收集TCP类型的Candidate

## 收集流程
- TCP特性
- 候选项发现
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 候选项管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 收集实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.23将获得的Candidate上抛给应用层文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.23-将获得的Candidate上抛给应用层.md" << 'EOF'
---
title: 将获得的Candidate上抛给应用层
icon: candidate-notify
order: 23
---

# 将获得的Candidate上抛给应用层

## 上抛流程
- 数据准备
- 接口调用
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 数据传递
- 事件通知
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 上抛实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.24WebRTC网络连接的建立文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.24-WebRTC网络连接的建立.md" << 'EOF'
---
title: WebRTC网络连接的建立
icon: network-connection
order: 24
---

# WebRTC网络连接的建立

## 建立流程
- 连接准备
- 协商过程
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 连接管理
- 数据传输
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 建立实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.25Connection排序文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.25-Connection排序.md" << 'EOF'
---
title: Connection排序
icon: connection-sort
order: 25
---

# Connection排序

## 排序机制
- 排序规则
- 优先级计算
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 排序管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 排序实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.26选择Connection文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.26-选择Connection.md" << 'EOF'
---
title: 选择Connection
icon: connection-select
order: 26
---

# 选择Connection

## 选择流程
- 筛选条件
- 优先级评估
- 状态验证
- 资源检查
- 错误处理

## 核心功能
- 连接选择
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 选择实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.27Connection的裁剪文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.27-Connection的裁剪.md" << 'EOF'
---
title: Connection的裁剪
icon: connection-prune
order: 27
---

# Connection的裁剪

## 裁剪流程
- 条件判断
- 资源释放
- 状态更新
- 优化处理
- 错误处理

## 核心功能
- 裁剪管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 裁剪实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.28ICE提名文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.28-ICE提名.md" << 'EOF'
---
title: ICE提名
icon: ice-nomination
order: 28
---

# ICE提名

## 提名流程
- 候选评估
- 优先级计算
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 提名管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 提名实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.29ICE-FULL与ICE-LITE文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.29-ICE-FULL与ICE-LITE.md" << 'EOF'
---
title: ICE-FULL与ICE-LITE
icon: ice-modes
order: 29
---

# ICE-FULL与ICE-LITE

## 基本概念
- 模式定义
- 特点对比
- 应用场景
- 实现差异
- 选择建议

## 核心功能
- 模式管理
- 功能实现
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.30连通性检测文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.30-连通性检测.md" << 'EOF'
---
title: 连通性检测
icon: connectivity-check
order: 30
---

# 连通性检测

## 检测流程
- 测试准备
- 检测执行
- 结果分析
- 状态更新
- 错误处理

## 核心功能
- 检测管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 检测实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建11.31网络传输对象的创建与数据传输文件
cat > "$BASE_DIR/第11章-深入理解WebRTC网络传输/11.31-网络传输对象的创建与数据传输.md" << 'EOF'
---
title: 网络传输对象的创建与数据传输
icon: network-transport-object
order: 31
---

# 网络传输对象的创建与数据传输

## 创建流程
- 对象初始化
- 参数配置
- 连接建立
- 状态管理
- 错误处理

## 传输机制
- 数据发送
- 数据接收
- 流量控制
- 资源管理
- 错误处理

## 实现细节
- 传输实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第12章目录
mkdir -p "$BASE_DIR/第12章-WebRTC服务质量（QoS）"

# 创建第12章README文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/README.md" << 'EOF'
---
title: WebRTC服务质量（QoS）
icon: webrtc-qos
order: 12
---

# WebRTC服务质量（QoS）

本章深入介绍WebRTC的服务质量保障机制和实现原理。
EOF

# 创建12.1WebRTC服务质量概述文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.1-WebRTC服务质量概述.md" << 'EOF'
---
title: WebRTC服务质量概述
icon: qos-overview
order: 1
---

# WebRTC服务质量概述

## 基本概念
- QoS定义
- 服务指标
- 质量评估
- 应用场景
- 技术特点

## 核心功能
- 质量控制
- 数据监控
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 控制流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 技术特点
- 架构特点
- 扩展性
- 维护性
- 性能考虑
- 安全机制
EOF

# 创建12.2WebRTC服务质量综述文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.2-WebRTC服务质量综述.md" << 'EOF'
---
title: WebRTC服务质量综述
icon: qos-summary
order: 2
---

# WebRTC服务质量综述

## 质量体系
- 评估指标
- 控制策略
- 优化方法
- 监控机制
- 反馈系统

## 核心功能
- 质量保障
- 数据分析
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 控制流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.3RTP协议文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.3-RTP协议.md" << 'EOF'
---
title: RTP协议
icon: rtp-protocol
order: 3
---

# RTP协议

## 基本概念
- 协议定义
- 工作原理
- 协议特点
- 应用场景
- 技术特点

## 核心功能
- 数据传输
- 时序控制
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 传输流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.4RTP扩展头文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.4-RTP扩展头.md" << 'EOF'
---
title: RTP扩展头
icon: rtp-extension
order: 4
---

# RTP扩展头

## 基本概念
- 扩展定义
- 功能特点
- 应用场景
- 格式规范
- 技术特点

## 核心功能
- 扩展管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.5RTCP协议一文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.5-RTCP协议一.md" << 'EOF'
---
title: RTCP协议一
icon: rtcp-protocol-1
order: 5
---

# RTCP协议一

## 基本概念
- 协议定义
- 工作原理
- 协议特点
- 应用场景
- 技术特点

## 核心功能
- 控制管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.6RTCP协议二-SDES作用和报文格式文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.6-RTCP协议二-SDES作用和报文格式.md" << 'EOF'
---
title: RTCP协议二-SDES作用和报文格式
icon: rtcp-protocol-2
order: 6
---

# RTCP协议二-SDES作用和报文格式

## SDES概述
- 定义说明
- 功能作用
- 应用场景
- 技术特点
- 实现机制

## 报文格式
- 格式定义
- 字段说明
- 数据结构
- 编码规范
- 解析规则

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.7RTCP协议三-其他类型的RTCP报文文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.7-RTCP协议三-其他类型的RTCP报文.md" << 'EOF'
---
title: RTCP协议三-其他类型的RTCP报文
icon: rtcp-protocol-3
order: 7
---

# RTCP协议三-其他类型的RTCP报文

## 报文类型
- 类型定义
- 功能特点
- 应用场景
- 格式规范
- 处理机制

## 核心功能
- 报文管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.8RTCP协议四-CompoundRTCP文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.8-RTCP协议四-CompoundRTCP.md" << 'EOF'
---
title: RTCP协议四-CompoundRTCP
icon: rtcp-protocol-4
order: 8
---

# RTCP协议四-CompoundRTCP

## 基本概念
- 复合定义
- 组成结构
- 功能特点
- 应用场景
- 技术特点

## 核心功能
- 复合管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.9丢包重传NACK与RTX文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.9-丢包重传NACK与RTX.md" << 'EOF'
---
title: 丢包重传NACK与RTX
icon: nack-rtx
order: 9
---

# 丢包重传NACK与RTX

## 基本概念
- NACK定义
- RTX定义
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 丢包检测
- 重传控制
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.10判断包位置的关键算法文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.10-判断包位置的关键算法.md" << 'EOF'
---
title: 判断包位置的关键算法
icon: packet-position
order: 10
---

# 判断包位置的关键算法

## 算法原理
- 位置判断
- 计算方法
- 边界处理
- 优化策略
- 性能考虑

## 核心功能
- 位置计算
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 算法实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.11WebRTC中NACK的处理流程文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.11-WebRTC中NACK的处理流程.md" << 'EOF'
---
title: WebRTC中NACK的处理流程
icon: nack-process
order: 11
---

# WebRTC中NACK的处理流程

## 处理流程
- 流程定义
- 步骤说明
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- NACK处理
- 数据管理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 流程实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.12判断是否丢包的逻辑文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.12-判断是否丢包的逻辑.md" << 'EOF'
---
title: 判断是否丢包的逻辑
icon: packet-loss-logic
order: 12
---

# 判断是否丢包的逻辑

## 判断流程
- 逻辑定义
- 判断条件
- 处理方法
- 边界情况
- 错误处理

## 核心功能
- 丢包判断
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 逻辑实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.13找到真正的丢包文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.13-找到真正的丢包.md" << 'EOF'
---
title: 找到真正的丢包
icon: real-packet-loss
order: 13
---

# 找到真正的丢包

## 查找流程
- 定位方法
- 判断标准
- 处理策略
- 验证机制
- 错误处理

## 核心功能
- 丢包定位
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 查找实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.14VP8关键帧的判断文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.14-VP8关键帧的判断.md" << 'EOF'
---
title: VP8关键帧的判断
icon: vp8-keyframe
order: 14
---

# VP8关键帧的判断

## 判断机制
- 帧特征
- 判断标准
- 处理方法
- 边界情况
- 错误处理

## 核心功能
- 帧识别
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 判断实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.15NACK格式文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.15-NACK格式.md" << 'EOF'
---
title: NACK格式
icon: nack-format
order: 15
---

# NACK格式

## 格式定义
- 结构说明
- 字段定义
- 格式规范
- 编码规则
- 解析方法

## 核心功能
- 格式处理
- 数据管理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.16WebRTC接收NACK消息的过程文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.16-WebRTC接收NACK消息的过程.md" << 'EOF'
---
title: WebRTC接收NACK消息的过程
icon: nack-receive
order: 16
---

# WebRTC接收NACK消息的过程

## 接收流程
- 消息接收
- 数据解析
- 处理步骤
- 状态管理
- 错误处理

## 核心功能
- 消息处理
- 数据管理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 接收实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.17RTX协议文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.17-RTX协议.md" << 'EOF'
---
title: RTX协议
icon: rtx-protocol
order: 17
---

# RTX协议

## 基本概念
- 协议定义
- 工作原理
- 协议特点
- 应用场景
- 技术特点

## 核心功能
- 重传控制
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.18WebRTC发送RTX包的过程文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.18-WebRTC发送RTX包的过程.md" << 'EOF'
---
title: WebRTC发送RTX包的过程
icon: rtx-send
order: 18
---

# WebRTC发送RTX包的过程

## 发送流程
- 包准备
- 发送控制
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 包管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 发送实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.19Pacer文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.19-Pacer.md" << 'EOF'
---
title: Pacer
icon: pacer
order: 19
---

# Pacer

## 基本概念
- 定义说明
- 工作原理
- 功能特点
- 应用场景
- 技术特点

## 核心功能
- 速率控制
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.20RoundRobinPacketQueue文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.20-RoundRobinPacketQueue.md" << 'EOF'
---
title: RoundRobinPacketQueue
icon: round-robin-queue
order: 20
---

# RoundRobinPacketQueue

## 基本概念
- 队列定义
- 工作原理
- 功能特点
- 应用场景
- 技术特点

## 核心功能
- 队列管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.21IntervalBudget文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.21-IntervalBudget.md" << 'EOF'
---
title: IntervalBudget
icon: interval-budget
order: 21
---

# IntervalBudget

## 基本概念
- 预算定义
- 工作原理
- 功能特点
- 应用场景
- 技术特点

## 核心功能
- 预算管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.22向Pacer中插入数据文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.22-向Pacer中插入数据.md" << 'EOF'
---
title: 向Pacer中插入数据
icon: pacer-insert
order: 22
---

# 向Pacer中插入数据

## 插入流程
- 数据准备
- 插入控制
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 数据管理
- 插入处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 插入实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.23JitterBuffer整体架构文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.23-JitterBuffer整体架构.md" << 'EOF'
---
title: JitterBuffer整体架构
icon: jitter-buffer
order: 23
---

# JitterBuffer整体架构

## 架构概述
- 架构设计
- 组件构成
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 缓冲管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.24PacketBuffer的实现文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.24-PacketBuffer的实现.md" << 'EOF'
---
title: PacketBuffer的实现
icon: packet-buffer
order: 24
---

# PacketBuffer的实现

## 实现原理
- 缓冲设计
- 数据结构
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 缓冲管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 缓冲实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.25查找完整的帧文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.25-查找完整的帧.md" << 'EOF'
---
title: 查找完整的帧
icon: frame-search
order: 25
---

# 查找完整的帧

## 查找流程
- 搜索策略
- 判断条件
- 处理方法
- 边界情况
- 错误处理

## 核心功能
- 帧查找
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 查找实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.26ReferenceFinder的作用及创建文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.26-ReferenceFinder的作用及创建.md" << 'EOF'
---
title: ReferenceFinder的作用及创建
icon: reference-finder
order: 26
---

# ReferenceFinder的作用及创建

## 基本概念
- 功能定义
- 工作原理
- 创建流程
- 应用场景
- 技术特点

## 核心功能
- 引用查找
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.27查找参考帧文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.27-查找参考帧.md" << 'EOF'
---
title: 查找参考帧
icon: reference-frame
order: 27
---

# 查找参考帧

## 查找流程
- 搜索策略
- 判断条件
- 处理方法
- 边界情况
- 错误处理

## 核心功能
- 帧查找
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 查找实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.28FrameBuffer文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.28-FrameBuffer.md" << 'EOF'
---
title: FrameBuffer
icon: frame-buffer
order: 28
---

# FrameBuffer

## 基本概念
- 缓冲定义
- 工作原理
- 功能特点
- 应用场景
- 技术特点

## 核心功能
- 帧管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.29FEC基础知识和原理文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.29-FEC基础知识和原理.md" << 'EOF'
---
title: FEC基础知识和原理
icon: fec-basics
order: 29
---

# FEC基础知识和原理

## 基本概念
- FEC定义
- 工作原理
- 技术特点
- 应用场景
- 优势分析

## 核心原理
- 编码机制
- 恢复策略
- 冗余控制
- 效率优化
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.30WebRTC中FEC的创建文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.30-WebRTC中FEC的创建.md" << 'EOF'
---
title: WebRTC中FEC的创建
icon: fec-creation
order: 30
---

# WebRTC中FEC的创建

## 创建流程
- 初始化准备
- 参数配置
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- FEC管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 创建实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.31为媒体包产生冗余数据文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.31-为媒体包产生冗余数据.md" << 'EOF'
---
title: 为媒体包产生冗余数据
icon: media-redundancy
order: 31
---

# 为媒体包产生冗余数据

## 生成流程
- 数据准备
- 冗余计算
- 状态管理
- 资源控制
- 错误处理

## 核心功能
- 冗余管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 生成实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建12.32FEC保护因子的计算文件
cat > "$BASE_DIR/第12章-WebRTC服务质量（QoS）/12.32-FEC保护因子的计算.md" << 'EOF'
---
title: FEC保护因子的计算
icon: fec-protection
order: 32
---

# FEC保护因子的计算

## 计算原理
- 因子定义
- 计算方法
- 影响因素
- 优化策略
- 应用场景

## 核心功能
- 因子管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 计算实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建第13章目录
mkdir -p "$BASE_DIR/第13章-NetEQ"

# 创建第13章README文件
cat > "$BASE_DIR/第13章-NetEQ/README.md" << 'EOF'
---
title: NetEQ
icon: neteq
order: 13
---

# NetEQ

本章深入介绍WebRTC的NetEQ模块，包括其工作原理、实现机制和应用场景。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建13.1NetEq在WebRTC中的位置文件
cat > "$BASE_DIR/第13章-NetEQ/13.1-NetEq在WebRTC中的位置.md" << 'EOF'
---
title: NetEq在WebRTC中的位置
icon: neteq-position
order: 1
---

# NetEq在WebRTC中的位置

## 系统定位
- 功能角色
- 架构位置
- 交互关系
- 重要性分析
- 技术特点

## 核心功能
- 位置管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建13.2抖动消除的基本原理文件
cat > "$BASE_DIR/第13章-NetEQ/13.2-抖动消除的基本原理.md" << 'EOF'
---
title: 抖动消除的基本原理
icon: jitter-removal
order: 2
---

# 抖动消除的基本原理

## 基本概念
- 抖动定义
- 消除原理
- 技术特点
- 应用场景
- 优势分析

## 核心原理
- 消除机制
- 算法策略
- 效果评估
- 优化方法
- 性能考虑

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建13.3NetEq整体架构文件
cat > "$BASE_DIR/第13章-NetEQ/13.3-NetEq整体架构.md" << 'EOF'
---
title: NetEq整体架构
icon: neteq-architecture
order: 3
---

# NetEq整体架构

## 架构概述
- 架构设计
- 组件构成
- 工作原理
- 应用场景
- 技术特点

## 核心功能
- 架构管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建13.4NetEq中的几种缓冲区文件
cat > "$BASE_DIR/第13章-NetEQ/13.4-NetEq中的几种缓冲区.md" << 'EOF'
---
title: NetEq中的几种缓冲区
icon: neteq-buffers
order: 4
---

# NetEq中的几种缓冲区

## 缓冲类型
- 类型定义
- 功能特点
- 应用场景
- 工作原理
- 技术特点

## 核心功能
- 缓冲管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建13.5新版NetEq中的MCU和DSP文件
cat > "$BASE_DIR/第13章-NetEQ/13.5-新版NetEq中的MCU和DSP.md" << 'EOF'
---
title: 新版NetEq中的MCU和DSP
icon: neteq-mcu-dsp
order: 5
---

# 新版NetEq中的MCU和DSP

## 基本概念
- MCU定义
- DSP定义
- 功能特点
- 应用场景
- 技术特点

## 核心功能
- 处理控制
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建第14章目录
mkdir -p "$BASE_DIR/第14章-Simulcast与SVC"

# 创建第14章README文件
cat > "$BASE_DIR/第14章-Simulcast与SVC/README.md" << 'EOF'
---
title: Simulcast与SVC
icon: simulcast-svc
order: 14
---

# Simulcast与SVC

本章深入介绍WebRTC中的Simulcast和SVC技术，包括其原理、实现和应用。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建14.1什么是Simulcast文件
cat > "$BASE_DIR/第14章-Simulcast与SVC/14.1-什么是Simulcast.md" << 'EOF'
---
title: 什么是Simulcast
icon: simulcast-intro
order: 1
---

# 什么是Simulcast

## 基本概念
- 定义说明
- 工作原理
- 技术特点
- 应用场景
- 优势分析

## 核心功能
- 流管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建14.2开启Simulcast的三种方法文件
cat > "$BASE_DIR/第14章-Simulcast与SVC/14.2-开启Simulcast的三种方法.md" << 'EOF'
---
title: 开启Simulcast的三种方法
icon: simulcast-methods
order: 2
---

# 开启Simulcast的三种方法

## 方法概述
- 方法介绍
- 实现原理
- 特点比较
- 适用场景
- 选择建议

## 具体方法
- 方法一
- 方法二
- 方法三
- 优缺点
- 注意事项

## 实现细节
- 开启流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建14.3Simulcast在WebRTC中的实现文件
cat > "$BASE_DIR/第14章-Simulcast与SVC/14.3-Simulcast在WebRTC中的实现.md" << 'EOF'
---
title: Simulcast在WebRTC中的实现
icon: simulcast-implementation
order: 3
---

# Simulcast在WebRTC中的实现

## 实现原理
- 架构设计
- 工作流程
- 技术特点
- 实现方式
- 关键点分析

## 核心功能
- 流管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建14.4什么是SVC文件
cat > "$BASE_DIR/第14章-Simulcast与SVC/14.4-什么是SVC.md" << 'EOF'
---
title: 什么是SVC
icon: svc-intro
order: 4
---

# 什么是SVC

## 基本概念
- 定义说明
- 工作原理
- 技术特点
- 应用场景
- 优势分析

## 核心功能
- 层级管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建14.5WebRTC开启SVC的方式文件
cat > "$BASE_DIR/第14章-Simulcast与SVC/14.5-WebRTC开启SVC的方式.md" << 'EOF'
---
title: WebRTC开启SVC的方式
icon: svc-enable
order: 5
---

# WebRTC开启SVC的方式

## 开启方式
- 方式介绍
- 实现原理
- 配置说明
- 注意事项
- 最佳实践

## 核心功能
- 配置管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 开启流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF

# 创建14.6VP9RTP包结构文件
cat > "$BASE_DIR/第14章-Simulcast与SVC/14.6-VP9RTP包结构.md" << 'EOF'
---
title: VP9RTP包结构
icon: vp9-rtp
order: 6
---

# VP9RTP包结构

## 结构概述
- 包定义
- 结构组成
- 字段说明
- 格式规范
- 技术特点

## 核心功能
- 包管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 监控方案
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第15章目录
mkdir -p "$BASE_DIR/第15章-课程总结"

# 创建第15章README文件
cat > "$BASE_DIR/第15章-课程总结/README.md" << 'EOF'
---
title: 课程总结
icon: summary
order: 15
---

# 课程总结

本章对WebRTC深入剖析课程进行全面总结。
EOF

# 创建15.1WebRTC深入剖析总结文件
cat > "$BASE_DIR/第15章-课程总结/15.1-WebRTC深入剖析总结.md" << 'EOF'
---
title: WebRTC深入剖析总结
icon: webrtc-summary
order: 1
---

# WebRTC深入剖析总结

## 核心知识
- 基础架构
- 网络传输
- 媒体处理
- 服务质量
- 高级特性

## 关键技术
- ICE框架
- NACK/RTX
- NetEQ
- Simulcast
- SVC

## 实践经验
- 最佳实践
- 性能优化
- 问题排查
- 调试技巧
- 运维管理

## 发展趋势
- 技术演进
- 应用场景
- 未来展望
- 发展机遇
- 挑战分析
EOF

# 创建WebRTC流媒体服务器开发课程目录
mkdir -p "$BASE_DIR/WebRTC流媒体服务器开发课程/第1章-课程导学与准备工作"

# 创建WebRTC流媒体服务器开发课程README文件
cat > "$BASE_DIR/WebRTC流媒体服务器开发课程/README.md" << 'EOF'
---
title: WebRTC流媒体服务器开发课程
icon: webrtc-server
order: 1
---

# WebRTC流媒体服务器开发课程

本课程系统讲解WebRTC流媒体服务器的开发技术和实践经验。
EOF

# 创建第1章README文件
cat > "$BASE_DIR/WebRTC流媒体服务器开发课程/第1章-课程导学与准备工作/README.md" << 'EOF'
---
title: 课程导学与准备工作
icon: course-intro
order: 1
---

# 课程导学与准备工作

本章介绍课程整体内容和学习准备工作。
EOF

# 创建1.1课前必读文件
cat > "$BASE_DIR/WebRTC流媒体服务器开发课程/第1章-课程导学与准备工作/1.1-课前必读.md" << 'EOF'
---
title: 课前必读
icon: pre-course
order: 1
---

# 课前必读

## 课程介绍
- 课程目标
- 内容安排
- 学习方法
- 考核要求
- 注意事项

## 前置知识
- 基础要求
- 技能储备
- 工具准备
- 环境配置
- 资源获取

## 学习建议
- 学习方法
- 时间安排
- 重点难点
- 常见问题
- 学习资源

## 课程规划
- 学习路线
- 阶段目标
- 时间节点
- 考核标准
- 应用实践
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建1.2导学文件
cat > "$BASE_DIR/第1章-课程导学与准备工作/1.2-导学.md" << 'EOF'
---
title: 导学
icon: course-guide
order: 2
---

# 导学

## 课程概述
- 课程目标
- 学习路径
- 知识体系
- 技能要求
- 应用场景

## 课程安排
- 内容规划
- 时间分配
- 学习方法
- 实践要求
- 考核标准

## 学习建议
- 学习策略
- 重点难点
- 常见问题
- 资源获取
- 实践指导

## 预期目标
- 知识掌握
- 技能提升
- 项目实践
- 应用能力
- 职业发展
EOF

# 创建第2章目录
mkdir -p "$BASE_DIR/第2章-C++语言基础回顾"

# 创建第2章README文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/README.md" << 'EOF'
---
title: C++语言基础回顾
icon: cpp-basic
order: 2
---

# C++语言基础回顾

本章回顾C++语言的基础知识，为后续WebRTC服务器开发打好基础。
EOF

# 创建2.1C++知识回顾之helloworld文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.1-C++知识回顾之helloworld.md" << 'EOF'
---
title: C++知识回顾之helloworld
icon: cpp-hello
order: 1
---

# C++知识回顾之helloworld

## 基础语法
- 程序结构
- 编译过程
- 运行机制
- 代码规范
- 注意事项

## 开发环境
- 环境配置
- 工具选择
- 编译设置
- 调试方法
- 运行测试

## 实现示例
- 代码结构
- 关键点解析
- 注意事项
- 常见问题
- 最佳实践

## 扩展知识
- 进阶用法
- 优化技巧
- 实践经验
- 应用场景
- 发展方向
EOF

# 创建2.2类的定义和实现文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.2-类的定义和实现.md" << 'EOF'
---
title: 类的定义和实现
icon: cpp-class
order: 2
---

# 类的定义和实现

## 类的基础
- 类的概念
- 成员变量
- 成员函数
- 访问控制
- 封装特性

## 类的实现
- 定义方法
- 实现细节
- 构造函数
- 析构函数
- 继承关系

## 最佳实践
- 设计原则
- 实现技巧
- 优化方法
- 调试方案
- 应用示例

## 注意事项
- 常见问题
- 解决方案
- 性能优化
- 代码规范
- 维护建议
EOF

# 创建2.3类的使用文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.3-类的使用.md" << 'EOF'
---
title: 类的使用
icon: cpp-class-usage
order: 3
---

# 类的使用

## 基本用法
- 对象创建
- 成员访问
- 方法调用
- 生命周期
- 内存管理

## 高级特性
- 继承使用
- 多态应用
- 运算符重载
- 友元函数
- 模板使用

## 实践技巧
- 使用方法
- 优化策略
- 调试技巧
- 性能考虑
- 安全处理

## 应用示例
- 代码示例
- 场景分析
- 实现要点
- 注意事项
- 最佳实践
EOF

# 创建2.4命名空间文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.4-命名空间.md" << 'EOF'
---
title: 命名空间
icon: cpp-namespace
order: 4
---

# 命名空间

## 基本概念
- 定义说明
- 使用方法
- 作用范围
- 命名规则
- 注意事项

## 使用技巧
- 声明方式
- 访问控制
- 嵌套使用
- 别名定义
- 最佳实践

## 实现细节
- 实现方法
- 作用机制
- 冲突处理
- 优化策略
- 性能考虑

## 应用场景
- 实际应用
- 示例分析
- 常见问题
- 解决方案
- 使用建议
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建2.5继承1文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.5-继承1.md" << 'EOF'
---
title: 继承1
icon: cpp-inheritance-1
order: 5
---

# 继承1

## 基本概念
- 继承定义
- 继承类型
- 访问控制
- 继承特性
- 使用场景

## 实现机制
- 继承方式
- 成员继承
- 构造顺序
- 析构顺序
- 内存布局

## 使用技巧
- 继承设计
- 方法重写
- 访问控制
- 虚函数
- 抽象类

## 最佳实践
- 设计原则
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF

# 创建2.6继承2文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.6-继承2.md" << 'EOF'
---
title: 继承2
icon: cpp-inheritance-2
order: 6
---

# 继承2

## 高级特性
- 多重继承
- 虚继承
- 接口继承
- 混合继承
- 继承树

## 实现细节
- 虚表机制
- 内存布局
- 构造顺序
- 析构顺序
- 性能开销

## 常见问题
- 命名冲突
- 菱形继承
- 性能问题
- 内存泄漏
- 设计缺陷

## 最佳实践
- 设计模式
- 优化策略
- 调试方法
- 维护建议
- 实践经验
EOF

# 创建2.7多态文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.7-多态.md" << 'EOF'
---
title: 多态
icon: cpp-polymorphism
order: 7
---

# 多态

## 基本概念
- 多态定义
- 多态类型
- 实现机制
- 使用场景
- 技术特点

## 实现方式
- 虚函数
- 纯虚函数
- 抽象类
- 接口类
- 运行时多态

## 关键技术
- 虚表机制
- 动态绑定
- 类型转换
- 内存管理
- 性能优化

## 最佳实践
- 设计原则
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF

# 创建2.8内存地址空间与指针文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.8-内存地址空间与指针.md" << 'EOF'
---
title: 内存地址空间与指针
icon: cpp-memory
order: 8
---

# 内存地址空间与指针

## 基本概念
- 内存模型
- 地址空间
- 指针定义
- 内存管理
- 安全机制

## 指针操作
- 指针类型
- 指针运算
- 内存访问
- 动态分配
- 释放管理

## 实现机制
- 寻址方式
- 内存映射
- 访问控制
- 安全检查
- 性能优化

## 最佳实践
- 使用规范
- 优化策略
- 调试方法
- 安全建议
- 问题处理
EOF

# 创建2.9堆空间与栈空间文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.9-堆空间与栈空间.md" << 'EOF'
---
title: 堆空间与栈空间
icon: cpp-heap-stack
order: 9
---

# 堆空间与栈空间

## 基本概念
- 堆定义
- 栈定义
- 区别特点
- 使用场景
- 管理机制

## 内存管理
- 分配方式
- 释放机制
- 访问控制
- 生命周期
- 性能特点

## 实现机制
- 内存布局
- 分配策略
- 回收机制
- 碎片处理
- 性能优化

## 最佳实践
- 使用原则
- 优化方法
- 调试技巧
- 安全建议
- 问题处理
EOF

# 创建2.10深拷贝与浅拷贝文件
cat > "$BASE_DIR/第2章-C++语言基础回顾/2.10-深拷贝与浅拷贝.md" << 'EOF'
---
title: 深拷贝与浅拷贝
icon: cpp-copy
order: 10
---

# 深拷贝与浅拷贝

## 基本概念
- 拷贝定义
- 区别特点
- 实现机制
- 使用场景
- 性能影响

## 实现方式
- 浅拷贝实现
- 深拷贝实现
- 拷贝构造
- 赋值运算
- 资源管理

## 关键技术
- 内存管理
- 资源控制
- 异常处理
- 性能优化
- 安全考虑

## 最佳实践
- 设计原则
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第3章目录
mkdir -p "$BASE_DIR/第3章-服务器基础编程"

# 创建第3章README文件
cat > "$BASE_DIR/第3章-服务器基础编程/README.md" << 'EOF'
---
title: 服务器基础编程
icon: server-basic
order: 3
---

# 服务器基础编程

本章介绍服务器编程的基础知识，包括基本服务器架构、信号处理和进程管理等内容。
EOF

# 创建3.1一个最简单的服务器文件
cat > "$BASE_DIR/第3章-服务器基础编程/3.1-一个最简单的服务器.md" << 'EOF'
---
title: 一个最简单的服务器
icon: simple-server
order: 1
---

# 一个最简单的服务器

## 基本架构
- 服务器模型
- 网络通信
- 请求处理
- 响应机制
- 错误处理

## 核心功能
- 连接管理
- 数据处理
- 状态控制
- 资源管理
- 错误处理

## 实现细节
- 服务实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 设计原则
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF

# 创建3.2Linux系统下的信号文件
cat > "$BASE_DIR/第3章-服务器基础编程/3.2-Linux系统下的信号.md" << 'EOF'
---
title: Linux系统下的信号
icon: linux-signal
order: 2
---

# Linux系统下的信号

## 基本概念
- 信号定义
- 信号类型
- 工作原理
- 使用场景
- 技术特点

## 信号机制
- 信号产生
- 信号传递
- 信号处理
- 信号屏蔽
- 信号排队

## 实现细节
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建3.3几个重要的信号文件
cat > "$BASE_DIR/第3章-服务器基础编程/3.3-几个重要的信号.md" << 'EOF'
---
title: 几个重要的信号
icon: important-signals
order: 3
---

# 几个重要的信号

## 信号类型
- SIGTERM
- SIGINT
- SIGKILL
- SIGSEGV
- SIGCHLD

## 信号特性
- 信号含义
- 处理方式
- 使用场景
- 注意事项
- 最佳实践

## 实现机制
- 处理流程
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 应用示例
- 使用方法
- 示例代码
- 注意事项
- 调试技巧
- 问题处理
EOF

# 创建3.4信号的发送与处理文件
cat > "$BASE_DIR/第3章-服务器基础编程/3.4-信号的发送与处理.md" << 'EOF'
---
title: 信号的发送与处理
icon: signal-handling
order: 4
---

# 信号的发送与处理

## 发送机制
- 发送方式
- 发送时机
- 发送对象
- 发送控制
- 错误处理

## 处理流程
- 接收机制
- 处理方式
- 响应策略
- 状态管理
- 异常处理

## 实现细节
- 处理实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建3.5通过sigaction安装信号文件
cat > "$BASE_DIR/第3章-服务器基础编程/3.5-通过sigaction安装信号.md" << 'EOF'
---
title: 通过sigaction安装信号
icon: sigaction
order: 5
---

# 通过sigaction安装信号

## 基本概念
- sigaction定义
- 功能特点
- 使用场景
- 工作原理
- 技术特点

## 安装流程
- 结构设置
- 处理函数
- 信号屏蔽
- 标志控制
- 错误处理

## 实现细节
- 安装实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建3.6以fork的方式创建后台进程文件
cat > "$BASE_DIR/第3章-服务器基础编程/3.6-以fork的方式创建后台进程.md" << 'EOF'
---
title: 以fork的方式创建后台进程
icon: fork-daemon
order: 6
---

# 以fork的方式创建后台进程

## 基本概念
- fork定义
- 进程创建
- 工作原理
- 使用场景
- 技术特点

## 实现机制
- 创建流程
- 父子关系
- 资源继承
- 状态管理
- 错误处理

## 关键技术
- 进程控制
- 资源管理
- 状态维护
- 异常处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建3.7以daemon方式切换到后台文件
cat > "$BASE_DIR/第3章-服务器基础编程/3.7-以daemon方式切换到后台.md" << 'EOF'
---
title: 以daemon方式切换到后台
icon: daemon-switch
order: 7
---

# 以daemon方式切换到后台

## 基本概念
- daemon定义
- 工作原理
- 切换机制
- 使用场景
- 技术特点

## 实现机制
- 切换流程
- 会话管理
- 资源控制
- 状态维护
- 错误处理

## 关键技术
- 进程控制
- 资源管理
- 状态维护
- 异常处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建第4章目录
mkdir -p "$BASE_DIR/第4章-网络编程基础"

# 创建第4章README文件
cat > "$BASE_DIR/第4章-网络编程基础/README.md" << 'EOF'
---
title: 网络编程基础
icon: network-basic
order: 4
---

# 网络编程基础

本章介绍网络编程的基础知识，包括TCP服务器和客户端的实现原理与实践。
EOF

# 创建4.1TCPServer实现原理文件
cat > "$BASE_DIR/第4章-网络编程基础/4.1-TCPServer实现原理.md" << 'EOF'
---
title: TCPServer实现原理
icon: tcp-server-theory
order: 1
---

# TCPServer实现原理

## 基本概念
- TCP协议
- 服务器模型
- 通信原理
- 连接管理
- 数据传输

## 核心机制
- 连接建立
- 数据收发
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 服务实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 设计原则
- 实现策略
- 优化方法
- 调试技巧
- 问题处理
EOF

# 创建4.2TCPServer的实现1文件
cat > "$BASE_DIR/第4章-网络编程基础/4.2-TCPServer的实现1.md" << 'EOF'
---
title: TCPServer的实现1
icon: tcp-server-impl-1
order: 2
---

# TCPServer的实现1

## 基础架构
- 服务器设计
- 连接管理
- 数据处理
- 资源控制
- 错误处理

## 核心功能
- 监听实现
- 连接处理
- 数据收发
- 状态管理
- 异常处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建4.3TCPServer的实现2文件
cat > "$BASE_DIR/第4章-网络编程基础/4.3-TCPServer的实现2.md" << 'EOF'
---
title: TCPServer的实现2
icon: tcp-server-impl-2
order: 3
---

# TCPServer的实现2

## 高级特性
- 并发处理
- 事件驱动
- 缓冲管理
- 超时控制
- 安全机制

## 核心功能
- 高并发处理
- 性能优化
- 资源管理
- 状态控制
- 错误处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建4.4TCP客户端的实现文件
cat > "$BASE_DIR/第4章-网络编程基础/4.4-TCP客户端的实现.md" << 'EOF'
---
title: TCP客户端的实现
icon: tcp-client
order: 4
---

# TCP客户端的实现

## 基本架构
- 客户端设计
- 连接管理
- 数据处理
- 资源控制
- 错误处理

## 核心功能
- 连接建立
- 数据收发
- 状态管理
- 资源控制
- 错误处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建4.5作业-UDP服务端与客户端的实现文件
cat > "$BASE_DIR/第4章-网络编程基础/4.5-作业-UDP服务端与客户端的实现.md" << 'EOF'
---
title: 作业-UDP服务端与客户端的实现
icon: udp-implementation
order: 5
---

# 作业-UDP服务端与客户端的实现

## 基本要求
- 功能规范
- 实现目标
- 技术要点
- 评分标准
- 提交要求

## 服务端实现
- 架构设计
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 客户端实现
- 架构设计
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 实现指南
- 开发流程
- 关键技术
- 测试方法
- 调试技巧
- 优化建议
EOF

# 创建4.6作业-实现一个TCP/UDP网络服务器文件
cat > "$BASE_DIR/第4章-网络编程基础/4.6-作业-实现一个TCP_UDP网络服务器.md" << 'EOF'
---
title: 作业-实现一个TCP/UDP网络服务器
icon: tcp-udp-server
order: 6
---

# 作业-实现一个TCP/UDP网络服务器

## 基本要求
- 功能规范
- 实现目标
- 技术要点
- 评分标准
- 提交要求

## 服务器设计
- 架构设计
- 协议支持
- 并发处理
- 性能要求
- 安全考虑

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 实现指南
- 开发流程
- 关键技术
- 测试方法
- 调试技巧
- 优化建议
EOF

# 创建第5章目录
mkdir -p "$BASE_DIR/第5章-异步IO事件处理"

# 创建第5章README文件
cat > "$BASE_DIR/第5章-异步IO事件处理/README.md" << 'EOF'
---
title: 异步IO事件处理
icon: async-io
order: 5
---

# 异步IO事件处理

本章介绍异步IO事件处理的相关知识，包括高性能服务器的实现方式。
EOF

# 创建5.1通过fork的方式实现高性能网络服务器文件
cat > "$BASE_DIR/第5章-异步IO事件处理/5.1-通过fork的方式实现高性能网络服务器.md" << 'EOF'
---
title: 通过fork的方式实现高性能网络服务器
icon: fork-server
order: 1
---

# 通过fork的方式实现高性能网络服务器

## 基本原理
- fork机制
- 进程管理
- 并发处理
- 资源共享
- 性能优化

## 实现机制
- 进程创建
- 任务分配
- 进程通信
- 资源管理
- 错误处理

## 关键技术
- 进程控制
- 并发处理
- 状态维护
- 异常处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建5.2通过select实现高性能服务器文件
cat > "$BASE_DIR/第5章-异步IO事件处理/5.2-通过select实现高性能服务器.md" << 'EOF'
---
title: 通过select实现高性能服务器
icon: select-server
order: 2
---

# 通过select实现高性能服务器

## 基本原理
- select机制
- IO多路复用
- 事件处理
- 并发模型
- 性能特点

## 实现机制
- 事件监听
- 数据处理
- 状态管理
- 资源控制
- 错误处理

## 关键技术
- 文件描述符
- 事件循环
- 超时处理
- 并发控制
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建5.3再论select函数文件
cat > "$BASE_DIR/第5章-异步IO事件处理/5.3-再论select函数.md" << 'EOF'
---
title: 再论select函数
icon: select-advanced
order: 3
---

# 再论select函数

## 深入理解
- 工作原理
- 内部机制
- 性能特点
- 使用限制
- 最佳实践

## 高级特性
- 高级用法
- 性能优化
- 资源管理
- 并发控制
- 错误处理

## 实现细节
- 函数实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第6章目录
mkdir -p "$BASE_DIR/第6章-epoll实现高性能服务器"

# 创建第6章README文件
cat > "$BASE_DIR/第6章-epoll实现高性能服务器/README.md" << 'EOF'
---
title: epoll实现高性能服务器
icon: epoll-server
order: 6
---

# epoll实现高性能服务器

本章介绍使用epoll实现高性能服务器的相关知识和实践。
EOF

# 创建6.1epoll基本知识文件
cat > "$BASE_DIR/第6章-epoll实现高性能服务器/6.1-epoll基本知识.md" << 'EOF'
---
title: epoll基本知识
icon: epoll-basics
order: 1
---

# epoll基本知识

## 基本概念
- epoll定义
- 工作原理
- 技术特点
- 应用场景
- 性能优势

## 核心机制
- 事件模型
- 触发方式
- 数据结构
- 接口设计
- 性能特性

## 实现原理
- 内部机制
- 事件处理
- 资源管理
- 性能优化
- 调度策略

## 最佳实践
- 使用方法
- 优化策略
- 调试技巧
- 注意事项
- 问题处理
EOF

# 创建6.2epoll高性能服务器的实现1文件
cat > "$BASE_DIR/第6章-epoll实现高性能服务器/6.2-epoll高性能服务器的实现1.md" << 'EOF'
---
title: epoll高性能服务器的实现1
icon: epoll-server-1
order: 2
---

# epoll高性能服务器的实现1

## 基础架构
- 服务器设计
- 事件处理
- 并发模型
- 资源管理
- 性能优化

## 核心功能
- 事件监听
- 连接管理
- 数据处理
- 状态控制
- 错误处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建6.3epoll高性能服务器的实现2文件
cat > "$BASE_DIR/第6章-epoll实现高性能服务器/6.3-epoll高性能服务器的实现2.md" << 'EOF'
---
title: epoll高性能服务器的实现2
icon: epoll-server-2
order: 3
---

# epoll高性能服务器的实现2

## 高级特性
- 高并发处理
- 事件驱动
- 缓冲管理
- 超时控制
- 安全机制

## 核心功能
- 性能优化
- 资源管理
- 状态控制
- 错误处理
- 监控统计

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建6.4epoll+fork进行性能优化文件
cat > "$BASE_DIR/第6章-epoll实现高性能服务器/6.4-epoll+fork进行性能优化.md" << 'EOF'
---
title: epoll+fork进行性能优化
icon: epoll-fork
order: 4
---

# epoll+fork进行性能优化

## 优化原理
- 组合策略
- 工作原理
- 性能特点
- 优化目标
- 实现机制

## 核心技术
- 进程管理
- 事件处理
- 资源分配
- 负载均衡
- 性能监控

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第7章目录
mkdir -p "$BASE_DIR/第7章-libevent实现高性能网络服务器"

# 创建第7章README文件
cat > "$BASE_DIR/第7章-libevent实现高性能网络服务器/README.md" << 'EOF'
---
title: libevent实现高性能网络服务器
icon: libevent-server
order: 7
---

# libevent实现高性能网络服务器

本章介绍使用libevent库实现高性能网络服务器的相关知识和实践。
EOF

# 创建7.1比较有名的异步IO处理库的介绍文件
cat > "$BASE_DIR/第7章-libevent实现高性能网络服务器/7.1-比较有名的异步IO处理库的介绍.md" << 'EOF'
---
title: 比较有名的异步IO处理库的介绍
icon: async-io-libs
order: 1
---

# 比较有名的异步IO处理库的介绍

## 主流库概述
- libevent
- libuv
- libev
- boost.asio
- ACE

## 特性比较
- 性能对比
- 功能特点
- 使用场景
- 优缺点分析
- 选择建议

## 技术细节
- 实现原理
- 架构设计
- 接口对比
- 性能指标
- 应用案例

## 最佳实践
- 选型建议
- 使用技巧
- 优化方法
- 注意事项
- 问题处理
EOF

# 创建7.2libevent实现高性能服务器文件
cat > "$BASE_DIR/第7章-libevent实现高性能网络服务器/7.2-libevent实现高性能服务器.md" << 'EOF'
---
title: libevent实现高性能服务器
icon: libevent-impl
order: 2
---

# libevent实现高性能服务器

## 基础架构
- 服务器设计
- 事件处理
- 并发模型
- 资源管理
- 性能优化

## 核心功能
- 事件监听
- 连接管理
- 数据处理
- 状态控制
- 错误处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建7.3作业-libuv实现对UDP的处理文件
cat > "$BASE_DIR/第7章-libevent实现高性能网络服务器/7.3-作业-libuv实现对UDP的处理.md" << 'EOF'
---
title: 作业-libuv实现对UDP的处理
icon: libuv-udp
order: 3
---

# 作业-libuv实现对UDP的处理

## 基本要求
- 功能规范
- 实现目标
- 技术要点
- 评分标准
- 提交要求

## 实现细节
- 架构设计
- 数据处理
- 状态管理
- 错误处理
- 性能优化

## 关键技术
- UDP特性
- libuv使用
- 事件处理
- 并发控制
- 性能优化

## 实现指南
- 开发流程
- 关键技术
- 测试方法
- 调试技巧
- 优化建议
EOF

# 创建第8章目录
mkdir -p "$BASE_DIR/第8章-TCP_IP详解"

# 创建第8章README文件
cat > "$BASE_DIR/第8章-TCP_IP详解/README.md" << 'EOF'
---
title: TCP/IP详解
icon: tcp-ip
order: 8
---

# TCP/IP详解

本章深入讲解TCP/IP协议的核心知识。
EOF

# 创建8.1IP协议详解文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.1-IP协议详解.md" << 'EOF'
---
title: IP协议详解
icon: ip-protocol
order: 1
---

# IP协议详解

## 基本概念
- IP定义
- 协议特点
- 版本对比
- 工作原理
- 技术特点

## 协议结构
- 报文格式
- 字段说明
- 地址结构
- 分片机制
- 路由原理

## 实现机制
- 寻址方式
- 路由选择
- 分片重组
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.2TCP协议详解文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.2-TCP协议详解.md" << 'EOF'
---
title: TCP协议详解
icon: tcp-protocol
order: 2
---

# TCP协议详解

## 基本概念
- TCP定义
- 协议特点
- 工作原理
- 连接管理
- 可靠传输

## 协议结构
- 报文格式
- 字段说明
- 状态转换
- 流量控制
- 拥塞控制

## 实现机制
- 连接管理
- 数据传输
- 错误控制
- 流量控制
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建8.3TCP三次握手文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.3-TCP三次握手.md" << 'EOF'
---
title: TCP三次握手
icon: tcp-handshake
order: 3
---

# TCP三次握手

## 基本概念
- 握手定义
- 工作原理
- 状态变化
- 报文格式
- 时序图解

## 实现机制
- 握手流程
- 状态转换
- 超时处理
- 异常处理
- 安全机制

## 关键技术
- 序列号
- 确认号
- 标志位
- 窗口大小
- 选项处理

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建8.4TCP四次挥手文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.4-TCP四次挥手.md" << 'EOF'
---
title: TCP四次挥手
icon: tcp-wave
order: 4
---

# TCP四次挥手

## 基本概念
- 挥手定义
- 工作原理
- 状态变化
- 报文格式
- 时序图解

## 实现机制
- 挥手流程
- 状态转换
- 超时处理
- 异常处理
- 资源释放

## 关键技术
- 序列号
- 确认号
- 标志位
- TIME_WAIT
- 资源回收

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建8.5TCP_ACK_机制文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.5-TCP_ACK_机制.md" << 'EOF'
---
title: TCP_ACK_机制
icon: tcp-ack
order: 5
---

# TCP_ACK_机制

## 基本概念
- ACK定义
- 工作原理
- 确认机制
- 重传策略
- 性能影响

## 实现机制
- 确认流程
- 序号管理
- 重传控制
- 超时处理
- 性能优化

## 关键技术
- 序列号
- 确认号
- 重传机制
- 延迟确认
- 快速重传

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建8.6TCP滑动窗口文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.6-TCP滑动窗口.md" << 'EOF'
---
title: TCP滑动窗口
icon: tcp-window
order: 6
---

# TCP滑动窗口

## 基本概念
- 窗口定义
- 工作原理
- 滑动机制
- 流量控制
- 性能影响

## 实现机制
- 窗口管理
- 数据传输
- 流量控制
- 拥塞控制
- 性能优化

## 关键技术
- 窗口大小
- 序号管理
- 缓冲控制
- 超时处理
- 性能调优

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建8.7UDP与RTP文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.7-UDP与RTP.md" << 'EOF'
---
title: UDP与RTP
icon: udp-rtp
order: 7
---

# UDP与RTP

## 基本概念
- UDP定义
- RTP定义
- 协议特点
- 应用场景
- 技术对比

## 协议机制
- UDP机制
- RTP机制
- 数据传输
- 时间戳
- 服务质量

## 实现细节
- 协议实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建8.8实时通信TCP_UDP的选择文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.8-实时通信TCP_UDP的选择.md" << 'EOF'
---
title: 实时通信TCP_UDP的选择
icon: protocol-choice
order: 8
---

# 实时通信TCP_UDP的选择

## 协议对比
- TCP特点
- UDP特点
- 性能比较
- 应用场景
- 选择依据

## 选择考虑
- 业务需求
- 网络环境
- 性能要求
- 可靠性
- 实时性

## 实现策略
- TCP方案
- UDP方案
- 混合方案
- 优化策略
- 性能保障

## 最佳实践
- 选择建议
- 实现方法
- 优化技巧
- 监控方案
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建8.9TCP在实时通信中的作用文件
cat > "$BASE_DIR/第8章-TCP_IP详解/8.9-TCP在实时通信中的作用.md" << 'EOF'
---
title: TCP在实时通信中的作用
icon: tcp-realtime
order: 9
---

# TCP在实时通信中的作用

## 基本概念
- 实时通信
- TCP特性
- 应用场景
- 优势分析
- 局限性

## 应用领域
- 信令控制
- 可靠传输
- 状态同步
- 数据通道
- 会话管理

## 实现机制
- 连接管理
- 数据传输
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建第9章目录
mkdir -p "$BASE_DIR/第9章-UDP_RTP_RTCP详解"

# 创建第9章README文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/README.md" << 'EOF'
---
title: UDP/RTP/RTCP详解
icon: udp-rtp-rtcp
order: 9
---

# UDP/RTP/RTCP详解

本章深入介绍UDP、RTP和RTCP协议的原理和应用。
EOF

# 创建9.1RTP包的使用文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/9.1-RTP包的使用.md" << 'EOF'
---
title: RTP包的使用
icon: rtp-usage
order: 1
---

# RTP包的使用

## 基本概念
- RTP定义
- 包结构
- 工作原理
- 应用场景
- 技术特点

## 包结构
- 头部格式
- 负载类型
- 序列号
- 时间戳
- 同步源

## 实现机制
- 包处理
- 数据传输
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建9.2RTCP协议头的分析文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/9.2-RTCP协议头的分析.md" << 'EOF'
---
title: RTCP协议头的分析
icon: rtcp-header
order: 2
---

# RTCP协议头的分析

## 基本结构
- 头部格式
- 字段定义
- 版本信息
- 包类型
- 长度计算

## 字段解析
- 版本字段
- 填充位
- 报告计数
- 包类型
- 长度字段

## 实现机制
- 头部处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建9.3RTCP PayloadType介绍文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/9.3-RTCP_PayloadType介绍.md" << 'EOF'
---
title: RTCP PayloadType介绍
icon: rtcp-payload
order: 3
---

# RTCP PayloadType介绍

## 基本概念
- 负载类型
- 类型定义
- 应用场景
- 工作原理
- 技术特点

## 类型详解
- SR类型
- RR类型
- SDES类型
- BYE类型
- APP类型

## 实现机制
- 类型处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建9.4RTCP SR包文详解文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/9.4-RTCP_SR包文详解.md" << 'EOF'
---
title: RTCP SR包文详解
icon: rtcp-sr
order: 4
---

# RTCP SR包文详解

## 基本结构
- SR包定义
- 包结构
- 字段说明
- 工作原理
- 技术特点

## 字段解析
- 发送者信息
- NTP时间戳
- RTP时间戳
- 发送包计数
- 发送字节数

## 实现机制
- 包处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建9.5RTCP RR SDES报文介绍文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/9.5-RTCP_RR_SDES报文介绍.md" << 'EOF'
---
title: RTCP RR SDES报文介绍
icon: rtcp-rr-sdes
order: 5
---

# RTCP RR SDES报文介绍

## RR报文结构
- 基本格式
- 字段说明
- 接收统计
- 丢包统计
- 时间信息

## SDES报文结构
- 源描述
- 项目类型
- CNAME项
- NAME项
- 其他类型

## 实现机制
- 报文处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建9.6BYE APP报文介绍文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/9.6-BYE_APP报文介绍.md" << 'EOF'
---
title: BYE APP报文介绍
icon: rtcp-bye-app
order: 6
---

# BYE APP报文介绍

## BYE报文结构
- 基本格式
- 字段说明
- 离开原因
- 处理机制
- 应用场景

## APP报文结构
- 基本格式
- 字段说明
- 应用名称
- 数据格式
- 扩展机制

## 实现机制
- 报文处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建9.7RTCP FB协议介绍文件
cat > "$BASE_DIR/第9章-UDP_RTP_RTCP详解/9.7-RTCP_FB协议介绍.md" << 'EOF'
---
title: RTCP FB协议介绍
icon: rtcp-fb
order: 7
---

# RTCP FB协议介绍

## 基本概念
- FB定义
- 协议特点
- 工作原理
- 应用场景
- 技术特点

## 协议结构
- 报文格式
- 字段说明
- 反馈类型
- 扩展机制
- 处理流程

## 实现机制
- 协议处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建第10章目录
mkdir -p "$BASE_DIR/第10章-WebRTC协议"

# 创建第10章README文件
cat > "$BASE_DIR/第10章-WebRTC协议/README.md" << 'EOF'
---
title: WebRTC协议
icon: webrtc-protocol
order: 10
---

# WebRTC协议

本章介绍WebRTC相关协议的原理和应用。
EOF

# 创建10.1STUN协议介绍文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.1-STUN协议介绍.md" << 'EOF'
---
title: STUN协议介绍
icon: stun-protocol
order: 1
---

# STUN协议介绍

## 基本概念
- STUN定义
- 协议特点
- 工作原理
- 应用场景
- 技术特点

## 协议结构
- 报文格式
- 字段说明
- 消息类型
- 属性机制
- 处理流程

## 实现机制
- 协议处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建10.2STUN MessageType消息文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.2-STUN_MessageType消息.md" << 'EOF'
---
title: STUN MessageType消息
icon: stun-message
order: 2
---

# STUN MessageType消息

## 消息类型
- 请求消息
- 响应消息
- 指示消息
- 错误响应
- 扩展类型

## 消息结构
- 类型编码
- 字段说明
- 属性格式
- 处理机制
- 扩展机制

## 实现机制
- 消息处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建10.3STUN MessageType详解文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.3-STUN_MessageType详解.md" << 'EOF'
---
title: STUN MessageType详解
icon: stun-message-detail
order: 3
---

# STUN MessageType详解

## 消息结构
- 头部格式
- 类型编码
- 事务标识
- 魔术字段
- 属性列表

## 消息类型
- 绑定请求
- 绑定响应
- 共享密钥
- 错误响应
- 指示消息

## 实现机制
- 消息处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建10.4STUN body详解文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.4-STUN_body详解.md" << 'EOF'
---
title: STUN body详解
icon: stun-body
order: 4
---

# STUN body详解

## 基本结构
- 消息体格式
- 属性类型
- 长度计算
- 对齐规则
- 扩展机制

## 属性详解
- 地址属性
- 用户名属性
- 密码属性
- 完整性属性
- 错误代码

## 实现机制
- 消息处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建10.5ICE工作原理文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.5-ICE工作原理.md" << 'EOF'
---
title: ICE工作原理
icon: ice-principle
order: 5
---

# ICE工作原理

## 基本概念
- ICE定义
- 工作流程
- 候选类型
- 连接检查
- 优先级计算

## 核心机制
- 收集候选
- 连接检查
- 优先级处理
- 状态管理
- 错误处理

## 实现细节
- 协议实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建10.6加密解密基本概念文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.6-加密解密基本概念.md" << 'EOF'
---
title: 加密解密基本概念
icon: encryption-basics
order: 6
---

# 加密解密基本概念

## 基础知识
- 加密定义
- 解密定义
- 密钥概念
- 算法类型
- 安全级别

## 加密类型
- 对称加密
- 非对称加密
- 散列函数
- 数字签名
- 证书体系

## 实现机制
- 加密过程
- 解密过程
- 密钥管理
- 安全控制
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建10.7OpenSSL概念及使用文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.7-OpenSSL概念及使用.md" << 'EOF'
---
title: OpenSSL概念及使用
icon: openssl
order: 7
---

# OpenSSL概念及使用

## 基本概念
- OpenSSL定义
- 功能特点
- 应用场景
- 版本特性
- 安全机制

## 核心功能
- 加密算法
- 证书管理
- 密钥处理
- 安全通信
- 性能优化

## 使用方法
- 安装配置
- API使用
- 证书操作
- 密钥管理
- 调试方法

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建10.8DTLS协议详解文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.8-DTLS协议详解.md" << 'EOF'
---
title: DTLS协议详解
icon: dtls-protocol
order: 8
---

# DTLS协议详解

## 基本概念
- DTLS定义
- 协议特点
- 工作原理
- 应用场景
- 技术特点

## 协议机制
- 握手过程
- 数据传输
- 重传机制
- 安全控制
- 性能优化

## 实现细节
- 协议实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建10.9TLS-SRTP协议讲解文件
cat > "$BASE_DIR/第10章-WebRTC协议/10.9-TLS-SRTP协议讲解.md" << 'EOF'
---
title: TLS-SRTP协议讲解
icon: tls-srtp
order: 9
---

# TLS-SRTP协议讲解

## 基本概念
- 协议定义
- 工作原理
- 安全特性
- 应用场景
- 技术特点

## 协议机制
- 密钥协商
- 数据保护
- 认证机制
- 安全控制
- 性能优化

## 实现细节
- 协议实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建第11章目录
mkdir -p "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商"

# 创建第11章README文件
cat > "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商/README.md" << 'EOF'
---
title: SDP协议与WebRTC媒体协商
icon: sdp-webrtc
order: 11
---

# SDP协议与WebRTC媒体协商

本章深入讲解SDP协议及其在WebRTC媒体协商中的应用。
EOF

# 创建11.1媒体协商过程文件
cat > "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商/11.1-媒体协商过程.md" << 'EOF'
---
title: 媒体协商过程
icon: media-negotiation
order: 1
---

# 媒体协商过程

## 基本概念
- 协商定义
- 工作原理
- 协商流程
- 状态管理
- 技术特点

## 协商步骤
- 能力交换
- 参数协商
- 优先级处理
- 冲突解决
- 结果确认

## 实现机制
- 协商实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建11.2SDP协议简介文件
cat > "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商/11.2-SDP协议简介.md" << 'EOF'
---
title: SDP协议简介
icon: sdp-intro
order: 2
---

# SDP协议简介

## 基本概念
- SDP定义
- 协议特点
- 工作原理
- 应用场景
- 技术特点

## 协议结构
- 会话描述
- 媒体描述
- 时间描述
- 属性描述
- 扩展机制

## 实现机制
- 协议实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建11.3SDP描述信息文件
cat > "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商/11.3-SDP描述信息.md" << 'EOF'
---
title: SDP描述信息
icon: sdp-description
order: 3
---

# SDP描述信息

## 基本结构
- 会话级别
- 媒体级别
- 时间描述
- 属性描述
- 网络描述

## 描述内容
- 会话信息
- 媒体信息
- 传输信息
- 安全信息
- 扩展信息

## 实现机制
- 信息处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建11.4SDP关键字段的含义及其使用文件
cat > "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商/11.4-SDP关键字段的含义及其使用.md" << 'EOF'
---
title: SDP关键字段的含义及其使用
icon: sdp-fields
order: 4
---

# SDP关键字段的含义及其使用

## 会话字段
- v字段
- o字段
- s字段
- t字段
- c字段

## 媒体字段
- m字段
- a字段
- b字段
- k字段
- i字段

## 属性字段
- rtpmap
- fmtp
- setup
- mid
- msid

## 最佳实践
- 字段使用
- 参数配置
- 调试方法
- 注意事项
- 问题处理
EOF

# 创建11.5WebRTC中的SDP文件
cat > "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商/11.5-WebRTC中的SDP.md" << 'EOF'
---
title: WebRTC中的SDP
icon: webrtc-sdp
order: 5
---

# WebRTC中的SDP

## 基本应用
- 协商流程
- 字段使用
- 参数配置
- 状态管理
- 错误处理

## 特殊处理
- ICE相关
- DTLS相关
- BUNDLE相关
- RTCP相关
- 编码相关

## 实现机制
- SDP处理
- 数据解析
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建11.6WebRTC中SDP各字段含义详解文件
cat > "$BASE_DIR/第11章-SDP协议与WebRTC媒体协商/11.6-WebRTC中SDP各字段含义详解.md" << 'EOF'
---
title: WebRTC中SDP各字段含义详解
icon: webrtc-sdp-fields
order: 6
---

# WebRTC中SDP各字段含义详解

## 会话级字段
- 版本字段
- 源字段
- 会话名称
- 连接信息
- 时间描述

## 媒体级字段
- 媒体行
- 属性行
- 带宽行
- 加密行
- 连接行

## 特殊字段
- ICE相关字段
- DTLS相关字段
- BUNDLE相关字段
- SSRC相关字段
- 编码相关字段

## 最佳实践
- 字段使用
- 参数配置
- 调试方法
- 注意事项
- 问题处理
EOF

# 创建第12章目录
mkdir -p "$BASE_DIR/第12章-各流媒体服务器的比较"

# 创建第12章README文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/README.md" << 'EOF'
---
title: 各流媒体服务器的比较
icon: media-server-compare
order: 12
---

# 各流媒体服务器的比较

本章比较分析不同流媒体服务器架构的特点和应用场景。
EOF

# 创建12.1多人互动架构方案文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.1-多人互动架构方案.md" << 'EOF'
---
title: 多人互动架构方案
icon: multi-interaction
order: 1
---

# 多人互动架构方案

## 基本概念
- 架构定义
- 方案类型
- 技术特点
- 应用场景
- 选型依据

## 架构比较
- Mesh架构
- MCU架构
- SFU架构
- 混合架构
- 性能对比

## 实现机制
- 方案实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 选型策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建12.2Mesh架构模型详解文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.2-Mesh架构模型详解.md" << 'EOF'
---
title: Mesh架构模型详解
icon: mesh-architecture
order: 2
---

# Mesh架构模型详解

## 基本概念
- Mesh定义
- 工作原理
- 技术特点
- 应用场景
- 优缺点

## 核心机制
- 连接管理
- 数据传输
- 状态同步
- 资源控制
- 性能优化

## 实现细节
- 架构实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建12.3MCU架构模型详解文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.3-MCU架构模型详解.md" << 'EOF'
---
title: MCU架构模型详解
icon: mcu-architecture
order: 3
---

# MCU架构模型详解

## 基本概念
- MCU定义
- 工作原理
- 技术特点
- 应用场景
- 优缺点

## 核心机制
- 混流处理
- 转码能力
- 布局管理
- 资源控制
- 性能优化

## 实现细节
- 架构实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建12.4SFU架构模型详解文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.4-SFU架构模型详解.md" << 'EOF'
---
title: SFU架构模型详解
icon: sfu-architecture
order: 4
---

# SFU架构模型详解

## 基本概念
- SFU定义
- 工作原理
- 技术特点
- 应用场景
- 优缺点

## 核心机制
- 转发策略
- 带宽控制
- 丢包处理
- 资源管理
- 性能优化

## 实现细节
- 架构实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建12.5Licode流媒体服务器架构和特点文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.5-Licode流媒体服务器架构和特点.md" << 'EOF'
---
title: Licode流媒体服务器架构和特点
icon: licode-server
order: 5
---

# Licode流媒体服务器架构和特点

## 基本架构
- 架构设计
- 核心组件
- 工作原理
- 技术特点
- 应用场景

## 功能特性
- 媒体处理
- 信令控制
- 录制功能
- 转码能力
- 扩展机制

## 实现细节
- 架构实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 部署策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建12.6Janus流媒体服务器的架构及特点文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.6-Janus流媒体服务器的架构及特点.md" << 'EOF'
---
title: Janus流媒体服务器的架构及特点
icon: janus-server
order: 6
---

# Janus流媒体服务器的架构及特点

## 基本架构
- 架构设计
- 核心组件
- 工作原理
- 技术特点
- 应用场景

## 功能特性
- 插件系统
- 媒体处理
- 信令控制
- 会议功能
- 扩展机制

## 实现细节
- 架构实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 部署策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建12.7Medooze流媒体服务器架构及特点文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.7-Medooze流媒体服务器架构及特点.md" << 'EOF'
---
title: Medooze流媒体服务器架构及特点
icon: medooze-server
order: 7
---

# Medooze流媒体服务器架构及特点

## 基本架构
- 架构设计
- 核心组件
- 工作原理
- 技术特点
- 应用场景

## 功能特性
- 媒体处理
- 信令控制
- 转发能力
- 录制功能
- 扩展机制

## 实现细节
- 架构实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 部署策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建12.8Mediasoup流媒体服务器架构及特点文件
cat > "$BASE_DIR/第12章-各流媒体服务器的比较/12.8-Mediasoup流媒体服务器架构及特点.md" << 'EOF'
---
title: Mediasoup流媒体服务器架构及特点
icon: mediasoup-server
order: 8
---

# Mediasoup流媒体服务器架构及特点

## 基本架构
- 架构设计
- 核心组件
- 工作原理
- 技术特点
- 应用场景

## 功能特性
- SFU模式
- 媒体处理
- 信令控制
- 扩展能力
- 性能优势

## 实现细节
- 架构实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 部署策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建第13章目录
mkdir -p "$BASE_DIR/第13章-mediasoup服务器的布署与使用"

# 创建第13章README文件
cat > "$BASE_DIR/第13章-mediasoup服务器的布署与使用/README.md" << 'EOF'
---
title: mediasoup服务器的布署与使用
icon: mediasoup-deploy
order: 13
---

# mediasoup服务器的布署与使用

本章介绍mediasoup服务器的部署和使用方法。
EOF

# 创建13.1Mediasoup的运行环境文件
cat > "$BASE_DIR/第13章-mediasoup服务器的布署与使用/13.1-Mediasoup的运行环境.md" << 'EOF'
---
title: Mediasoup的运行环境
icon: mediasoup-env
order: 1
---

# Mediasoup的运行环境

## 环境要求
- 系统要求
- 依赖组件
- 编译环境
- 运行环境
- 性能要求

## 安装配置
- 环境准备
- 安装步骤
- 配置说明
- 验证测试
- 故障排除

## 运行管理
- 启动配置
- 运行监控
- 日志管理
- 性能调优
- 问题处理

## 最佳实践
- 部署策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建13.2Mediasoup Demo的布署文件
cat > "$BASE_DIR/第13章-mediasoup服务器的布署与使用/13.2-Mediasoup_Demo的布署.md" << 'EOF'
---
title: Mediasoup Demo的布署
icon: mediasoup-demo
order: 2
---

# Mediasoup Demo的布署

## 部署准备
- 环境要求
- 依赖安装
- 配置准备
- 资源规划
- 部署清单

## 部署步骤
- 代码获取
- 环境配置
- 编译构建
- 服务启动
- 验证测试

## 配置管理
- 配置说明
- 参数调优
- 日志设置
- 监控配置
- 安全设置

## 最佳实践
- 部署策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建13.3通过Nodejs实现HTTP服务文件
cat > "$BASE_DIR/第13章-mediasoup服务器的布署与使用/13.3-通过Nodejs实现HTTP服务.md" << 'EOF'
---
title: 通过Nodejs实现HTTP服务
icon: nodejs-http
order: 3
---

# 通过Nodejs实现HTTP服务

## 基础实现
- HTTP模块
- 服务创建
- 路由处理
- 请求处理
- 响应处理

## 功能扩展
- 中间件
- 静态文件
- 错误处理
- 会话管理
- 安全机制

## 性能优化
- 并发处理
- 缓存策略
- 负载均衡
- 监控统计
- 性能调优

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建13.4HTTPS基本知识文件
cat > "$BASE_DIR/第13章-mediasoup服务器的布署与使用/13.4-HTTPS基本知识.md" << 'EOF'
---
title: HTTPS基本知识
icon: https-basics
order: 4
---

# HTTPS基本知识

## 基本概念
- HTTPS定义
- 工作原理
- 安全特性
- 证书体系
- 加密机制

## 实现机制
- 握手过程
- 数据传输
- 证书验证
- 密钥交换
- 会话管理

## 配置部署
- 证书申请
- 服务配置
- 性能优化
- 安全加固
- 维护管理

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建13.5通过WWW服务发布mediasoup客户端代码文件
cat > "$BASE_DIR/第13章-mediasoup服务器的布署与使用/13.5-通过WWW服务发布mediasoup客户端代码.md" << 'EOF'
---
title: 通过WWW服务发布mediasoup客户端代码
icon: www-mediasoup
order: 5
---

# 通过WWW服务发布mediasoup客户端代码

## 部署准备
- 环境要求
- 代码准备
- 配置规划
- 资源准备
- 部署清单

## 部署步骤
- 代码发布
- 服务配置
- 路由设置
- 安全配置
- 验证测试

## 运维管理
- 服务监控
- 日志管理
- 性能优化
- 安全维护
- 问题处理

## 最佳实践
- 部署策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建13.6作业-客户端是如何与信令服务建立连接的文件
cat > "$BASE_DIR/第13章-mediasoup服务器的布署与使用/13.6-作业-客户端是如何与信令服务建立连接的.md" << 'EOF'
---
title: 作业-客户端是如何与信令服务建立连接的
icon: signaling-connection
order: 6
---

# 作业-客户端是如何与信令服务建立连接的

## 基本要求
- 功能规范
- 实现目标
- 技术要点
- 评分标准
- 提交要求

## 连接流程
- 初始化
- 握手过程
- 认证机制
- 状态管理
- 错误处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 实现指南
- 开发流程
- 关键技术
- 测试方法
- 调试技巧
- 优化建议
EOF

# 创建第14章目录
mkdir -p "$BASE_DIR/第14章-mediasoup的信令系统"

# 创建第14章README文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/README.md" << 'EOF'
---
title: mediasoup的信令系统
icon: mediasoup-signaling
order: 14
---

# mediasoup的信令系统

本章介绍mediasoup的信令系统设计和实现。
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建14.1mediasoup-demo整体分析文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.1-mediasoup-demo整体分析.md" << 'EOF'
---
title: mediasoup-demo整体分析
icon: mediasoup-demo-analysis
order: 1
---

# mediasoup-demo整体分析

## 系统架构
- 整体设计
- 核心组件
- 工作流程
- 通信机制
- 扩展能力

## 功能模块
- 信令服务
- 媒体处理
- 房间管理
- 用户管理
- 配置管理

## 代码结构
- 目录组织
- 核心文件
- 依赖关系
- 配置文件
- 部署文件

## 最佳实践
- 开发流程
- 调试方法
- 测试策略
- 部署方案
- 运维建议
EOF

# 创建14.2JavaScript基本语法一文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.2-JavaScript基本语法一.md" << 'EOF'
---
title: JavaScript基本语法一
icon: javascript-basic-1
order: 2
---

# JavaScript基本语法一

## 基础语法
- 变量声明
- 数据类型
- 运算符
- 控制流程
- 函数定义

## 对象基础
- 对象创建
- 属性访问
- 方法定义
- 原型链
- 继承机制

## 数组操作
- 数组创建
- 常用方法
- 遍历操作
- 数组处理
- 高阶函数

## 最佳实践
- 编码规范
- 优化技巧
- 调试方法
- 常见问题
- 解决方案
EOF

# 创建14.3JavaScript基本语法二文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.3-JavaScript基本语法二.md" << 'EOF'
---
title: JavaScript基本语法二
icon: javascript-basic-2
order: 3
---

# JavaScript基本语法二

## 函数进阶
- 闭包
- 作用域
- this指向
- 箭头函数
- 回调函数

## 异步编程
- 异步基础
- Promise
- async/await
- 事件循环
- 错误处理

## 模块系统
- 模块定义
- 导入导出
- 命名空间
- 模块加载
- 循环依赖

## 最佳实践
- 编码规范
- 优化技巧
- 调试方法
- 常见问题
- 解决方案
EOF

# 创建14.4JavaScript ES6高级特性文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.4-JavaScript_ES6高级特性.md" << 'EOF'
---
title: JavaScript ES6高级特性
icon: javascript-es6
order: 4
---

# JavaScript ES6高级特性

## 新语法特性
- 解构赋值
- 模板字符串
- 箭头函数
- 类语法
- 模块系统

## 新数据类型
- Symbol
- Set和Map
- WeakSet
- WeakMap
- Proxy

## 新API扩展
- Object扩展
- Array扩展
- String扩展
- Promise
- Generator

## 最佳实践
- 使用建议
- 优化技巧
- 调试方法
- 常见问题
- 解决方案
EOF

# 创建14.5Promise与EventEmitter详解文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.5-Promise与EventEmitter详解.md" << 'EOF'
---
title: Promise与EventEmitter详解
icon: promise-eventemitter
order: 5
---

# Promise与EventEmitter详解

## Promise机制
- 基本概念
- 工作原理
- 链式调用
- 错误处理
- 并发控制

## EventEmitter
- 事件机制
- 监听器
- 事件触发
- 错误处理
- 内存管理

## 实现原理
- Promise实现
- 事件实现
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 调试技巧
- 常见问题
- 解决方案
EOF

# 创建14.6剖析server.js文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.6-剖析server.js.md" << 'EOF'
---
title: 剖析server.js
icon: server-analysis
order: 6
---

# 剖析server.js

## 基本结构
- 文件组织
- 模块依赖
- 配置管理
- 初始化流程
- 错误处理

## 核心功能
- 服务启动
- 路由处理
- 会话管理
- 事件处理
- 资源管理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建14.7剖析room.js文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.7-剖析room.js.md" << 'EOF'
---
title: 剖析room.js
icon: room-analysis
order: 7
---

# 剖析room.js

## 基本结构
- 文件组织
- 模块依赖
- 类设计
- 状态管理
- 错误处理

## 核心功能
- 房间创建
- 成员管理
- 媒体处理
- 事件处理
- 资源管理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建14.8如何调试MediasoupDemo文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.8-如何调试MediasoupDemo.md" << 'EOF'
---
title: 如何调试MediasoupDemo
icon: debug-mediasoup
order: 8
---

# 如何调试MediasoupDemo

## 调试环境
- 开发工具
- 调试工具
- 环境配置
- 日志设置
- 监控工具

## 调试方法
- 断点调试
- 日志分析
- 网络抓包
- 性能分析
- 内存检测

## 常见问题
- 连接问题
- 媒体问题
- 性能问题
- 内存问题
- 并发问题

## 最佳实践
- 调试策略
- 问题定位
- 解决方案
- 优化建议
- 预防措施
EOF

# 创建14.9运行时查看Mediasoup的核心信息文件
cat > "$BASE_DIR/第14章-mediasoup的信令系统/14.9-运行时查看Mediasoup的核心信息.md" << 'EOF'
---
title: 运行时查看Mediasoup的核心信息
icon: mediasoup-runtime
order: 9
---

# 运行时查看Mediasoup的核心信息

## 核心信息
- 运行状态
- 资源使用
- 连接信息
- 媒体统计
- 性能指标

## 监控方法
- 日志监控
- 性能监控
- 资源监控
- 网络监控
- 异常监控

## 分析工具
- 监控面板
- 分析工具
- 统计报表
- 诊断工具
- 调试工具

## 最佳实践
- 监控策略
- 分析方法
- 优化建议
- 问题处理
- 预防措施
EOF

# 创建第15章目录
mkdir -p "$BASE_DIR/第15章-mediasoup源码分析"

# 创建第15章README文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/README.md" << 'EOF'
---
title: mediasoup源码分析
icon: mediasoup-source
order: 15
---

# mediasoup源码分析

本章深入分析mediasoup的源码结构和实现原理。
EOF

# 创建15.1mediasoup库的架构讲解文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.1-mediasoup库的架构讲解.md" << 'EOF'
---
title: mediasoup库的架构讲解
icon: mediasoup-arch
order: 1
---

# mediasoup库的架构讲解

## 整体架构
- 架构设计
- 核心组件
- 工作原理
- 通信机制
- 扩展能力

## 核心模块
- 信令系统
- 媒体处理
- 资源管理
- 会话控制
- 性能优化

## 实现细节
- 代码结构
- 关键算法
- 数据流转
- 状态管理
- 错误处理

## 最佳实践
- 设计原则
- 优化策略
- 调试方法
- 性能调优
- 问题处理
EOF

# 创建15.2Mediasoup_JS的作用文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.2-Mediasoup_JS的作用.md" << 'EOF'
---
title: Mediasoup_JS的作用
icon: mediasoup-js
order: 2
---

# Mediasoup_JS的作用

## 基本功能
- 接口封装
- 事件处理
- 状态管理
- 错误处理
- 资源管理

## 核心特性
- API设计
- 通信机制
- 媒体控制
- 会话管理
- 扩展能力

## 实现机制
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 使用策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.3WebRTC中的C++类关系图文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.3-WebRTC中的C++类关系图.md" << 'EOF'
---
title: WebRTC中的C++类关系图
icon: webrtc-cpp
order: 3
---

# WebRTC中的C++类关系图

## 类结构
- 核心类
- 继承关系
- 组合关系
- 依赖关系
- 接口设计

## 功能模块
- 媒体处理
- 网络传输
- 信令控制
- 会话管理
- 资源控制

## 实现细节
- 类实现
- 数据流转
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 设计模式
- 优化策略
- 调试方法
- 性能调优
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建15.4Mediasoup启动详解文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.4-Mediasoup启动详解.md" << 'EOF'
---
title: Mediasoup启动详解
icon: mediasoup-startup
order: 4
---

# Mediasoup启动详解

## 启动流程
- 初始化过程
- 配置加载
- 资源分配
- 服务启动
- 错误处理

## 核心组件
- Worker进程
- Router创建
- Transport初始化
- Channel建立
- 事件处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 启动策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.5匿名管道进程间通信的原理文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.5-匿名管道进程间通信的原理.md" << 'EOF'
---
title: 匿名管道进程间通信的原理
icon: pipe-ipc
order: 5
---

# 匿名管道进程间通信的原理

## 基本概念
- 管道定义
- 工作原理
- 通信机制
- 数据流向
- 使用场景

## 实现机制
- 创建过程
- 数据传输
- 同步机制
- 错误处理
- 资源管理

## 核心特性
- 单向通信
- 缓冲机制
- 原子操作
- 阻塞特性
- 安全机制

## 最佳实践
- 使用策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.6实战通过socketpair进行进程间通信文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.6-实战通过socketpair进行进程间通信.md" << 'EOF'
---
title: 实战通过socketpair进行进程间通信
icon: socketpair-ipc
order: 6
---

# 实战通过socketpair进行进程间通信

## 基本实现
- 创建socketpair
- 数据传输
- 错误处理
- 资源管理
- 性能优化

## 核心功能
- 双向通信
- 数据封装
- 同步机制
- 异常处理
- 资源控制

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.7mediasoup下channel创建的详细过程文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.7-mediasoup下channel创建的详细过程.md" << 'EOF'
---
title: mediasoup下channel创建的详细过程
icon: channel-creation
order: 7
---

# mediasoup下channel创建的详细过程

## 创建流程
- 初始化过程
- 配置加载
- 资源分配
- 连接建立
- 错误处理

## 核心机制
- Channel设计
- 消息传递
- 状态管理
- 事件处理
- 资源控制

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.8mediasoup中的消息确信与发送事件机制文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.8-mediasoup中的消息确信与发送事件机制.md" << 'EOF'
---
title: mediasoup中的消息确信与发送事件机制
icon: message-event
order: 8
---

# mediasoup中的消息确信与发送事件机制

## 消息机制
- 消息类型
- 确认机制
- 重传策略
- 超时处理
- 错误恢复

## 事件系统
- 事件模型
- 事件分发
- 处理流程
- 异常处理
- 性能优化

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.9mediasoup的主业务流程1文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.9-mediasoup的主业务流程1.md" << 'EOF'
---
title: mediasoup的主业务流程1
icon: main-flow-1
order: 9
---

# mediasoup的主业务流程1

## 流程概述
- 初始化流程
- 会话建立
- 媒体协商
- 数据传输
- 会话管理

## 核心功能
- 信令处理
- 媒体控制
- 资源管理
- 状态维护
- 错误处理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.10mediasoup的主业务流程2文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.10-mediasoup的主业务流程2.md" << 'EOF'
---
title: mediasoup的主业务流程2
icon: main-flow-2
order: 10
---

# mediasoup的主业务流程2

## 流程扩展
- 高级功能
- 扩展机制
- 性能优化
- 安全控制
- 监控管理

## 业务处理
- 业务逻辑
- 数据处理
- 状态管理
- 错误处理
- 资源控制

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建15.11mediasoup连接的创建1文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.11-mediasoup连接的创建1.md" << 'EOF'
---
title: mediasoup连接的创建1
icon: connection-1
order: 11
---

# mediasoup连接的创建1

## 连接初始化
- 连接配置
- 资源分配
- 状态初始化
- 事件绑定
- 错误处理

## 核心流程
- 握手过程
- 参数协商
- 安全验证
- 资源分配
- 状态同步

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.12mediasoup连接的创建2文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.12-mediasoup连接的创建2.md" << 'EOF'
---
title: mediasoup连接的创建2
icon: connection-2
order: 12
---

# mediasoup连接的创建2

## 高级特性
- 连接复用
- 负载均衡
- 故障转移
- 会话保持
- 性能优化

## 扩展功能
- 连接监控
- 统计分析
- 安全控制
- 资源管理
- 日志追踪

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.13mediasoup数据流转1文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.13-mediasoup数据流转1.md" << 'EOF'
---
title: mediasoup数据流转1
icon: data-flow-1
order: 13
---

# mediasoup数据流转1

## 数据流程
- 数据接收
- 数据处理
- 数据转发
- 数据缓存
- 数据控制

## 核心机制
- 流量控制
- 拥塞控制
- 丢包处理
- 延迟控制
- 质量保证

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.14mediasoup数据流转2文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.14-mediasoup数据流转2.md" << 'EOF'
---
title: mediasoup数据流转2
icon: data-flow-2
order: 14
---

# mediasoup数据流转2

## 高级特性
- 数据分片
- 数据重组
- 优先级处理
- 带宽适应
- 质量监控

## 扩展功能
- 数据统计
- 性能分析
- 故障诊断
- 安全控制
- 资源管理

## 实现细节
- 代码实现
- 数据处理
- 状态维护
- 错误处理
- 性能优化

## 最佳实践
- 实现策略
- 优化方法
- 调试技巧
- 安全考虑
- 问题处理
EOF

# 创建15.15WebRTC流媒体服务器大规模布署方案文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.15-WebRTC流媒体服务器大规模布署方案.md" << 'EOF'
---
title: WebRTC流媒体服务器大规模布署方案
icon: large-scale-deploy
order: 15
---

# WebRTC流媒体服务器大规模布署方案

## 架构设计
- 系统架构
- 集群设计
- 负载均衡
- 容错机制
- 扩展能力

## 部署策略
- 资源规划
- 网络配置
- 安全策略
- 监控方案
- 运维管理

## 实现细节
- 部署流程
- 配置管理
- 性能优化
- 问题处理
- 维护升级

## 最佳实践
- 部署策略
- 优化方法
- 监控方案
- 安全考虑
- 问题处理
EOF

# 创建15.16哪种服务器性能好？(作业)文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.16-哪种服务器性能好？(作业).md" << 'EOF'
---
title: 哪种服务器性能好？(作业)
icon: server-performance
order: 16
---

# 哪种服务器性能好？(作业)

## 评估标准
- 性能指标
- 可靠性
- 可扩展性
- 维护成本
- 性价比

## 性能对比
- CPU利用率
- 内存使用
- 网络吞吐
- 并发能力
- 延迟指标

## 测试方法
- 测试环境
- 测试用例
- 数据收集
- 结果分析
- 性能优化

## 实践建议
- 选型策略
- 优化方法
- 部署建议
- 维护要点
- 升级路径
EOF

# 创建15.17mediasoup在Centos下该如何安装？(作业)文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.17-mediasoup在Centos下该如何安装？(作业).md" << 'EOF'
---
title: mediasoup在Centos下该如何安装？(作业)
icon: centos-install
order: 17
---

# mediasoup在Centos下该如何安装？(作业)

## 环境准备
- 系统要求
- 依赖安装
- 编译环境
- 网络配置
- 安全设置

## 安装步骤
- 源码获取
- 依赖安装
- 编译构建
- 配置设置
- 服务启动

## 配置优化
- 系统优化
- 网络优化
- 性能调优
- 安全加固
- 监控配置

## 实践指南
- 安装建议
- 常见问题
- 调试方法
- 维护要点
- 升级策略
EOF
BASE_DIR="/Users/guanrunbai/my/kphub/src/audio-video"

# 创建15.18mediasoup安装好后看不对远端视频(作业)文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.18-mediasoup安装好后看不对远端视频(作业).md" << 'EOF'
---
title: mediasoup安装好后看不对远端视频(作业)
icon: video-issue
order: 18
---

# mediasoup安装好后看不对远端视频(作业)

## 问题分析
- 现象描述
- 可能原因
- 排查方法
- 诊断工具
- 解决思路

## 排查步骤
- 网络检查
- 配置验证
- 日志分析
- 媒体流检测
- 连接测试

## 解决方案
- 配置调整
- 代码修复
- 环境优化
- 性能调优
- 测试验证

## 预防措施
- 配置检查
- 监控告警
- 日志记录
- 性能监测
- 定期维护
EOF

# 创建15.19mediasoup在Ubuntu18.04上安装报错(作业)文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.19-mediasoup在Ubuntu18.04上安装报错(作业).md" << 'EOF'
---
title: mediasoup在Ubuntu18.04上安装报错(作业)
icon: ubuntu-error
order: 19
---

# mediasoup在Ubuntu18.04上安装报错(作业)

## 问题分析
- 错误信息
- 可能原因
- 环境检查
- 依赖验证
- 解决思路

## 排查步骤
- 系统检查
- 依赖检查
- 编译检查
- 日志分析
- 环境验证

## 解决方案
- 环境配置
- 依赖安装
- 编译修复
- 配置调整
- 验证测试

## 预防措施
- 环境准备
- 依赖管理
- 版本控制
- 文档完善
- 测试流程
EOF

# 创建15.20单台mediasoup流媒体服务器能承载多少路流？(作业)文件
cat > "$BASE_DIR/第15章-mediasoup源码分析/15.20-单台mediasoup流媒体服务器能承载多少路流？(作业).md" << 'EOF'
---
title: 单台mediasoup流媒体服务器能承载多少路流？(作业)
icon: server-capacity
order: 20
---

# 单台mediasoup流媒体服务器能承载多少路流？(作业)

## 性能分析
- 硬件配置
- 网络带宽
- CPU使用率
- 内存占用
- 并发能力

## 测试方法
- 测试环境
- 测试工具
- 测试用例
- 数据收集
- 结果分析

## 优化建议
- 硬件优化
- 软件优化
- 网络优化
- 配置调优
- 架构改进

## 实践指南
- 容量规划
- 监控方案
- 预警机制
- 扩展策略
- 维护建议
EOF

# 创建第16章目录
mkdir -p "$BASE_DIR/第16章-课程总结"

# 创建第16章README文件
cat > "$BASE_DIR/第16章-课程总结/README.md" << 'EOF'
---
title: 课程总结
icon: course-summary
order: 16
---

# 课程总结

本章总结整个WebRTC服务器开发课程的主要内容和要点。
EOF

# 创建16.1小结文件
cat > "$BASE_DIR/第16章-课程总结/16.1-小结.md" << 'EOF'
---
title: 小结
icon: summary
order: 1
---

# 小结

## 知识回顾
- 基础概念
- 核心技术
- 实现原理
- 最佳实践
- 发展趋势

## 技能提升
- 技术积累
- 实践经验
- 问题解决
- 架构设计
- 性能优化

## 应用展望
- 技术发展
- 应用场景
- 解决方案
- 创新方向
- 未来趋势

## 学习建议
- 知识巩固
- 实践强化
- 持续学习
- 技术更新
- 经验总结
EOF