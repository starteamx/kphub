BASE_DIR="c:\project\kphub\src\object-c"

# 创建主README.md
cat > "$BASE_DIR/README.md" << 'EOF'
---
title: Object-C教程
icon: object-c
order: 1
---

# Object-C教程

本教程系统地介绍了Object-C编程语言的核心概念和实践应用，从基础语法到高级特性，帮助开发者掌握iOS和macOS开发的基础知识。
EOF

# 创建第1章目录及其README
mkdir -p "$BASE_DIR/第1章-面向对象的编程"
cat > "$BASE_DIR/第1章-面向对象的编程/README.md" << 'EOF'
---
title: 面向对象的编程
icon: oop
order: 1
---

# 面向对象的编程

本章介绍面向对象编程的基本概念和核心思想。
EOF

# 创建1.1目录及其README
mkdir -p "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念"
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/README.md" << 'EOF'
---
title: 对象的概念
icon: object
order: 1
---

# 对象的概念

本节介绍面向对象编程中对象的基本概念。
EOF

# 创建1.1.1文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/1.1.1-面向功能的软件设计的局限性.md" << 'EOF'
---
title: 面向功能的软件设计的局限性
icon: limitation
order: 1
---

# 面向功能的软件设计的局限性

## 主要局限性
- 代码复用困难
- 维护成本高
- 扩展性差
- 耦合度高
- 测试困难

## 具体表现
- 功能之间耦合
- 数据流复杂
- 代码重复
- 修改影响范围大
- 调试困难

## 解决方案
- 模块化设计
- 数据封装
- 接口设计
- 解耦策略
- 测试方案

## 最佳实践
- 设计原则
- 重构方法
- 测试策略
- 维护建议
- 优化方案
EOF

# 创建1.1.2文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/1.1.2-面向对象的模块化.md" << 'EOF'
---
title: 面向对象的模块化
icon: module
order: 2
---

# 面向对象的模块化

## 基本概念
- 类的定义
- 对象实例
- 属性方法
- 封装继承
- 多态特性

## 模块设计
- 职责划分
- 接口设计
- 依赖管理
- 耦合控制
- 内聚原则

## 实现技术
- 类的实现
- 消息传递
- 状态管理
- 生命周期
- 内存管理

## 最佳实践
- 设计模式
- 代码组织
- 测试方法
- 维护策略
- 优化建议
EOF

# 创建1.1.3文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/1.1.3-消息传递.md" << 'EOF'
---
title: 消息传递
icon: message
order: 3
---

# 消息传递

## 基本概念
- 消息定义
- 消息类型
- 传递机制
- 响应链
- 异常处理

## 实现方式
- 同步消息
- 异步消息
- 广播消息
- 委托模式
- 观察者模式

## 性能优化
- 消息队列
- 缓存策略
- 内存管理
- 并发控制
- 错误处理

## 最佳实践
- 设计模式
- 实现技巧
- 调试方法
- 性能优化
- 维护建议
EOF

# 创建1.1.4文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/1.1.4-模块的抽象化.md" << 'EOF'
---
title: 模块的抽象化
icon: abstract
order: 4
---

# 模块的抽象化

## 抽象概念
- 抽象类
- 接口定义
- 多态实现
- 封装原则
- 继承关系

## 设计原则
- 单一职责
- 开闭原则
- 里氏替换
- 接口隔离
- 依赖倒置

## 实现技术
- 抽象类实现
- 接口实现
- 多态应用
- 继承使用
- 组合模式

## 最佳实践
- 设计模式
- 代码组织
- 测试方法
- 维护策略
- 优化建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建1.1.5对象的属性文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/1.1.5-对象的属性.md" << 'EOF'
---
title: 对象的属性
icon: property
order: 5
---

# 对象的属性

## 基本概念
- 属性定义
- 访问控制
- 存取方法
- 属性特性
- 内存管理

## 属性类型
- 实例属性
- 类属性
- 计算属性
- 存储属性
- 原子性属性

## 实现机制
- 属性声明
- 属性合成
- 属性重写
- 属性观察
- KVC支持

## 最佳实践
- 命名规范
- 访问控制
- 线程安全
- 内存管理
- 性能优化
EOF

# 创建专栏面向对象的方方面面文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/专栏-面向对象的方方面面.md" << 'EOF'
---
title: 面向对象的方方面面
icon: oop-aspects
order: 6
---

# 面向对象的方方面面

## 核心概念
- 封装性
- 继承性
- 多态性
- 抽象性
- 消息机制

## 设计原则
- SOLID原则
- DRY原则
- KISS原则
- 组合优于继承
- 接口隔离

## 实践应用
- 设计模式
- 架构模式
- 重构技术
- 测试方法
- 性能优化

## 发展趋势
- 函数式特性
- 响应式编程
- 并发编程
- 元编程
- 混合范式
EOF

# 创建1.1.6类文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/1.1.6-类.md" << 'EOF'
---
title: 类
icon: class
order: 7
---

# 类

## 基本概念
- 类的定义
- 类的结构
- 类的成员
- 类的方法
- 类的接口

## 类的特性
- 封装性
- 继承性
- 多态性
- 抽象性
- 组合性

## 实现机制
- 类的创建
- 实例化过程
- 方法调用
- 内存管理
- 生命周期

## 最佳实践
- 设计原则
- 命名规范
- 代码组织
- 性能优化
- 维护策略
EOF

# 创建专栏Cocoa和Objective-C的历史文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.1-对象的概念/专栏-Cocoa和Objective-C的历史.md" << 'EOF'
---
title: Cocoa和Objective-C的历史
icon: history
order: 8
---

# Cocoa和Objective-C的历史

## 发展历程
- 起源背景
- 重要里程碑
- 版本演进
- 技术创新
- 生态发展

## 核心特性
- 语言特点
- 框架优势
- 开发模式
- 运行机制
- 工具支持

## 技术影响
- 行业影响
- 技术创新
- 最佳实践
- 发展趋势
- 未来展望

## 实践经验
- 开发模式
- 设计思想
- 架构演进
- 工程实践
- 性能优化
EOF

# 创建1.2模块和对象目录及其README
mkdir -p "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象"
cat > "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象/README.md" << 'EOF'
---
title: 模块和对象
icon: module-object
order: 2
---

# 模块和对象

本节介绍模块化编程和对象之间的关系。
EOF

# 创建1.2.1软件模块文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象/1.2.1-软件模块.md" << 'EOF'
---
title: 软件模块
icon: software-module
order: 1
---

# 软件模块

## 基本概念
- 模块定义
- 模块接口
- 模块封装
- 模块依赖
- 模块通信

## 设计原则
- 高内聚
- 低耦合
- 单一职责
- 接口隔离
- 依赖倒置

## 实现技术
- 模块划分
- 接口设计
- 依赖管理
- 版本控制
- 测试策略

## 最佳实践
- 设计模式
- 代码组织
- 测试方法
- 维护策略
- 优化建议
EOF

# 创建1.2.2高独立性的模块文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象/1.2.2-高独立性的模块.md" << 'EOF'
---
title: 高独立性的模块
icon: independent-module
order: 2
---

# 高独立性的模块

## 设计原则
- 内聚性
- 耦合度
- 接口设计
- 依赖管理
- 扩展性

## 实现技术
- 接口封装
- 依赖注入
- 事件驱动
- 消息通信
- 状态管理

## 质量保证
- 单元测试
- 接口测试
- 性能测试
- 可靠性
- 可维护性

## 最佳实践
- 设计模式
- 代码组织
- 测试策略
- 维护方法
- 优化建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建1.2.3模块的信息隐蔽文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象/1.2.3-模块的信息隐蔽.md" << 'EOF'
---
title: 模块的信息隐蔽
icon: information-hiding
order: 3
---

# 模块的信息隐蔽

## 基本概念
- 信息隐蔽原则
- 访问控制
- 接口设计
- 实现封装
- 数据保护

## 实现机制
- 访问修饰符
- 封装技术
- 接口定义
- 数据保护
- 权限控制

## 设计策略
- 接口设计
- 实现分离
- 依赖管理
- 版本控制
- 安全机制

## 最佳实践
- 设计模式
- 代码组织
- 测试方法
- 维护策略
- 优化建议
EOF

# 创建1.2.4类的定义和接口文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象/1.2.4-类的定义和接口.md" << 'EOF'
---
title: 类的定义和接口
icon: class-interface
order: 4
---

# 类的定义和接口

## 类定义
- 类的声明
- 成员变量
- 方法定义
- 访问控制
- 继承关系

## 接口设计
- 接口声明
- 方法协议
- 属性要求
- 协议遵守
- 扩展支持

## 实现机制
- 类的实现
- 接口实现
- 多重继承
- 协议采纳
- 类别扩展

## 最佳实践
- 设计原则
- 命名规范
- 文档注释
- 测试策略
- 维护建议
EOF

# 创建1.2.5消息发送的实现文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象/1.2.5-消息发送的实现.md" << 'EOF'
---
title: 消息发送的实现
icon: message-sending
order: 5
---

# 消息发送的实现

## 基本原理
- 消息机制
- 方法调用
- 动态绑定
- 消息转发
- 运行时系统

## 实现细节
- 方法查找
- 消息转发
- 方法缓存
- 动态解析
- 性能优化

## 高级特性
- 消息拦截
- 消息重定向
- 方法替换
- 动态方法
- 消息转换

## 最佳实践
- 设计模式
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建专栏C语言的新标准文件
cat > "$BASE_DIR/第1章-面向对象的编程/1.2-模块和对象/专栏-C语言的新标准.md" << 'EOF'
---
title: C语言的新标准
icon: c-standard
order: 6
---

# C语言的新标准

## 标准演进
- C89/90标准
- C99标准
- C11标准
- C17标准
- C23标准

## 主要特性
- 语言特性
- 标准库
- 安全增强
- 并发支持
- 性能优化

## 实践应用
- 代码迁移
- 特性使用
- 兼容性
- 工具支持
- 最佳实践

## 发展趋势
- 未来规划
- 新特性提案
- 标准化进程
- 工具链支持
- 生态发展
EOF

# 创建第2章目录及其README
mkdir -p "$BASE_DIR/第2章-Objective-C程序设计"
cat > "$BASE_DIR/第2章-Objective-C程序设计/README.md" << 'EOF'
---
title: Objective-C程序设计
icon: objective-c
order: 2
---

# Objective-C程序设计

本章介绍Objective-C编程语言的核心概念和编程技术。
EOF

# 创建2.1对象和消息目录及其README
mkdir -p "$BASE_DIR/第2章-Objective-C程序设计/2.1-对象和消息"
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.1-对象和消息/README.md" << 'EOF'
---
title: 对象和消息
icon: object-message
order: 1
---

# 对象和消息

本节介绍Objective-C中对象和消息传递机制的基本概念。
EOF

# 创建2.1.1消息表达式文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.1-对象和消息/2.1.1-消息表达式.md" << 'EOF'
---
title: 消息表达式
icon: message-expression
order: 1
---

# 消息表达式

## 基本语法
- 消息语法
- 方法调用
- 参数传递
- 返回值
- 表达式嵌套

## 消息类型
- 实例消息
- 类消息
- 超类消息
- 转发消息
- 嵌套消息

## 实现机制
- 消息查找
- 方法调用
- 动态绑定
- 消息转发
- 性能优化

## 最佳实践
- 设计模式
- 代码风格
- 调试技巧
- 错误处理
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建2.1.2消息选择器文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.1-对象和消息/2.1.2-消息选择器.md" << 'EOF'
---
title: 消息选择器
icon: selector
order: 2
---

# 消息选择器

## 基本概念
- 选择器定义
- SEL类型
- 方法签名
- 动态绑定
- 运行时特性

## 选择器操作
- 创建选择器
- 比较选择器
- 注册选择器
- 查找方法
- 动态调用

## 实现机制
- 方法表
- 缓存机制
- 查找算法
- 性能优化
- 内存管理

## 最佳实践
- 命名规范
- 错误处理
- 性能考虑
- 调试技巧
- 安全建议
EOF

# 创建2.1.3实例变量的生成和初始化文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.1-对象和消息/2.1.3-实例变量的生成和初始化.md" << 'EOF'
---
title: 实例变量的生成和初始化
icon: instance-init
order: 3
---

# 实例变量的生成和初始化

## 内存分配
- 对象创建
- 内存布局
- 变量存储
- 引用计数
- 内存管理

## 初始化过程
- init方法
- 构造函数
- 属性设置
- 继承关系
- 错误处理

## 生命周期
- 对象创建
- 状态维护
- 引用管理
- 销毁过程
- 内存回收

## 最佳实践
- 初始化模式
- 内存管理
- 错误处理
- 性能优化
- 调试技巧
EOF

# 创建2.2类的定义目录及其README
mkdir -p "$BASE_DIR/第2章-Objective-C程序设计/2.2-类的定义"
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.2-类的定义/README.md" << 'EOF'
---
title: 类的定义
icon: class-definition
order: 2
---

# 类的定义

本节介绍Objective-C中类的定义方法和相关概念。
EOF

# 创建2.2.1类的接口声明文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.2-类的定义/2.2.1-类的接口声明.md" << 'EOF'
---
title: 类的接口声明
icon: interface-declaration
order: 1
---

# 类的接口声明

## 基本语法
- 接口定义
- 属性声明
- 方法声明
- 协议采纳
- 类扩展

## 声明组成
- 实例变量
- 属性特性
- 方法类型
- 访问控制
- 继承关系

## 设计原则
- 接口设计
- 封装原则
- 继承策略
- 协议使用
- 扩展机制

## 最佳实践
- 命名规范
- 文档注释
- 版本控制
- 兼容性
- 维护建议
EOF

# 创建专栏各种各样的布尔类型文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.2-类的定义/专栏-各种各样的布尔类型.md" << 'EOF'
---
title: 各种各样的布尔类型
icon: boolean-types
order: 2
---

# 各种各样的布尔类型

## 基本类型
- BOOL类型
- Boolean类型
- bool类型
- _Bool类型
- NSNumber封装

## 使用场景
- 条件判断
- 状态标记
- 标志位
- 返回值
- 参数传递

## 类型转换
- 类型兼容
- 隐式转换
- 显式转换
- 数值转换
- 对象转换

## 最佳实践
- 类型选择
- 命名规范
- 性能考虑
- 兼容性
- 调试建议
EOF

# 创建专栏不指定方法的返回值文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.2-类的定义/专栏-不指定方法的返回值.md" << 'EOF'
---
title: 不指定方法的返回值
icon: return-value
order: 3
---

# 不指定方法的返回值

## 基本概念
- id类型
- void返回
- 隐式返回
- 动态类型
- 类型推断

## 使用场景
- 通用方法
- 工厂方法
- 初始化方法
- 链式调用
- 多态实现

## 注意事项
- 类型安全
- 编译警告
- 运行时检查
- 性能影响
- 调试难度

## 最佳实践
- 返回类型
- 错误处理
- 文档说明
- 测试策略
- 维护建议
EOF

# 创建2.2.2类的实现文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.2-类的定义/2.2.2-类的实现.md" << 'EOF'
---
title: 类的实现
icon: class-implementation
order: 4
---

# 类的实现

## 实现结构
- 方法实现
- 变量管理
- 生命周期
- 内存管理
- 异常处理

## 核心机制
- 消息传递
- 方法调用
- 状态维护
- 引用计数
- 垃圾回收

## 高级特性
- 分类实现
- 扩展实现
- 协议实现
- 动态方法
- 消息转发

## 最佳实践
- 代码组织
- 性能优化
- 内存管理
- 错误处理
- 调试技巧
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建2.2.3一个遥控器的例子文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.2-类的定义/2.2.3-一个遥控器的例子.md" << 'EOF'
---
title: 一个遥控器的例子
icon: remote-control
order: 5
---

# 一个遥控器的例子

## 类设计
- 遥控器类
- 按钮类
- 命令接口
- 设备类
- 状态管理

## 功能实现
- 按键响应
- 命令模式
- 状态切换
- 设备控制
- 错误处理

## 代码示例
- 类定义
- 方法实现
- 接口设计
- 状态管理
- 异常处理

## 最佳实践
- 设计模式
- 代码组织
- 测试方法
- 扩展性
- 维护建议
EOF

# 创建2.3编译目录及其README
mkdir -p "$BASE_DIR/第2章-Objective-C程序设计/2.3-编译"
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.3-编译/README.md" << 'EOF'
---
title: 编译
icon: compile
order: 3
---

# 编译

本节介绍Objective-C程序的编译过程和方法。
EOF

# 创建2.3.1简单的编译方法文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.3-编译/2.3.1-简单的编译方法.md" << 'EOF'
---
title: 简单的编译方法
icon: simple-compile
order: 1
---

# 简单的编译方法

## 基本步骤
- 源文件准备
- 编译命令
- 链接过程
- 错误处理
- 输出文件

## 编译选项
- 优化级别
- 警告控制
- 调试信息
- 目标平台
- 库依赖

## 常见问题
- 语法错误
- 链接错误
- 警告处理
- 版本兼容
- 路径问题

## 最佳实践
- 编译配置
- 错误处理
- 调试技巧
- 性能优化
- 维护建议
EOF

# 创建2.3.2多文件编译文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.3-编译/2.3.2-多文件编译.md" << 'EOF'
---
title: 多文件编译
icon: multi-file-compile
order: 2
---

# 多文件编译

## 编译流程
- 依赖分析
- 编译顺序
- 链接过程
- 资源管理
- 输出处理

## 构建工具
- Make工具
- Xcode构建
- 自动化脚本
- 依赖管理
- 版本控制

## 优化策略
- 增量编译
- 并行编译
- 预编译头
- 链接优化
- 调试支持

## 最佳实践
- 项目组织
- 依赖管理
- 构建配置
- 性能优化
- 维护建议
EOF

# 创建2.4程序的书写风格目录及其README
mkdir -p "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格"
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格/README.md" << 'EOF'
---
title: 程序的书写风格
icon: coding-style
order: 4
---

# 程序的书写风格

本节介绍Objective-C程序的编码规范和最佳实践。
EOF

# 创建2.4.1混合编程文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格/2.4.1-混合编程.md" << 'EOF'
---
title: 混合编程
icon: mixed-programming
order: 1
---

# 混合编程

## 语言集成
- C语言集成
- C++集成
- 框架调用
- 桥接技术
- 互操作性

## 代码组织
- 文件结构
- 命名规范
- 接口设计
- 类型转换
- 内存管理

## 混合策略
- 功能划分
- 接口设计
- 性能优化
- 调试方法
- 错误处理

## 最佳实践
- 设计模式
- 代码规范
- 测试策略
- 维护建议
- 文档规范
EOF

# 创建2.4.2C语言函数的使用方法文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格/2.4.2-C语言函数的使用方法.md" << 'EOF'
---
title: C语言函数的使用方法
icon: c-function
order: 2
---

# C语言函数的使用方法

## 基本用法
- 函数声明
- 参数传递
- 返回值
- 类型转换
- 错误处理

## 集成技术
- 函数封装
- 回调机制
- 指针使用
- 内存管理
- 异常处理

## 性能优化
- 内联函数
- 参数优化
- 内存管理
- 缓存策略
- 算法优化

## 最佳实践
- 命名规范
- 错误处理
- 文档注释
- 测试方法
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建2.4.3静态变量的定义文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格/2.4.3-静态变量的定义.md" << 'EOF'
---
title: 静态变量的定义
icon: static-variable
order: 3
---

# 静态变量的定义

## 基本概念
- 静态变量特性
- 作用域规则
- 生命周期
- 内存分配
- 初始化机制

## 使用场景
- 全局状态
- 单例模式
- 常量定义
- 缓存数据
- 计数器实现

## 注意事项
- 线程安全
- 内存管理
- 初始化顺序
- 访问控制
- 命名规范

## 最佳实践
- 设计模式
- 性能优化
- 调试技巧
- 维护建议
- 文档规范
EOF

# 创建2.4.4头文件的引入文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格/2.4.4-头文件的引入.md" << 'EOF'
---
title: 头文件的引入
icon: header-include
order: 4
---

# 头文件的引入

## 基本用法
- 引入语法
- 搜索路径
- 预处理指令
- 循环引用
- 条件编译

## 组织方式
- 模块化设计
- 依赖管理
- 命名规范
- 版本控制
- 文件结构

## 最佳实践
- 引入顺序
- 防重复引入
- 依赖优化
- 命名约定
- 注释规范

## 常见问题
- 循环依赖
- 命名冲突
- 路径问题
- 版本兼容
- 编译错误
EOF

# 创建专栏参考文档和SDK文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格/专栏-参考文档和SDK.md" << 'EOF'
---
title: 参考文档和SDK
icon: documentation
order: 5
---

# 参考文档和SDK

## 官方文档
- 语言规范
- API文档
- 开发指南
- 最佳实践
- 示例代码

## SDK资源
- 框架概述
- 工具集成
- 示例项目
- 调试工具
- 性能分析

## 学习资源
- 教程指南
- 开发社区
- 技术博客
- 视频教程
- 书籍推荐

## 实践建议
- 版本选择
- 环境配置
- 工具使用
- 调试技巧
- 性能优化
EOF

# 创建专栏Xcode的安装文件
cat > "$BASE_DIR/第2章-Objective-C程序设计/2.4-程序的书写风格/专栏-Xcode的安装.md" << 'EOF'
---
title: Xcode的安装
icon: xcode
order: 6
---

# Xcode的安装

## 安装准备
- 系统要求
- 硬件要求
- 网络环境
- 存储空间
- Apple ID

## 安装步骤
- 下载方式
- 安装过程
- 初始配置
- 组件选择
- 环境设置

## 常见问题
- 下载问题
- 安装错误
- 环境配置
- 版本兼容
- 性能优化

## 使用技巧
- 界面定制
- 快捷键
- 插件管理
- 调试技巧
- 性能优化
EOF

# 创建第3章目录及其README
mkdir -p "$BASE_DIR/第3章-类和继承"
cat > "$BASE_DIR/第3章-类和继承/README.md" << 'EOF'
---
title: 类和继承
icon: inheritance
order: 3
---

# 类和继承

本章介绍Objective-C中类和继承的概念及应用。
EOF

# 创建3.1继承的概念目录及其README
mkdir -p "$BASE_DIR/第3章-类和继承/3.1-继承的概念"
cat > "$BASE_DIR/第3章-类和继承/3.1-继承的概念/README.md" << 'EOF'
---
title: 继承的概念
icon: inheritance-concept
order: 1
---

# 继承的概念

本节介绍面向对象编程中继承的基本概念和应用。
EOF

# 创建3.1.1父类和子类文件
cat > "$BASE_DIR/第3章-类和继承/3.1-继承的概念/3.1.1-父类和子类.md" << 'EOF'
---
title: 父类和子类
icon: parent-child
order: 1
---

# 父类和子类

## 基本概念
- 继承关系
- 类层次结构
- 方法继承
- 属性继承
- 访问控制

## 实现机制
- 继承语法
- 方法重写
- 初始化链
- 属性覆盖
- 多重继承

## 设计原则
- 继承策略
- 封装原则
- 多态应用
- 接口设计
- 组合优先

## 最佳实践
- 设计模式
- 代码组织
- 测试方法
- 维护策略
- 重构技巧
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建3.1.2类的层次结构文件
cat > "$BASE_DIR/第3章-类和继承/3.1-继承的概念/3.1.2-类的层次结构.md" << 'EOF'
---
title: 类的层次结构
icon: class-hierarchy
order: 2
---

# 类的层次结构

## 基本概念
- 继承树
- 类层次
- 根类
- 子类关系
- 继承深度

## 设计原则
- 层次划分
- 抽象层次
- 接口设计
- 职责分配
- 复用策略

## 实现技术
- 类型系统
- 方法查找
- 动态绑定
- 多态实现
- 继承链

## 最佳实践
- 继承深度
- 接口设计
- 类型检查
- 性能优化
- 维护策略
EOF

# 创建3.2利用继承定义新类目录及其README
mkdir -p "$BASE_DIR/第3章-类和继承/3.2-利用继承定义新类"
cat > "$BASE_DIR/第3章-类和继承/3.2-利用继承定义新类/README.md" << 'EOF'
---
title: 利用继承定义新类
icon: inheritance-class
order: 2
---

# 利用继承定义新类

本节介绍如何通过继承机制创建新的类。
EOF

# 创建3.2.1继承的定义文件
cat > "$BASE_DIR/第3章-类和继承/3.2-利用继承定义新类/3.2.1-继承的定义.md" << 'EOF'
---
title: 继承的定义
icon: inheritance-definition
order: 1
---

# 继承的定义

## 基本语法
- 继承声明
- 访问控制
- 方法重写
- 属性继承
- 初始化链

## 实现机制
- 继承关系
- 方法表
- 属性列表
- 运行时机制
- 消息转发

## 设计原则
- 单一职责
- 开闭原则
- 里氏替换
- 接口隔离
- 依赖倒置

## 最佳实践
- 继承策略
- 方法覆盖
- 初始化链
- 错误处理
- 维护建议
EOF

# 创建3.2.2类定义和头文件文件
cat > "$BASE_DIR/第3章-类和继承/3.2-利用继承定义新类/3.2.2-类定义和头文件.md" << 'EOF'
---
title: 类定义和头文件
icon: class-header
order: 2
---

# 类定义和头文件

## 文件组织
- 头文件结构
- 实现文件
- 类声明
- 方法声明
- 属性定义

## 编码规范
- 命名规则
- 注释规范
- 代码格式
- 文件组织
- 版本控制

## 最佳实践
- 文件结构
- 依赖管理
- 访问控制
- 版本管理
- 文档规范

## 常见问题
- 循环引用
- 命名冲突
- 依赖问题
- 编译错误
- 版本兼容
EOF

# 创建3.2.3继承和方法调用文件
cat > "$BASE_DIR/第3章-类和继承/3.2-利用继承定义新类/3.2.3-继承和方法调用.md" << 'EOF'
---
title: 继承和方法调用
icon: inheritance-method
order: 3
---

# 继承和方法调用

## 方法调用
- 消息发送
- 方法查找
- 动态绑定
- 方法重写
- 超类调用

## 实现机制
- 方法表
- 消息转发
- 运行时系统
- 方法缓存
- 性能优化

## 调用规则
- 方法查找
- 重写规则
- 访问控制
- 异常处理
- 返回值

## 最佳实践
- 设计模式
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建3.2.4调用父类的方法文件
cat > "$BASE_DIR/第3章-类和继承/3.2-利用继承定义新类/3.2.4-调用父类的方法.md" << 'EOF'
---
title: 调用父类的方法
icon: super-method
order: 4
---

# 调用父类的方法

## 基本语法
- super关键字
- 方法调用
- 参数传递
- 返回值处理
- 异常处理

## 使用场景
- 初始化链
- 方法重写
- 属性访问
- 构造函数
- 析构函数

## 注意事项
- 调用时机
- 参数匹配
- 返回值处理
- 异常处理
- 性能影响

## 最佳实践
- 设计模式
- 代码组织
- 测试方法
- 维护策略
- 优化建议
EOF

# 创建3.2.5初始化方法的定义文件
cat > "$BASE_DIR/第3章-类和继承/3.2-利用继承定义新类/3.2.5-初始化方法的定义.md" << 'EOF'
---
title: 初始化方法的定义
icon: init-method
order: 5
---

# 初始化方法的定义

## 基本概念
- init方法
- 构造函数
- 初始化链
- 参数传递
- 返回值

## 实现机制
- 内存分配
- 属性初始化
- 继承链调用
- 错误处理
- 返回对象

## 设计原则
- 初始化策略
- 参数设计
- 错误处理
- 内存管理
- 线程安全

## 最佳实践
- 命名规范
- 参数验证
- 错误处理
- 内存管理
- 文档规范
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建3.3使用继承的程序示例目录及其README
mkdir -p "$BASE_DIR/第3章-类和继承/3.3-使用继承的程序示例"
cat > "$BASE_DIR/第3章-类和继承/3.3-使用继承的程序示例/README.md" << 'EOF'
---
title: 使用继承的程序示例
icon: inheritance-example
order: 3
---

# 使用继承的程序示例

本节通过实际示例展示继承的使用方法。
EOF

# 创建3.3.1追加新方法的例子文件
cat > "$BASE_DIR/第3章-类和继承/3.3-使用继承的程序示例/3.3.1-追加新方法的例子.md" << 'EOF'
---
title: 追加新方法的例子
icon: add-method
order: 1
---

# 追加新方法的例子

## 基本概念
- 方法追加
- 方法声明
- 实现细节
- 访问控制
- 继承关系

## 实现步骤
- 类设计
- 方法定义
- 参数设计
- 返回值
- 错误处理

## 示例说明
- 代码结构
- 实现逻辑
- 调用方式
- 测试方法
- 注意事项

## 最佳实践
- 命名规范
- 代码组织
- 测试策略
- 文档规范
- 维护建议
EOF

# 创建3.3.2方法重写的例子文件
cat > "$BASE_DIR/第3章-类和继承/3.3-使用继承的程序示例/3.3.2-方法重写的例子.md" << 'EOF'
---
title: 方法重写的例子
icon: override-method
order: 2
---

# 方法重写的例子

## 基本概念
- 重写定义
- 方法匹配
- 参数要求
- 返回类型
- 访问控制

## 实现步骤
- 父类方法
- 子类重写
- 参数处理
- 返回值
- 异常处理

## 示例说明
- 代码结构
- 实现逻辑
- 调用方式
- 测试方法
- 注意事项

## 最佳实践
- 重写规范
- 代码组织
- 测试策略
- 文档要求
- 维护建议
EOF

# 创建3.4继承和方法调用目录及其README
mkdir -p "$BASE_DIR/第3章-类和继承/3.4-继承和方法调用"
cat > "$BASE_DIR/第3章-类和继承/3.4-继承和方法调用/README.md" << 'EOF'
---
title: 继承和方法调用
icon: inheritance-method-call
order: 4
---

# 继承和方法调用

本节介绍继承中的方法调用机制。
EOF

# 创建3.4.1使用self调用方法文件
cat > "$BASE_DIR/第3章-类和继承/3.4-继承和方法调用/3.4.1-使用self调用方法.md" << 'EOF'
---
title: 使用self调用方法
icon: self-call
order: 1
---

# 使用self调用方法

## 基本概念
- self关键字
- 实例方法
- 消息传递
- 方法查找
- 动态绑定

## 使用场景
- 实例方法
- 属性访问
- 初始化
- 方法链式
- 递归调用

## 实现机制
- 消息发送
- 方法查找
- 动态绑定
- 运行时系统
- 性能优化

## 最佳实践
- 使用规范
- 代码组织
- 测试方法
- 性能考虑
- 维护建议
EOF

# 创建3.4.2使用super调用方法文件
cat > "$BASE_DIR/第3章-类和继承/3.4-继承和方法调用/3.4.2-使用super调用方法.md" << 'EOF'
---
title: 使用super调用方法
icon: super-call
order: 2
---

# 使用super调用方法

## 基本概念
- super关键字
- 父类方法
- 方法重写
- 初始化链
- 访问控制

## 使用场景
- 父类方法
- 初始化
- 方法重写
- 属性访问
- 析构过程

## 实现机制
- 方法查找
- 消息转发
- 运行时系统
- 性能优化
- 内存管理

## 最佳实践
- 使用规范
- 代码组织
- 测试方法
- 性能考虑
- 维护建议
EOF

# 创建3.4.3测试程序文件
cat > "$BASE_DIR/第3章-类和继承/3.4-继承和方法调用/3.4.3-测试程序.md" << 'EOF'
---
title: 测试程序
icon: test-program
order: 3
---

# 测试程序

## 测试设计
- 测试用例
- 测试场景
- 边界条件
- 异常处理
- 性能测试

## 实现方法
- 单元测试
- 集成测试
- 功能测试
- 性能测试
- 回归测试

## 测试工具
- 测试框架
- 断言机制
- 模拟对象
- 测试覆盖
- 性能分析

## 最佳实践
- 测试规范
- 代码组织
- 文档要求
- 持续集成
- 维护策略
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建3.5方法定义时的注意事项目录及其README
mkdir -p "$BASE_DIR/第3章-类和继承/3.5-方法定义时的注意事项"
cat > "$BASE_DIR/第3章-类和继承/3.5-方法定义时的注意事项/README.md" << 'EOF'
---
title: 方法定义时的注意事项
icon: method-definition
order: 5
---

# 方法定义时的注意事项

本节介绍在定义方法时需要注意的关键点。
EOF

# 创建3.5.1局部方法文件
cat > "$BASE_DIR/第3章-类和继承/3.5-方法定义时的注意事项/3.5.1-局部方法.md" << 'EOF'
---
title: 局部方法
icon: local-method
order: 1
---

# 局部方法

## 基本概念
- 局部方法定义
- 作用域
- 访问控制
- 生命周期
- 内存管理

## 使用场景
- 私有实现
- 辅助方法
- 内部处理
- 封装实现
- 代码复用

## 注意事项
- 命名规范
- 访问限制
- 内存管理
- 线程安全
- 性能考虑

## 最佳实践
- 设计原则
- 代码组织
- 测试策略
- 文档规范
- 维护建议
EOF

# 创建3.5.2指定初始化方法文件
cat > "$BASE_DIR/第3章-类和继承/3.5-方法定义时的注意事项/3.5.2-指定初始化方法.md" << 'EOF'
---
title: 指定初始化方法
icon: designated-init
order: 2
---

# 指定初始化方法

## 基本概念
- 指定初始化器
- 便利初始化器
- 初始化链
- 参数设计
- 返回值

## 实现机制
- 初始化流程
- 参数处理
- 错误处理
- 内存分配
- 状态设置

## 设计原则
- 初始化策略
- 参数验证
- 错误处理
- 内存管理
- 线程安全

## 最佳实践
- 命名规范
- 参数设计
- 错误处理
- 文档要求
- 测试策略
EOF

# 创建专栏Objective-C与开源软件文件
cat > "$BASE_DIR/第3章-类和继承/专栏-Objective-C与开源软件.md" << 'EOF'
---
title: Objective-C与开源软件
icon: open-source
order: 6
---

# Objective-C与开源软件

## 开源生态
- 开源框架
- 常用库
- 社区贡献
- 许可证类型
- 版本控制

## 主要项目
- 框架介绍
- 使用场景
- 最佳实践
- 性能特点
- 社区支持

## 开发工具
- IDE选择
- 调试工具
- 性能分析
- 测试框架
- 持续集成

## 最佳实践
- 项目选择
- 集成策略
- 版本管理
- 问题解决
- 社区参与
EOF

# 创建第4章目录及其README
mkdir -p "$BASE_DIR/第4章-对象的类型和动态绑定"
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/README.md" << 'EOF'
---
title: 对象的类型和动态绑定
icon: type-binding
order: 4
---

# 对象的类型和动态绑定

本章介绍Objective-C中对象类型系统和动态绑定机制。
EOF

# 创建4.1动态绑定目录及其README
mkdir -p "$BASE_DIR/第4章-对象的类型和动态绑定/4.1-动态绑定"
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.1-动态绑定/README.md" << 'EOF'
---
title: 动态绑定
icon: dynamic-binding
order: 1
---

# 动态绑定

本节介绍Objective-C的动态绑定机制。
EOF

# 创建4.1.1什么是动态绑定文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.1-动态绑定/4.1.1-什么是动态绑定.md" << 'EOF'
---
title: 什么是动态绑定
icon: dynamic-binding-intro
order: 1
---

# 什么是动态绑定

## 基本概念
- 动态绑定定义
- 运行时特性
- 消息传递
- 方法解析
- 多态实现

## 工作机制
- 方法查找
- 消息转发
- 动态解析
- 运行时系统
- 性能优化

## 应用场景
- 多态实现
- 插件机制
- 热更新
- 动态加载
- 消息转发

## 最佳实践
- 设计模式
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建4.1.2多态文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.1-动态绑定/4.1.2-多态.md" << 'EOF'
---
title: 多态
icon: polymorphism
order: 2
---

# 多态

## 基本概念
- 多态定义
- 运行时绑定
- 动态分派
- 方法覆盖
- 接口实现

## 多态类型
- 编译时多态
- 运行时多态
- 参数多态
- 子类型多态
- 强制多态

## 实现机制
- 虚函数表
- 消息分发
- 方法查找
- 动态绑定
- 类型转换

## 最佳实践
- 设计原则
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建4.2作为类型的类目录及其README
mkdir -p "$BASE_DIR/第4章-对象的类型和动态绑定/4.2-作为类型的类"
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.2-作为类型的类/README.md" << 'EOF'
---
title: 作为类型的类
icon: class-type
order: 2
---

# 作为类型的类

本节介绍类作为类型使用的相关概念和应用。
EOF

# 创建4.2.1把类作为一种类型文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.2-作为类型的类/4.2.1-把类作为一种类型.md" << 'EOF'
---
title: 把类作为一种类型
icon: class-as-type
order: 1
---

# 把类作为一种类型

## 基本概念
- 类型定义
- 类型声明
- 类型检查
- 类型转换
- 类型兼容

## 使用方式
- 变量声明
- 参数传递
- 返回值类型
- 类型转换
- 类型判断

## 类型安全
- 类型检查
- 类型推断
- 类型约束
- 类型保护
- 类型验证

## 最佳实践
- 设计原则
- 代码规范
- 错误处理
- 性能优化
- 维护建议
EOF

# 创建4.2.2空指针nil文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.2-作为类型的类/4.2.2-空指针nil.md" << 'EOF'
---
title: 空指针nil
icon: null-pointer
order: 2
---

# 空指针nil

## 基本概念
- nil定义
- 空指针特性
- 内存表示
- 使用场景
- 安全处理

## 处理机制
- 空值检查
- 默认值处理
- 异常处理
- 空值传播
- 空值合并

## 安全使用
- 防御性编程
- 空值验证
- 错误处理
- 类型检查
- 边界条件

## 最佳实践
- 设计原则
- 代码规范
- 调试技巧
- 性能优化
- 维护建议
EOF

# 创建专栏关系表达式文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.2-作为类型的类/专栏-关系表达式.md" << 'EOF'
---
title: 关系表达式
icon: expression
order: 3
---

# 关系表达式

## 基本概念
- 表达式定义
- 运算符类型
- 优先级规则
- 结合性规则
- 类型转换

## 常用表达式
- 比较表达式
- 逻辑表达式
- 算术表达式
- 赋值表达式
- 条件表达式

## 使用技巧
- 表达式简化
- 性能优化
- 可读性提升
- 错误处理
- 调试方法

## 最佳实践
- 设计原则
- 代码规范
- 测试策略
- 维护建议
- 优化方案
EOF

# 创建4.2.3静态类型检查文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.2-作为类型的类/4.2.3-静态类型检查.md" << 'EOF'
---
title: 静态类型检查
icon: static-type
order: 4
---

# 静态类型检查

## 基本概念
- 类型系统
- 类型检查
- 类型推断
- 类型约束
- 类型安全

## 检查机制
- 编译时检查
- 类型验证
- 错误检测
- 类型兼容
- 类型转换

## 实现原理
- 类型分析
- 类型推导
- 类型匹配
- 错误处理
- 优化策略

## 最佳实践
- 设计原则
- 代码规范
- 调试技巧
- 性能优化
- 维护建议
EOF

# 创建4.2.4静态类型检查的总结文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.2-作为类型的类/4.2.4-静态类型检查的总结.md" << 'EOF'
---
title: 静态类型检查的总结
icon: static-type-summary
order: 5
---

# 静态类型检查的总结

## 主要优势
- 早期错误检测
- 代码可靠性
- 性能优化
- 工具支持
- 重构便利

## 实践经验
- 类型设计
- 错误处理
- 性能考虑
- 代码组织
- 维护策略

## 常见问题
- 类型错误
- 类型转换
- 类型兼容
- 泛型使用
- 边界情况

## 最佳实践
- 设计原则
- 代码规范
- 测试策略
- 维护建议
- 优化方案
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建4.3编程中的类型定义目录及其README
mkdir -p "$BASE_DIR/第4章-对象的类型和动态绑定/4.3-编程中的类型定义"
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.3-编程中的类型定义/README.md" << 'EOF'
---
title: 编程中的类型定义
icon: type-definition
order: 3
---

# 编程中的类型定义

本节介绍Objective-C中类型定义的相关概念和应用。
EOF

# 创建4.3.1签名不一致时的情况文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.3-编程中的类型定义/4.3.1-签名不一致时的情况.md" << 'EOF'
---
title: 签名不一致时的情况
icon: signature-mismatch
order: 1
---

# 签名不一致时的情况

## 基本概念
- 方法签名
- 参数类型
- 返回类型
- 类型匹配
- 类型转换

## 处理机制
- 类型检查
- 签名验证
- 错误处理
- 类型兼容
- 运行时检查

## 常见问题
- 类型不匹配
- 参数错误
- 返回值冲突
- 编译警告
- 运行时错误

## 最佳实践
- 类型检查
- 错误处理
- 代码规范
- 测试策略
- 维护建议
EOF

# 创建专栏重载文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.3-编程中的类型定义/专栏-重载.md" << 'EOF'
---
title: 重载
icon: overload
order: 2
---

# 重载

## 基本概念
- 重载定义
- 方法签名
- 参数列表
- 返回类型
- 重载规则

## 使用场景
- 构造函数
- 运算符重载
- 方法重载
- 类型转换
- 函数适配

## 注意事项
- 参数匹配
- 类型兼容
- 重载解析
- 歧义处理
- 性能影响

## 最佳实践
- 命名规范
- 参数设计
- 文档要求
- 测试策略
- 维护建议
EOF

# 创建4.3.2类的前置声明文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.3-编程中的类型定义/4.3.2-类的前置声明.md" << 'EOF'
---
title: 类的前置声明
icon: forward-declaration
order: 3
---

# 类的前置声明

## 基本概念
- 前置声明
- 类型引用
- 依赖关系
- 编译优化
- 头文件组织

## 使用场景
- 循环依赖
- 编译优化
- 接口设计
- 依赖管理
- 模块化

## 实现技巧
- 声明语法
- 依赖处理
- 编译优化
- 头文件管理
- 命名空间

## 最佳实践
- 设计原则
- 代码组织
- 性能优化
- 维护策略
- 文档规范
EOF

# 创建4.3.3强制类型转换的使用示例文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.3-编程中的类型定义/4.3.3-强制类型转换的使用示例.md" << 'EOF'
---
title: 强制类型转换的使用示例
icon: type-casting
order: 4
---

# 强制类型转换的使用示例

## 基本用法
- 类型转换语法
- 转换规则
- 安全检查
- 性能影响
- 错误处理

## 常见场景
- 基本类型转换
- 对象类型转换
- 指针转换
- 数值转换
- 类型适配

## 注意事项
- 类型安全
- 数据损失
- 性能开销
- 运行时检查
- 错误处理

## 最佳实践
- 转换策略
- 安全检查
- 错误处理
- 性能优化
- 维护建议
EOF

# 创建4.4实例变量的数据封装目录及其README
mkdir -p "$BASE_DIR/第4章-对象的类型和动态绑定/4.4-实例变量的数据封装"
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.4-实例变量的数据封装/README.md" << 'EOF'
---
title: 实例变量的数据封装
icon: data-encapsulation
order: 4
---

# 实例变量的数据封装

本节介绍实例变量的数据封装原则和实现方法。
EOF

# 创建4.4.1实例变量的访问权限文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.4-实例变量的数据封装/4.4.1-实例变量的访问权限.md" << 'EOF'
---
title: 实例变量的访问权限
icon: access-control
order: 1
---

# 实例变量的访问权限

## 基本概念
- 访问修饰符
- 封装原则
- 权限级别
- 作用域
- 可见性

## 访问控制
- 私有变量
- 保护变量
- 公共变量
- 包级访问
- 访问方法

## 实现机制
- 属性声明
- 访问方法
- 权限控制
- 继承关系
- 内存管理

## 最佳实践
- 封装策略
- 命名规范
- 访问控制
- 文档要求
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建4.4.2访问器文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.4-实例变量的数据封装/4.4.2-访问器.md" << 'EOF'
---
title: 访问器
icon: accessor
order: 2
---

# 访问器

## 基本概念
- getter方法
- setter方法
- 属性语法
- 访问控制
- 命名规范

## 实现机制
- 方法合成
- 属性特性
- 内存管理
- 线程安全
- 性能优化

## 使用场景
- 数据验证
- 计算属性
- 懒加载
- 观察者模式
- 值转换

## 最佳实践
- 命名规范
- 实现策略
- 线程安全
- 性能优化
- 维护建议
EOF

# 创建4.4.3实例变量的可见性文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.4-实例变量的数据封装/4.4.3-实例变量的可见性.md" << 'EOF'
---
title: 实例变量的可见性
icon: variable-visibility
order: 3
---

# 实例变量的可见性

## 基本概念
- 可见性级别
- 访问控制
- 作用域
- 生命周期
- 封装原则

## 可见性类型
- 私有变量
- 保护变量
- 公共变量
- 包内可见
- 类作用域

## 实现机制
- 访问控制
- 内存布局
- 继承关系
- 编译优化
- 运行时特性

## 最佳实践
- 封装策略
- 访问控制
- 命名规范
- 文档要求
- 维护建议
EOF

# 创建4.4.4在实现部分中定义实例变量文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.4-实例变量的数据封装/4.4.4-在实现部分中定义实例变量.md" << 'EOF'
---
title: 在实现部分中定义实例变量
icon: implementation-variable
order: 4
---

# 在实现部分中定义实例变量

## 基本概念
- 实现文件
- 变量定义
- 作用域
- 访问控制
- 内存管理

## 实现策略
- 定义位置
- 初始化
- 访问方法
- 内存布局
- 生命周期

## 注意事项
- 封装性
- 可见性
- 命名冲突
- 内存管理
- 线程安全

## 最佳实践
- 设计原则
- 代码组织
- 命名规范
- 文档要求
- 维护建议
EOF

# 创建4.5类对象目录及其README
mkdir -p "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象"
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象/README.md" << 'EOF'
---
title: 类对象
icon: class-object
order: 5
---

# 类对象

本节介绍Objective-C中类对象的概念和应用。
EOF

# 创建4.5.1什么是类对象文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象/4.5.1-什么是类对象.md" << 'EOF'
---
title: 什么是类对象
icon: class-object-intro
order: 1
---

# 什么是类对象

## 基本概念
- 类对象定义
- 元类概念
- 对象模型
- 运行时系统
- 消息传递

## 特性说明
- 类方法
- 类变量
- 元类关系
- 继承体系
- 运行时机制

## 工作原理
- 对象创建
- 方法调用
- 消息转发
- 动态解析
- 内存管理

## 最佳实践
- 设计模式
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建4.5.2类对象的类型文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象/4.5.2-类对象的类型.md" << 'EOF'
---
title: 类对象的类型
icon: class-object-type
order: 2
---

# 类对象的类型

## 基本类型
- Class类型
- 元类类型
- 实例类型
- 类簇类型
- 代理类型

## 类型特性
- 类型检查
- 类型转换
- 类型兼容
- 类型安全
- 动态类型

## 使用场景
- 对象创建
- 方法调用
- 类型判断
- 动态加载
- 消息转发

## 最佳实践
- 类型设计
- 类型检查
- 错误处理
- 性能优化
- 维护建议
EOF

# 创建4.5.3类方法的定义文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象/4.5.3-类方法的定义.md" << 'EOF'
---
title: 类方法的定义
icon: class-method
order: 3
---

# 类方法的定义

## 基本概念
- 类方法声明
- 实现语法
- 调用方式
- 作用域
- 访问控制

## 使用场景
- 工厂方法
- 单例模式
- 工具方法
- 初始化方法
- 配置方法

## 实现机制
- 方法调用
- 消息传递
- 动态绑定
- 运行时特性
- 内存管理

## 最佳实践
- 设计模式
- 命名规范
- 文档要求
- 测试策略
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建4.5.4类变量文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象/4.5.4-类变量.md" << 'EOF'
---
title: 类变量
icon: class-variable
order: 4
---

# 类变量

## 基本概念
- 类变量定义
- 静态存储
- 访问控制
- 生命周期
- 初始化时机

## 使用场景
- 全局状态
- 配置信息
- 计数器
- 缓存数据
- 常量定义

## 实现机制
- 内存分配
- 访问方式
- 线程安全
- 初始化顺序
- 内存管理

## 最佳实践
- 设计原则
- 命名规范
- 线程安全
- 性能优化
- 维护建议
EOF

# 创建4.5.5类对象的初始化文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象/4.5.5-类对象的初始化.md" << 'EOF'
---
title: 类对象的初始化
icon: class-initialization
order: 5
---

# 类对象的初始化

## 基本概念
- 类初始化
- 加载过程
- 初始化顺序
- 线程安全
- 运行时机制

## 初始化流程
- 类加载
- 静态初始化
- 变量初始化
- 方法准备
- 运行时设置

## 注意事项
- 初始化时机
- 线程安全
- 性能影响
- 依赖处理
- 错误处理

## 最佳实践
- 初始化策略
- 线程处理
- 性能优化
- 错误处理
- 维护建议
EOF

# 创建4.5.6初始化方法的返回值文件
cat > "$BASE_DIR/第4章-对象的类型和动态绑定/4.5-类对象/4.5.6-初始化方法的返回值.md" << 'EOF'
---
title: 初始化方法的返回值
icon: init-return
order: 6
---

# 初始化方法的返回值

## 基本概念
- 返回值类型
- 初始化状态
- 错误处理
- 内存管理
- 类型转换

## 实现机制
- 返回对象
- 状态检查
- 错误处理
- 内存分配
- 类型安全

## 使用场景
- 对象创建
- 错误处理
- 状态验证
- 类型转换
- 链式调用

## 最佳实践
- 返回策略
- 错误处理
- 内存管理
- 类型安全
- 维护建议
EOF

# 创建第5章目录及其README
mkdir -p "$BASE_DIR/第5章-基于引用计数的内存管理"
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/README.md" << 'EOF'
---
title: 基于引用计数的内存管理
icon: memory-management
order: 5
---

# 基于引用计数的内存管理

本章介绍Objective-C中基于引用计数的内存管理机制。
EOF

# 创建5.1动态内存管理目录及其README
mkdir -p "$BASE_DIR/第5章-基于引用计数的内存管理/5.1-动态内存管理"
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.1-动态内存管理/README.md" << 'EOF'
---
title: 动态内存管理
icon: dynamic-memory
order: 1
---

# 动态内存管理

本节介绍动态内存管理的基本概念和实现机制。
EOF

# 创建5.1.1内存管理的必要性文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.1-动态内存管理/5.1.1-内存管理的必要性.md" << 'EOF'
---
title: 内存管理的必要性
icon: memory-necessity
order: 1
---

# 内存管理的必要性

## 基本概念
- 内存泄漏
- 悬挂指针
- 重复释放
- 资源管理
- 性能影响

## 管理机制
- 手动管理
- 自动管理
- 引用计数
- 垃圾回收
- 内存池

## 常见问题
- 内存泄漏
- 野指针
- 循环引用
- 性能开销
- 资源竞争

## 最佳实践
- 设计原则
- 调试技巧
- 性能优化
- 工具使用
- 维护策略
EOF

# 创建5.1.2引用计数、自动引用计数和自动垃圾回收文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.1-动态内存管理/5.1.2-引用计数、自动引用计数和自动垃圾回收.md" << 'EOF'
---
title: 引用计数、自动引用计数和自动垃圾回收
icon: reference-counting
order: 2
---

# 引用计数、自动引用计数和自动垃圾回收

## 基本概念
- 引用计数
- ARC机制
- 垃圾回收
- 内存模型
- 生命周期

## 实现机制
- 计数管理
- 自动释放
- 循环检测
- 内存回收
- 性能优化

## 比较分析
- 优缺点
- 性能对比
- 使用场景
- 实现复杂度
- 维护成本

## 最佳实践
- 设计策略
- 性能优化
- 调试技巧
- 工具使用
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建5.2手动引用计数内存管理目录及其README
mkdir -p "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理"
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/README.md" << 'EOF'
---
title: 手动引用计数内存管理
icon: manual-reference-counting
order: 2
---

# 手动引用计数内存管理

本节介绍手动引用计数的内存管理机制和实践方法。
EOF

# 创建5.2.1引用计数文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.1-引用计数.md" << 'EOF'
---
title: 引用计数
icon: reference-count
order: 1
---

# 引用计数

## 基本概念
- 计数机制
- 引用管理
- 内存分配
- 对象生命周期
- 计数规则

## 实现原理
- 计数器维护
- 引用传递
- 内存释放
- 循环引用
- 性能开销

## 使用场景
- 对象创建
- 对象传递
- 对象释放
- 所有权转移
- 临时引用

## 最佳实践
- 计数管理
- 内存优化
- 调试技巧
- 性能考虑
- 维护建议
EOF

# 创建5.2.2测试引用计数的例子文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.2-测试引用计数的例子.md" << 'EOF'
---
title: 测试引用计数的例子
icon: reference-count-test
order: 2
---

# 测试引用计数的例子

## 示例设计
- 测试场景
- 对象创建
- 引用传递
- 计数变化
- 内存释放

## 实现细节
- 代码结构
- 计数操作
- 测试方法
- 验证机制
- 错误处理

## 测试要点
- 计数准确性
- 内存泄漏
- 循环引用
- 性能影响
- 边界条件

## 最佳实践
- 测试策略
- 调试方法
- 性能优化
- 代码规范
- 维护建议
EOF

# 创建5.2.3释放对象的方法文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.3-释放对象的方法.md" << 'EOF'
---
title: 释放对象的方法
icon: object-release
order: 3
---

# 释放对象的方法

## 基本方法
- release方法
- dealloc实现
- 引用计数
- 内存回收
- 资源清理

## 实现机制
- 释放流程
- 计数检查
- 资源回收
- 异常处理
- 性能优化

## 注意事项
- 释放时机
- 重复释放
- 野指针
- 循环引用
- 线程安全

## 最佳实践
- 释放策略
- 错误处理
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建5.2.4访问方法和对象所有权文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.4-访问方法和对象所有权.md" << 'EOF'
---
title: 访问方法和对象所有权
icon: access-ownership
order: 4
---

# 访问方法和对象所有权

## 基本概念
- 访问控制
- 所有权转移
- 引用管理
- 生命周期
- 内存管理

## 实现机制
- 访问方法
- 所有权规则
- 引用传递
- 内存管理
- 线程安全

## 设计原则
- 访问控制
- 所有权模型
- 内存策略
- 线程考虑
- 接口设计

## 最佳实践
- 设计模式
- 代码规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏静态对象文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/专栏-静态对象.md" << 'EOF'
---
title: 静态对象
icon: static-object
order: 5
---

# 静态对象

## 基本概念
- 静态存储
- 生命周期
- 内存管理
- 访问控制
- 线程安全

## 使用场景
- 全局状态
- 单例模式
- 常量对象
- 缓存数据
- 配置信息

## 注意事项
- 初始化顺序
- 线程安全
- 内存管理
- 性能影响
- 资源释放

## 最佳实践
- 设计模式
- 初始化策略
- 线程处理
- 性能优化
- 维护建议
EOF

# 创建5.2.5自动释放文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.5-自动释放.md" << 'EOF'
---
title: 自动释放
icon: auto-release
order: 6
---

# 自动释放

## 基本概念
- 自动释放池
- 延迟释放
- 内存管理
- 生命周期
- 性能影响

## 实现机制
- 池管理
- 对象注册
- 释放时机
- 内存回收
- 性能优化

## 使用场景
- 临时对象
- 返回对象
- 批量释放
- 延迟释放
- 性能优化

## 最佳实践
- 使用策略
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建5.2.6使用自动释放池时需要注意的地方文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.6-使用自动释放池时需要注意的地方.md" << 'EOF'
---
title: 使用自动释放池时需要注意的地方
icon: autorelease-pool-notes
order: 7
---

# 使用自动释放池时需要注意的地方

## 使用时机
- 池创建时机
- 释放时机
- 嵌套使用
- 线程考虑
- 性能影响

## 常见问题
- 内存泄漏
- 过早释放
- 循环引用
- 性能开销
- 线程安全

## 优化策略
- 池管理
- 内存控制
- 性能调优
- 异常处理
- 资源管理

## 最佳实践
- 使用规范
- 调试方法
- 性能优化
- 错误处理
- 维护建议
EOF

# 创建5.2.7临时对象的生成文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.7-临时对象的生成.md" << 'EOF'
---
title: 临时对象的生成
icon: temporary-objects
order: 8
---

# 临时对象的生成

## 基本概念
- 临时对象
- 生命周期
- 内存管理
- 自动释放
- 性能考虑

## 创建方式
- 工厂方法
- 便利构造
- 临时分配
- 池管理
- 缓存策略

## 管理策略
- 生命周期
- 引用计数
- 释放时机
- 内存优化
- 性能调优

## 最佳实践
- 创建策略
- 内存管理
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建5.2.8运行回路和自动释放池文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/5.2.8-运行回路和自动释放池.md" << 'EOF'
---
title: 运行回路和自动释放池
icon: runloop-autorelease
order: 9
---

# 运行回路和自动释放池

## 基本概念
- 运行回路
- 释放池
- 事件循环
- 内存管理
- 性能影响

## 工作机制
- 池创建
- 对象注册
- 释放时机
- 循环处理
- 内存回收

## 使用场景
- 主线程
- 后台线程
- 异步操作
- 事件处理
- 性能优化

## 最佳实践
- 设计策略
- 线程处理
- 内存管理
- 性能优化
- 维护建议
EOF

# 创建专栏常量修饰符const文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.2-手动引用计数内存管理/专栏-常量修饰符const.md" << 'EOF'
---
title: 常量修饰符const
icon: const-modifier
order: 10
---

# 常量修饰符const

## 基本概念
- const定义
- 使用场景
- 修饰规则
- 类型安全
- 编译优化

## 使用方式
- 变量修饰
- 参数修饰
- 返回值修饰
- 方法修饰
- 对象修饰

## 注意事项
- 类型安全
- 编译优化
- 代码可读性
- 性能影响
- 维护性

## 最佳实践
- 使用规范
- 命名规则
- 类型检查
- 性能优化
- 维护建议
EOF

# 创建5.3分数计算器的例子目录及其README
mkdir -p "$BASE_DIR/第5章-基于引用计数的内存管理/5.3-分数计算器的例子"
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.3-分数计算器的例子/README.md" << 'EOF'
---
title: 分数计算器的例子
icon: fraction-calculator
order: 3
---

# 分数计算器的例子

本节通过分数计算器的实例展示内存管理的应用。
EOF

# 创建5.3.1分数类Faction文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.3-分数计算器的例子/5.3.1-分数类Faction.md" << 'EOF'
---
title: 分数类Faction
icon: fraction-class
order: 1
---

# 分数类Faction

## 类设计
- 属性定义
- 方法设计
- 内存管理
- 错误处理
- 运算实现

## 核心功能
- 分数运算
- 约分处理
- 类型转换
- 比较操作
- 格式化输出

## 实现细节
- 数据结构
- 算法实现
- 内存管理
- 异常处理
- 性能优化

## 最佳实践
- 设计模式
- 代码规范
- 测试策略
- 性能优化
- 维护建议
EOF

# 创建5.3.2保存计算结果的FracRegister类文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.3-分数计算器的例子/5.3.2-保存计算结果的FracRegister类.md" << 'EOF'
---
title: 保存计算结果的FracRegister类
icon: fraction-register
order: 2
---

# 保存计算结果的FracRegister类

## 类设计
- 数据结构
- 存储机制
- 访问控制
- 内存管理
- 线程安全

## 核心功能
- 结果存储
- 结果获取
- 历史记录
- 状态管理
- 错误处理

## 实现细节
- 存储结构
- 内存管理
- 线程同步
- 异常处理
- 性能优化

## 最佳实践
- 设计模式
- 代码规范
- 测试策略
- 性能优化
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建5.3.3主函数和执行示例文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.3-分数计算器的例子/5.3.3-主函数和执行示例.md" << 'EOF'
---
title: 主函数和执行示例
icon: main-function
order: 3
---

# 主函数和执行示例

## 程序结构
- 主函数设计
- 流程控制
- 错误处理
- 内存管理
- 示例运行

## 功能实现
- 输入处理
- 计算逻辑
- 结果输出
- 异常处理
- 资源释放

## 示例说明
- 使用方法
- 运行流程
- 测试用例
- 结果验证
- 性能分析

## 最佳实践
- 代码组织
- 错误处理
- 内存管理
- 测试策略
- 维护建议
EOF

# 创建5.4ARC概要目录及其README
mkdir -p "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要"
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/README.md" << 'EOF'
---
title: ARC概要
icon: arc-overview
order: 4
---

# ARC概要

本节介绍自动引用计数（ARC）的基本概念和使用方法。
EOF

# 创建5.4.1什么是ARC文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.1-什么是ARC.md" << 'EOF'
---
title: 什么是ARC
icon: arc-intro
order: 1
---

# 什么是ARC

## 基本概念
- ARC定义
- 工作原理
- 编译器特性
- 运行时机制
- 内存管理

## 核心特性
- 自动管理
- 编译优化
- 性能影响
- 使用限制
- 兼容性

## 优势分析
- 开发效率
- 内存安全
- 性能优化
- 错误减少
- 维护简化

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 迁移策略
- 维护建议
EOF

# 创建5.4.2禁止调用引用计数的相关函数文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.2-禁止调用引用计数的相关函数.md" << 'EOF'
---
title: 禁止调用引用计数的相关函数
icon: arc-forbidden
order: 2
---

# 禁止调用引用计数的相关函数

## 禁止函数
- retain
- release
- autorelease
- retainCount
- 手动管理

## 原因说明
- 编译器控制
- 自动管理
- 避免冲突
- 性能优化
- 安全考虑

## 替代方案
- 属性声明
- 弱引用
- 强引用
- 自动释放
- 循环打破

## 最佳实践
- 代码迁移
- 性能优化
- 调试方法
- 错误处理
- 维护建议
EOF

# 创建5.4.3管理自动释放池的新语法文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.3-管理自动释放池的新语法.md" << 'EOF'
---
title: 管理自动释放池的新语法
icon: arc-pool
order: 3
---

# 管理自动释放池的新语法

## 新语法特性
- @autoreleasepool
- 块语法
- 作用域
- 性能优化
- 使用场景

## 实现机制
- 池管理
- 内存分配
- 自动释放
- 性能优化
- 编译优化

## 使用场景
- 循环处理
- 临时对象
- 大量创建
- 内存控制
- 性能优化

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建5.4.4变量的初始值文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.4-变量的初始值.md" << 'EOF'
---
title: 变量的初始值
icon: variable-init
order: 4
---

# 变量的初始值

## 基本规则
- 默认值
- 初始化时机
- 类型影响
- 作用域
- 生命周期

## 初始化方式
- 声明初始化
- 延迟初始化
- 条件初始化
- 自动初始化
- 手动设置

## 注意事项
- 空值处理
- 类型安全
- 内存管理
- 性能影响
- 线程安全

## 最佳实践
- 初始化策略
- 空值处理
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建5.4.5方法族文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.5-方法族.md" << 'EOF'
---
title: 方法族
icon: method-family
order: 5
---

# 方法族

## 基本概念
- 方法族定义
- 命名规则
- 使用场景
- 实现机制
- 内存管理

## 族类型
- 创建方法
- 访问方法
- 修改方法
- 查询方法
- 工具方法

## 实现规范
- 命名规则
- 返回值
- 参数设计
- 内存管理
- 错误处理

## 最佳实践
- 设计原则
- 代码规范
- 性能优化
- 测试策略
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建5.4.6方法dealloc的定义文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.6-方法dealloc的定义.md" << 'EOF'
---
title: 方法dealloc的定义
icon: dealloc-method
order: 6
---

# 方法dealloc的定义

## 基本概念
- dealloc方法
- 释放时机
- 调用顺序
- 资源清理
- 内存管理

## 实现要点
- 资源释放
- 清理顺序
- 父类调用
- 异常处理
- 线程安全

## 注意事项
- 调用时机
- 资源管理
- 继承关系
- 线程安全
- 性能影响

## 最佳实践
- 实现规范
- 资源管理
- 错误处理
- 调试技巧
- 维护建议
EOF

# 创建5.4.7使用ARC的程序的编译文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.7-使用ARC的程序的编译.md" << 'EOF'
---
title: 使用ARC的程序的编译
icon: arc-compilation
order: 7
---

# 使用ARC的程序的编译

## 编译设置
- 编译选项
- 编译器标志
- 项目配置
- 兼容性
- 优化选项

## 编译过程
- 源码分析
- 代码生成
- 优化处理
- 错误检查
- 链接过程

## 注意事项
- 兼容性
- 性能优化
- 错误处理
- 调试支持
- 版本控制

## 最佳实践
- 编译配置
- 优化策略
- 调试方法
- 错误处理
- 维护建议
EOF

# 创建5.4.8ARC的基本注意事项文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.8-ARC的基本注意事项.md" << 'EOF'
---
title: ARC的基本注意事项
icon: arc-notes
order: 8
---

# ARC的基本注意事项

## 基本原则
- 内存管理
- 对象生命周期
- 引用关系
- 性能考虑
- 调试方法

## 常见问题
- 循环引用
- 内存泄漏
- 性能开销
- 兼容性
- 调试难度

## 解决方案
- 弱引用
- 设计模式
- 性能优化
- 调试工具
- 代码审查

## 最佳实践
- 设计原则
- 代码规范
- 测试策略
- 性能优化
- 维护建议
EOF

# 创建5.4.9使用ARC重构分数计算器文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.4-ARC概要/5.4.9-使用ARC重构分数计算器.md" << 'EOF'
---
title: 使用ARC重构分数计算器
icon: arc-refactor
order: 9
---

# 使用ARC重构分数计算器

## 重构目标
- 代码优化
- 内存管理
- 性能提升
- 可维护性
- 代码质量

## 实现步骤
- 代码分析
- 重构设计
- 代码修改
- 测试验证
- 性能评估

## 注意事项
- 兼容性
- 性能影响
- 错误处理
- 测试覆盖
- 文档更新

## 最佳实践
- 重构策略
- 测试方法
- 性能优化
- 代码审查
- 维护建议
EOF

# 创建5.5循环引用和弱引用目录及其README
mkdir -p "$BASE_DIR/第5章-基于引用计数的内存管理/5.5-循环引用和弱引用"
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.5-循环引用和弱引用/README.md" << 'EOF'
---
title: 循环引用和弱引用
icon: circular-reference
order: 5
---

# 循环引用和弱引用

本节介绍循环引用问题及其解决方案。
EOF

# 创建5.5.1循环引用文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.5-循环引用和弱引用/5.5.1-循环引用.md" << 'EOF'
---
title: 循环引用
icon: circular-reference
order: 1
---

# 循环引用

## 基本概念
- 循环引用定义
- 产生原因
- 影响范围
- 检测方法
- 解决策略

## 常见场景
- 对象关系
- 代理模式
- 回调机制
- 容器类
- 闭包引用

## 解决方案
- 弱引用
- 设计模式
- 引用打破
- 架构优化
- 代码重构

## 最佳实践
- 设计原则
- 代码规范
- 测试方法
- 调试技巧
- 维护建议
EOF

# 创建5.5.2所有权和对象间的关系文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.5-循环引用和弱引用/5.5.2-所有权和对象间的关系.md" << 'EOF'
---
title: 所有权和对象间的关系
icon: ownership-relationship
order: 2
---

# 所有权和对象间的关系

## 基本概念
- 所有权定义
- 对象关系
- 生命周期
- 引用类型
- 内存管理

## 关系类型
- 强引用
- 弱引用
- 从属关系
- 聚合关系
- 组合关系

## 设计原则
- 所有权模型
- 关系管理
- 生命周期
- 内存策略
- 引用控制

## 最佳实践
- 设计模式
- 代码规范
- 测试策略
- 性能优化
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建5.5.3弱引用文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.5-循环引用和弱引用/5.5.3-弱引用.md" << 'EOF'
---
title: 弱引用
icon: weak-reference
order: 3
---

# 弱引用

## 基本概念
- 弱引用定义
- 使用场景
- 生命周期
- 内存管理
- 引用特性

## 实现机制
- 引用类型
- 内存管理
- 自动释放
- 空值处理
- 性能影响

## 使用场景
- 代理模式
- 回调机制
- 缓存系统
- 观察者模式
- 循环引用

## 最佳实践
- 设计原则
- 代码规范
- 测试策略
- 性能优化
- 维护建议
EOF

# 创建5.5.4自动nil化的弱引用文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.5-循环引用和弱引用/5.5.4-自动nil化的弱引用.md" << 'EOF'
---
title: 自动nil化的弱引用
icon: auto-nil
order: 4
---

# 自动nil化的弱引用

## 基本概念
- nil化机制
- 触发条件
- 内存管理
- 引用特性
- 生命周期

## 实现原理
- 自动检测
- 引用清理
- 内存回收
- 状态更新
- 性能影响

## 使用场景
- 临时引用
- 缓存对象
- 代理对象
- 观察者模式
- 事件处理

## 最佳实践
- 设计策略
- 错误处理
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建5.5.5对象之间引用关系的基本原则文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.5-循环引用和弱引用/5.5.5-对象之间引用关系的基本原则.md" << 'EOF'
---
title: 对象之间引用关系的基本原则
icon: reference-principles
order: 5
---

# 对象之间引用关系的基本原则

## 基本原则
- 所有权规则
- 引用类型
- 生命周期
- 内存管理
- 关系模型

## 设计考虑
- 对象关系
- 引用方向
- 生命周期
- 内存策略
- 性能影响

## 实现策略
- 强引用使用
- 弱引用应用
- 循环处理
- 内存管理
- 性能优化

## 最佳实践
- 设计模式
- 代码规范
- 测试方法
- 性能优化
- 维护建议
EOF

# 创建5.6ARC编程时其他一些注意事项目录及其README
mkdir -p "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项"
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项/README.md" << 'EOF'
---
title: ARC编程时其他一些注意事项
icon: arc-notes
order: 6
---

# ARC编程时其他一些注意事项

本节介绍ARC编程中需要注意的其他重要事项。
EOF

# 创建5.6.1可以像通常的指针一样使用的对象文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项/5.6.1-可以像通常的指针一样使用的对象.md" << 'EOF'
---
title: 可以像通常的指针一样使用的对象
icon: pointer-object
order: 1
---

# 可以像通常的指针一样使用的对象

## 基本概念
- 指针对象
- 内存管理
- 引用计数
- 生命周期
- 使用限制

## 使用方式
- 指针操作
- 内存访问
- 引用传递
- 类型转换
- 空值处理

## 注意事项
- 内存安全
- 类型安全
- 生命周期
- 性能影响
- 调试方法

## 最佳实践
- 使用规范
- 安全策略
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建5.6.2setter方法的注意事项文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项/5.6.2-setter方法的注意事项.md" << 'EOF'
---
title: setter方法的注意事项
icon: setter-notes
order: 2
---

# setter方法的注意事项

## 基本原则
- 方法命名
- 参数处理
- 内存管理
- 值验证
- 状态更新

## 实现要点
- 值检查
- 内存管理
- 状态维护
- 异常处理
- KVO通知

## 注意事项
- 线程安全
- 内存泄漏
- 循环引用
- 性能影响
- 值验证

## 最佳实践
- 实现规范
- 错误处理
- 性能优化
- 测试策略
- 维护建议
EOF

# 创建5.6.3通过函数的参数返回结果对象文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项/5.6.3-通过函数的参数返回结果对象.md" << 'EOF'
---
title: 通过函数的参数返回结果对象
icon: parameter-return
order: 3
---

# 通过函数的参数返回结果对象

## 基本概念
- 参数传递
- 返回值
- 内存管理
- 错误处理
- 生命周期

## 实现机制
- 参数设计
- 返回策略
- 内存管理
- 错误处理
- 状态传递

## 注意事项
- 内存安全
- 参数验证
- 错误处理
- 性能影响
- 线程安全

## 最佳实践
- 设计模式
- 参数规范
- 错误处理
- 测试策略
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建5.6.4C语言数组保存Objective-C对象文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项/5.6.4-C语言数组保存Objective-C对象.md" << 'EOF'
---
title: C语言数组保存Objective-C对象
icon: c-array-objc
order: 4
---

# C语言数组保存Objective-C对象

## 基本概念
- C数组特性
- 对象存储
- 内存管理
- 类型转换
- 生命周期

## 实现机制
- 数组管理
- 对象引用
- 内存分配
- 类型处理
- 生命周期

## 注意事项
- 内存安全
- 类型安全
- 引用管理
- 性能考虑
- 调试方法

## 最佳实践
- 设计策略
- 内存管理
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建5.6.5ARC对结构体的一些限制文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项/5.6.5-ARC对结构体的一些限制.md" << 'EOF'
---
title: ARC对结构体的一些限制
icon: arc-struct
order: 5
---

# ARC对结构体的一些限制

## 基本限制
- 结构体定义
- 对象引用
- 内存管理
- 类型限制
- 使用规则

## 实现影响
- 内存布局
- 引用管理
- 生命周期
- 性能影响
- 编译限制

## 解决方案
- 替代设计
- 封装策略
- 内存管理
- 类型处理
- 性能优化

## 最佳实践
- 设计模式
- 代码规范
- 测试策略
- 性能优化
- 维护建议
EOF

# 创建5.6.6提示编译器进行特别处理文件
cat > "$BASE_DIR/第5章-基于引用计数的内存管理/5.6-ARC编程时其他一些注意事项/5.6.6-提示编译器进行特别处理.md" << 'EOF'
---
title: 提示编译器进行特别处理
icon: compiler-hint
order: 6
---

# 提示编译器进行特别处理

## 基本概念
- 编译指示
- 特殊标记
- 优化提示
- 处理规则
- 使用场景

## 实现机制
- 指示类型
- 处理流程
- 优化策略
- 编译选项
- 性能影响

## 使用场景
- 性能优化
- 内存管理
- 特殊处理
- 编译优化
- 调试支持

## 最佳实践
- 使用规范
- 优化策略
- 调试方法
- 性能考虑
- 维护建议
EOF

# 创建第6章垃圾回收目录及其README
mkdir -p "$BASE_DIR/第6章-垃圾回收"
cat > "$BASE_DIR/第6章-垃圾回收/README.md" << 'EOF'
---
title: 垃圾回收
icon: garbage-collection
order: 6
---

# 垃圾回收

本章介绍Objective-C中的垃圾回收机制及其应用。
EOF

# 创建6.1垃圾回收的概要目录及其README
mkdir -p "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要"
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/README.md" << 'EOF'
---
title: 垃圾回收的概要
icon: gc-overview
order: 1
---

# 垃圾回收的概要

本节介绍垃圾回收的基本概念和工作原理。
EOF

# 创建6.1.1查找不再使用的对象文件
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/6.1.1-查找不再使用的对象.md" << 'EOF'
---
title: 查找不再使用的对象
icon: unused-objects
order: 1
---

# 查找不再使用的对象

## 基本概念
- 对象生命周期
- 可达性分析
- 引用计数
- 内存管理
- 回收策略

## 查找机制
- 引用跟踪
- 标记清除
- 分代回收
- 循环检测
- 性能优化

## 实现策略
- 算法选择
- 性能优化
- 内存管理
- 并发处理
- 实时性能

## 最佳实践
- 设计原则
- 优化策略
- 调试方法
- 性能监控
- 维护建议
EOF

# 创建6.1.2编程时的注意事项文件
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/6.1.2-编程时的注意事项.md" << 'EOF'
---
title: 编程时的注意事项
icon: gc-programming
order: 2
---

# 编程时的注意事项

## 基本原则
- 内存使用
- 对象生命周期
- 引用管理
- 性能考虑
- 资源释放

## 常见问题
- 内存泄漏
- 性能开销
- 循环引用
- 资源管理
- 并发问题

## 解决方案
- 设计模式
- 代码优化
- 资源管理
- 性能调优
- 调试技巧

## 最佳实践
- 编程规范
- 性能优化
- 测试策略
- 调试方法
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建6.1.3垃圾收集器文件
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/6.1.3-垃圾收集器.md" << 'EOF'
---
title: 垃圾收集器
icon: garbage-collector
order: 3
---

# 垃圾收集器

## 基本概念
- 收集器类型
- 工作原理
- 内存管理
- 性能特性
- 调优参数

## 收集算法
- 标记清除
- 复制算法
- 标记整理
- 分代收集
- 增量收集

## 性能优化
- 收集策略
- 内存分配
- 并发处理
- 停顿时间
- 吞吐量

## 最佳实践
- 参数调优
- 监控方法
- 性能分析
- 问题诊断
- 维护建议
EOF

# 创建6.1.4finalize方法的定义文件
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/6.1.4-finalize方法的定义.md" << 'EOF'
---
title: finalize方法的定义
icon: finalize-method
order: 4
---

# finalize方法的定义

## 基本概念
- 方法定义
- 执行时机
- 使用限制
- 性能影响
- 最佳实践

## 实现机制
- 调用时机
- 执行过程
- 资源释放
- 异常处理
- 性能开销

## 使用场景
- 资源清理
- 状态重置
- 对象销毁
- 异常处理
- 调试支持

## 最佳实践
- 设计原则
- 实现规范
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建6.1.5编译时的设定文件
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/6.1.5-编译时的设定.md" << 'EOF'
---
title: 编译时的设定
icon: compile-settings
order: 5
---

# 编译时的设定

## 基本配置
- 编译选项
- 优化级别
- 内存设置
- 调试信息
- 性能参数

## 优化策略
- 代码优化
- 内存优化
- 性能调优
- 调试支持
- 编译速度

## 注意事项
- 参数设置
- 兼容性
- 性能影响
- 调试支持
- 维护性

## 最佳实践
- 配置管理
- 性能优化
- 调试方法
- 问题诊断
- 维护建议
EOF

# 创建6.1.6引用计数管理方式中方法的处理文件
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/6.1.6-引用计数管理方式中方法的处理.md" << 'EOF'
---
title: 引用计数管理方式中方法的处理
icon: reference-counting
order: 6
---

# 引用计数管理方式中方法的处理

## 基本概念
- 引用计数
- 方法调用
- 内存管理
- 生命周期
- 性能影响

## 处理机制
- 计数更新
- 方法调用
- 内存分配
- 对象释放
- 性能优化

## 注意事项
- 循环引用
- 性能开销
- 线程安全
- 异常处理
- 调试方法

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建6.1.7使用垃圾回收编程小结文件
cat > "$BASE_DIR/第6章-垃圾回收/6.1-垃圾回收的概要/6.1.7-使用垃圾回收编程小结.md" << 'EOF'
---
title: 使用垃圾回收编程小结
icon: gc-summary
order: 7
---

# 使用垃圾回收编程小结

## 主要优势
- 自动管理
- 减少错误
- 开发效率
- 内存优化
- 性能提升

## 注意事项
- 资源管理
- 性能开销
- 内存使用
- 调试方法
- 最佳实践

## 实践经验
- 设计模式
- 代码规范
- 性能优化
- 问题解决
- 维护策略

## 未来展望
- 技术发展
- 性能提升
- 新特性
- 最佳实践
- 应用场景
EOF

# 创建6.2垃圾回收的详细功能目录及其README
mkdir -p "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能"
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/README.md" << 'EOF'
---
title: 垃圾回收的详细功能
icon: gc-details
order: 2
---

# 垃圾回收的详细功能

本节详细介绍垃圾回收的各项功能特性。
EOF

# 创建6.2.1分代垃圾回收文件
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/6.2.1-分代垃圾回收.md" << 'EOF'
---
title: 分代垃圾回收
icon: generational-gc
order: 1
---

# 分代垃圾回收

## 基本概念
- 分代定义
- 代际划分
- 回收策略
- 内存管理
- 性能特性

## 实现机制
- 分代算法
- 对象晋升
- 回收策略
- 内存分配
- 性能优化

## 优化策略
- 代际管理
- 回收频率
- 内存分配
- 性能调优
- 监控分析

## 最佳实践
- 参数配置
- 性能优化
- 监控方法
- 问题诊断
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建6.2.2弱引用文件
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/6.2.2-弱引用.md" << 'EOF'
---
title: 弱引用
icon: weak-reference
order: 2
---

# 弱引用

## 基本概念
- 弱引用定义
- 使用场景
- 生命周期
- 内存管理
- 性能特性

## 实现机制
- 引用类型
- 对象管理
- 自动释放
- 内存回收
- 性能优化

## 使用场景
- 循环引用
- 缓存实现
- 委托模式
- 观察者模式
- 临时引用

## 最佳实践
- 设计模式
- 代码规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建6.2.3自动nil化文件
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/6.2.3-自动nil化.md" << 'EOF'
---
title: 自动nil化
icon: auto-nil
order: 3
---

# 自动nil化

## 基本概念
- nil化机制
- 触发条件
- 内存管理
- 对象生命周期
- 性能影响

## 实现原理
- 检测机制
- 引用管理
- 内存回收
- 性能优化
- 安全保证

## 使用场景
- 弱引用
- 临时对象
- 缓存管理
- 资源释放
- 错误处理

## 最佳实践
- 设计策略
- 错误处理
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建6.2.4通过垃圾回收回收动态分配的内存文件
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/6.2.4-通过垃圾回收回收动态分配的内存.md" << 'EOF'
---
title: 通过垃圾回收回收动态分配的内存
icon: gc-memory
order: 4
---

# 通过垃圾回收回收动态分配的内存

## 基本原理
- 内存分配
- 回收机制
- 触发条件
- 性能影响
- 资源管理

## 实现机制
- 内存追踪
- 可达性分析
- 回收策略
- 内存整理
- 性能优化

## 注意事项
- 内存泄漏
- 性能开销
- 资源管理
- 并发处理
- 调试方法

## 最佳实践
- 内存管理
- 性能优化
- 调试技巧
- 问题诊断
- 维护建议
EOF

# 创建6.2.5__strong修饰符的使用方法文件
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/6.2.5-__strong修饰符的使用方法.md" << 'EOF'
---
title: __strong修饰符的使用方法
icon: strong-modifier
order: 5
---

# __strong修饰符的使用方法

## 基本概念
- 强引用定义
- 使用场景
- 内存管理
- 生命周期
- 性能影响

## 使用方法
- 声明语法
- 引用管理
- 对象生命周期
- 内存控制
- 性能考虑

## 注意事项
- 循环引用
- 内存泄漏
- 性能开销
- 线程安全
- 调试方法

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 问题解决
- 维护建议
EOF

# 创建6.2.6NSGarbageCollector类文件
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/6.2.6-NSGarbageCollector类.md" << 'EOF'
---
title: NSGarbageCollector类
icon: gc-class
order: 6
---

# NSGarbageCollector类

## 类概述
- 基本功能
- 类方法
- 属性设置
- 使用场景
- 性能特性

## 核心功能
- 垃圾回收
- 内存管理
- 性能控制
- 调试支持
- 配置选项

## 使用方法
- 初始化
- 配置设置
- 回收控制
- 性能调优
- 调试方法

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 问题诊断
- 维护建议
EOF

# 创建6.2.7实时API文件
cat > "$BASE_DIR/第6章-垃圾回收/6.2-垃圾回收的详细功能/6.2.7-实时API.md" << 'EOF'
---
title: 实时API
icon: realtime-api
order: 7
---

# 实时API

## 基本概念
- API定义
- 使用场景
- 性能特性
- 实时性要求
- 接口设计

## 核心功能
- 实时监控
- 数据收集
- 性能分析
- 调试支持
- 状态报告

## 使用方法
- API调用
- 数据处理
- 性能优化
- 错误处理
- 调试技巧

## 最佳实践
- 接口使用
- 性能优化
- 调试方法
- 问题诊断
- 维护建议
EOF

# 创建6.3内存管理方式的比较文件
cat > "$BASE_DIR/第6章-垃圾回收/6.3-内存管理方式的比较.md" << 'EOF'
---
title: 内存管理方式的比较
icon: memory-comparison
order: 3
---

# 内存管理方式的比较

## 管理方式
- 手动管理
- 引用计数
- 垃圾回收
- 混合模式
- 自动管理

## 比较分析
- 性能开销
- 内存效率
- 开发效率
- 调试难度
- 维护成本

## 选择建议
- 场景适用
- 性能要求
- 开发效率
- 维护成本
- 团队经验

## 最佳实践
- 方案选择
- 实现策略
- 性能优化
- 调试方法
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建6.3.1引用计数和垃圾回收文件
cat > "$BASE_DIR/第6章-垃圾回收/6.3-内存管理方式的比较/6.3.1-引用计数和垃圾回收.md" << 'EOF'
---
title: 引用计数和垃圾回收
icon: memory-management
order: 1
---

# 引用计数和垃圾回收

## 基本概念
- 引用计数机制
- 垃圾回收机制
- 内存管理策略
- 性能特性
- 使用场景

## 实现原理
- 计数管理
- 回收算法
- 内存分配
- 性能优化
- 资源释放

## 比较分析
- 优缺点
- 性能开销
- 内存效率
- 开发复杂度
- 维护成本

## 最佳实践
- 选择策略
- 实现方法
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建6.3.2更改内存管理方式文件
cat > "$BASE_DIR/第6章-垃圾回收/6.3-内存管理方式的比较/6.3.2-更改内存管理方式.md" << 'EOF'
---
title: 更改内存管理方式
icon: memory-change
order: 2
---

# 更改内存管理方式

## 转换策略
- 迁移计划
- 代码重构
- 测试验证
- 性能评估
- 风险控制

## 实施步骤
- 代码分析
- 更改实现
- 测试验证
- 性能优化
- 问题修复

## 注意事项
- 兼容性
- 性能影响
- 风险管理
- 测试覆盖
- 回滚策略

## 最佳实践
- 迁移方法
- 测试策略
- 性能优化
- 问题处理
- 维护建议
EOF

# 创建6.3.3各种内存管理方式的比较文件
cat > "$BASE_DIR/第6章-垃圾回收/6.3-内存管理方式的比较/6.3.3-各种内存管理方式的比较.md" << 'EOF'
---
title: 各种内存管理方式的比较
icon: memory-comparison
order: 3
---

# 各种内存管理方式的比较

## 管理方式
- 手动管理
- 引用计数
- 垃圾回收
- 混合模式
- 自动管理

## 比较维度
- 性能开销
- 内存效率
- 开发效率
- 维护成本
- 调试难度

## 选择标准
- 项目需求
- 性能要求
- 团队经验
- 维护成本
- 开发效率

## 最佳实践
- 选择策略
- 实现方法
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第7章属性声明目录及其README
mkdir -p "$BASE_DIR/第7章-属性声明"
cat > "$BASE_DIR/第7章-属性声明/README.md" << 'EOF'
---
title: 属性声明
icon: property
order: 7
---

# 属性声明

本章介绍Objective-C中的属性声明机制及其应用。
EOF

# 创建7.1属性是什么目录及其README
mkdir -p "$BASE_DIR/第7章-属性声明/7.1-属性是什么"
cat > "$BASE_DIR/第7章-属性声明/7.1-属性是什么/README.md" << 'EOF'
---
title: 属性是什么
icon: property-intro
order: 1
---

# 属性是什么

本节介绍属性的基本概念和使用方法。
EOF

# 创建7.1.1使用属性编程文件
cat > "$BASE_DIR/第7章-属性声明/7.1-属性是什么/7.1.1-使用属性编程.md" << 'EOF'
---
title: 使用属性编程
icon: property-programming
order: 1
---

# 使用属性编程

## 基本概念
- 属性定义
- 声明语法
- 访问控制
- 内存管理
- 线程安全

## 使用方法
- 属性声明
- 访问方法
- 内存管理
- 线程处理
- 性能优化

## 注意事项
- 命名规范
- 访问控制
- 内存管理
- 线程安全
- 性能影响

## 最佳实践
- 设计模式
- 代码规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建7.1.2属性的概念文件
cat > "$BASE_DIR/第7章-属性声明/7.1-属性是什么/7.1.2-属性的概念.md" << 'EOF'
---
title: 属性的概念
icon: property-concept
order: 2
---

# 属性的概念

## 基本定义
- 属性本质
- 设计目的
- 实现机制
- 使用场景
- 特性说明

## 核心特性
- 封装性
- 访问控制
- 内存管理
- 线程安全
- 性能优化

## 使用场景
- 数据封装
- 状态管理
- 接口设计
- 内存控制
- 线程处理

## 最佳实践
- 设计原则
- 实现规范
- 性能优化
- 调试方法
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建专栏内省文件
cat > "$BASE_DIR/第7章-属性声明/7.1-属性是什么/专栏-内省.md" << 'EOF'
---
title: 内省
icon: introspection
order: 3
---

# 内省

## 基本概念
- 内省定义
- 运行时特性
- 反射机制
- 动态特性
- 使用场景

## 核心功能
- 类型检查
- 属性获取
- 方法调用
- 动态创建
- 运行时修改

## 应用场景
- 框架开发
- 动态加载
- 调试工具
- 性能分析
- 代码注入

## 最佳实践
- 使用规范
- 性能优化
- 安全考虑
- 调试技巧
- 维护建议
EOF

# 创建7.2属性的声明和功能目录及其README
mkdir -p "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能"
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/README.md" << 'EOF'
---
title: 属性的声明和功能
icon: property-declaration
order: 2
---

# 属性的声明和功能

本节介绍属性的声明方式和主要功能特性。
EOF

# 创建7.2.1显式声明属性文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.1-显式声明属性.md" << 'EOF'
---
title: 显式声明属性
icon: property-explicit
order: 1
---

# 显式声明属性

## 声明语法
- 属性类型
- 修饰符
- 命名规则
- 访问控制
- 内存管理

## 实现细节
- 声明方式
- 访问方法
- 内存管理
- 线程安全
- 性能优化

## 使用场景
- 数据封装
- 状态管理
- 接口设计
- 线程控制
- 内存控制

## 最佳实践
- 命名规范
- 实现标准
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建7.2.2属性的实现文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.2-属性的实现.md" << 'EOF'
---
title: 属性的实现
icon: property-implementation
order: 2
---

# 属性的实现

## 实现机制
- 底层原理
- 内存管理
- 访问控制
- 线程安全
- 性能优化

## 核心功能
- getter方法
- setter方法
- 内存管理
- 线程处理
- 异常处理

## 注意事项
- 实现规范
- 内存管理
- 线程安全
- 性能考虑
- 调试方法

## 最佳实践
- 实现标准
- 代码规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建7.2.3@synthesize和实例变量文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.3-@synthesize和实例变量.md" << 'EOF'
---
title: @synthesize和实例变量
icon: synthesize
order: 3
---

# @synthesize和实例变量

## 基本概念
- synthesize定义
- 实例变量
- 自动生成
- 命名规则
- 使用场景

## 实现机制
- 变量生成
- 方法实现
- 内存管理
- 访问控制
- 性能优化

## 使用方法
- 声明语法
- 实现规则
- 命名约定
- 访问控制
- 内存管理

## 最佳实践
- 使用规范
- 命名规则
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建7.2.4通过@synthesize生成实例变量文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.4-通过@synthesize生成实例变量.md" << 'EOF'
---
title: 通过@synthesize生成实例变量
icon: synthesize-generation
order: 4
---

# 通过@synthesize生成实例变量

## 生成机制
- 变量创建
- 命名规则
- 内存分配
- 访问控制
- 生命周期

## 使用方法
- 语法规则
- 命名约定
- 访问方式
- 内存管理
- 线程安全

## 注意事项
- 命名冲突
- 内存管理
- 线程安全
- 性能影响
- 调试方法

## 最佳实践
- 使用规范
- 命名规则
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建7.2.5给属性指定选项文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.5-给属性指定选项.md" << 'EOF'
---
title: 给属性指定选项
icon: property-options
order: 5
---

# 给属性指定选项

## 选项类型
- 访问控制
- 内存管理
- 原子性
- 读写权限
- 线程安全

## 使用方法
- 语法规则
- 选项组合
- 使用场景
- 实现机制
- 性能影响

## 注意事项
- 选项冲突
- 性能开销
- 线程安全
- 内存管理
- 调试方法

## 最佳实践
- 选择策略
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建7.2.6赋值时的选项文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.6-赋值时的选项.md" << 'EOF'
---
title: 赋值时的选项
icon: assignment-options
order: 6
---

# 赋值时的选项

## 选项类型
- copy
- retain
- assign
- weak
- strong

## 使用场景
- 对象赋值
- 内存管理
- 循环引用
- 线程安全
- 性能优化

## 实现机制
- 赋值过程
- 内存管理
- 引用计数
- 线程处理
- 性能影响

## 最佳实践
- 选择策略
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建7.2.7原子性文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.7-原子性.md" << 'EOF'
---
title: 原子性
icon: atomicity
order: 7
---

# 原子性

## 基本概念
- 原子操作
- 线程安全
- 性能影响
- 实现机制
- 使用场景

## 实现原理
- 锁机制
- 同步处理
- 内存屏障
- 性能开销
- 并发控制

## 使用场景
- 多线程环境
- 数据一致性
- 性能要求
- 资源竞争
- 安全考虑

## 最佳实践
- 使用策略
- 性能优化
- 线程安全
- 调试方法
- 维护建议
EOF

# 创建7.2.8属性声明和继承文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.8-属性声明和继承.md" << 'EOF'
---
title: 属性声明和继承
icon: property-inheritance
order: 8
---

# 属性声明和继承

## 继承机制
- 属性继承
- 重写规则
- 访问控制
- 内存管理
- 方法覆盖

## 实现细节
- 声明方式
- 重写方法
- 内存管理
- 访问控制
- 性能优化

## 注意事项
- 继承规则
- 命名冲突
- 内存管理
- 线程安全
- 性能考虑

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建7.2.9方法族和属性的关系文件
cat > "$BASE_DIR/第7章-属性声明/7.2-属性的声明和功能/7.2.9-方法族和属性的关系.md" << 'EOF'
---
title: 方法族和属性的关系
icon: method-property
order: 9
---

# 方法族和属性的关系

## 基本概念
- 方法族定义
- 属性关联
- 命名规则
- 实现机制
- 使用场景

## 关系类型
- 访问方法
- 设置方法
- 验证方法
- 计算方法
- 通知方法

## 实现机制
- 方法生成
- 属性绑定
- 命名约定
- 访问控制
- 性能优化

## 最佳实践
- 设计模式
- 命名规范
- 实现标准
- 调试方法
- 维护建议
EOF

# 创建7.3通过点操作符访问属性目录及其README
mkdir -p "$BASE_DIR/第7章-属性声明/7.3-通过点操作符访问属性"
cat > "$BASE_DIR/第7章-属性声明/7.3-通过点操作符访问属性/README.md" << 'EOF'
---
title: 通过点操作符访问属性
icon: dot-operator
order: 3
---

# 通过点操作符访问属性

本节介绍如何使用点操作符访问对象属性。
EOF

# 创建7.3.1点操作符的使用方法文件
cat > "$BASE_DIR/第7章-属性声明/7.3-通过点操作符访问属性/7.3.1-点操作符的使用方法.md" << 'EOF'
---
title: 点操作符的使用方法
icon: dot-operator-usage
order: 1
---

# 点操作符的使用方法

## 基本语法
- 点操作符
- 访问规则
- 命名约定
- 使用限制
- 性能特性

## 使用场景
- 属性访问
- 链式调用
- 嵌套访问
- 值修改
- 状态查询

## 注意事项
- 访问控制
- 线程安全
- 性能影响
- 空值处理
- 异常处理

## 最佳实践
- 使用规范
- 性能优化
- 调试方法
- 错误处理
- 维护建议
EOF

# 创建7.3.2复杂的点操作符的使用方法文件
cat > "$BASE_DIR/第7章-属性声明/7.3-通过点操作符访问属性/7.3.2-复杂的点操作符的使用方法.md" << 'EOF'
---
title: 复杂的点操作符的使用方法
icon: complex-dot-operator
order: 2
---

# 复杂的点操作符的使用方法

## 高级用法
- 链式调用
- 嵌套访问
- 条件访问
- 集合操作
- 计算属性

## 实现机制
- 访问链路
- 值传递
- 类型检查
- 异常处理
- 性能优化

## 使用场景
- 对象图导航
- 数据访问
- 状态管理
- 值计算
- 条件判断

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建7.3.3何时使用点操作符文件
cat > "$BASE_DIR/第7章-属性声明/7.3-通过点操作符访问属性/7.3.3-何时使用点操作符.md" << 'EOF'
---
title: 何时使用点操作符
icon: dot-operator-timing
order: 3
---

# 何时使用点操作符

## 使用场景
- 属性访问
- 链式调用
- 代码可读性
- 性能考虑
- 维护性

## 最佳实践
- 使用时机
- 代码风格
- 性能影响
- 可维护性
- 调试便利

## 注意事项
- 性能开销
- 线程安全
- 代码清晰
- 错误处理
- 调试难度

## 替代方案
- 方法调用
- 直接访问
- KVC机制
- 消息发送
- 选择策略
EOF

# 创建第8章类NSObject和运行时系统目录及其README
mkdir -p "$BASE_DIR/第8章-类NSObject和运行时系统"
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/README.md" << 'EOF'
---
title: 类NSObject和运行时系统
icon: nsobject
order: 8
---

# 类NSObject和运行时系统

本章介绍Objective-C中的根类NSObject及其运行时系统。
EOF

# 创建8.1类NSObject目录及其README
mkdir -p "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject"
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject/README.md" << 'EOF'
---
title: 类NSObject
icon: nsobject-class
order: 1
---

# 类NSObject

本节介绍NSObject类的基本概念和核心功能。
EOF

# 创建8.1.1根类的作用文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject/8.1.1-根类的作用.md" << 'EOF'
---
title: 根类的作用
icon: root-class
order: 1
---

# 根类的作用

## 基本概念
- 根类定义
- 继承体系
- 基础功能
- 运行时支持
- 内存管理

## 核心功能
- 对象创建
- 消息传递
- 内存管理
- 运行时特性
- 基础方法

## 实现机制
- 类结构
- 方法调用
- 内存分配
- 生命周期
- 性能优化

## 最佳实践
- 使用规范
- 继承设计
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.1.2类和实例文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject/8.1.2-类和实例.md" << 'EOF'
---
title: 类和实例
icon: class-instance
order: 2
---

# 类和实例

## 基本概念
- 类定义
- 实例概念
- 关系模型
- 内存模型
- 生命周期

## 类结构
- 类方法
- 实例方法
- 属性定义
- 继承关系
- 内存布局

## 实例特性
- 创建过程
- 初始化
- 状态管理
- 方法调用
- 内存管理

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.1.3实例对象的生成和释放文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject/8.1.3-实例对象的生成和释放.md" << 'EOF'
---
title: 实例对象的生成和释放
icon: object-lifecycle
order: 3
---

# 实例对象的生成和释放

## 生成过程
- 内存分配
- 初始化
- 状态设置
- 属性配置
- 错误处理

## 释放机制
- 引用计数
- 内存回收
- 资源清理
- 析构过程
- 异常处理

## 生命周期
- 创建阶段
- 使用阶段
- 销毁阶段
- 状态转换
- 资源管理

## 最佳实践
- 创建模式
- 释放策略
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建8.1.4初始化文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject/8.1.4-初始化.md" << 'EOF'
---
title: 初始化
icon: initialization
order: 4
---

# 初始化

## 初始化过程
- 方法调用
- 状态设置
- 资源分配
- 错误处理
- 返回值

## 实现机制
- 初始化方法
- 参数处理
- 状态验证
- 异常处理
- 性能优化

## 注意事项
- 继承关系
- 线程安全
- 内存管理
- 错误处理
- 性能考虑

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建8.1.5对象的比较文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject/8.1.5-对象的比较.md" << 'EOF'
---
title: 对象的比较
icon: object-comparison
order: 5
---

# 对象的比较

## 比较方法
- 相等性比较
- 引用比较
- 内容比较
- 自定义比较
- 排序比较

## 实现机制
- 比较算法
- 重写方法
- 性能优化
- 特殊处理
- 异常处理

## 使用场景
- 对象匹配
- 集合操作
- 排序功能
- 查找功能
- 数据验证

## 最佳实践
- 实现规范
- 性能优化
- 测试策略
- 调试方法
- 维护建议
EOF

# 创建8.1.6对象的内容描述文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.1-类NSObject/8.1.6-对象的内容描述.md" << 'EOF'
---
title: 对象的内容描述
icon: object-description
order: 6
---

# 对象的内容描述

## 描述方法
- 字符串表示
- 调试信息
- 属性描述
- 状态展示
- 格式化输出

## 实现机制
- 描述生成
- 信息收集
- 格式处理
- 性能优化
- 调试支持

## 使用场景
- 调试输出
- 日志记录
- 对象序列化
- 数据展示
- 错误报告

## 最佳实践
- 实现规范
- 格式标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.2消息发送机制目录及其README
mkdir -p "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制"
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/README.md" << 'EOF'
---
title: 消息发送机制
icon: message-sending
order: 2
---

# 消息发送机制

本节介绍Objective-C的消息发送机制及其实现原理。
EOF

# 创建8.2.1选择器和SEL类型文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.1-选择器和SEL类型.md" << 'EOF'
---
title: 选择器和SEL类型
icon: selector-sel
order: 1
---

# 选择器和SEL类型

## 基本概念
- 选择器定义
- SEL类型
- 方法标识
- 运行时特性
- 使用场景

## 实现机制
- 选择器创建
- 方法查找
- 消息分发
- 性能优化
- 内存管理

## 使用方法
- 声明方式
- 调用方式
- 错误处理
- 性能考虑
- 调试支持

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建8.2.2消息搜索文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.2-消息搜索.md" << 'EOF'
---
title: 消息搜索
icon: message-search
order: 2
---

# 消息搜索

## 搜索机制
- 方法查找
- 继承链搜索
- 动态解析
- 消息转发
- 性能优化

## 实现原理
- 查找算法
- 缓存机制
- 动态分发
- 错误处理
- 性能考虑

## 使用场景
- 方法调用
- 动态绑定
- 消息转发
- 运行时特性
- 性能优化

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.2.3以函数的形式来调用方法文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.3-以函数的形式来调用方法.md" << 'EOF'
---
title: 以函数的形式来调用方法
icon: function-call
order: 3
---

# 以函数的形式来调用方法

## 调用机制
- 函数调用
- 方法映射
- 参数传递
- 返回值处理
- 性能特性

## 实现原理
- 函数封装
- 消息转换
- 参数处理
- 返回值处理
- 错误处理

## 使用场景
- 性能优化
- 接口适配
- 底层操作
- 特殊需求
- 兼容性

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建专栏函数指针文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/专栏-函数指针.md" << 'EOF'
---
title: 函数指针
icon: function-pointer
order: 4
---

# 函数指针

## 基本概念
- 指针定义
- 函数类型
- 调用约定
- 内存模型
- 使用场景

## 使用方法
- 声明语法
- 赋值操作
- 调用方式
- 类型转换
- 错误处理

## 注意事项
- 类型安全
- 内存管理
- 性能影响
- 调试难度
- 可维护性

## 最佳实践
- 使用规范
- 安全考虑
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建8.2.4对self进行赋值文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.4-对self进行赋值.md" << 'EOF'
---
title: 对self进行赋值
icon: self-assignment
order: 5
---

# 对self进行赋值

## 基本概念
- self指针
- 赋值操作
- 内存管理
- 生命周期
- 使用限制

## 实现机制
- 指针操作
- 内存管理
- 引用计数
- 状态维护
- 安全检查

## 注意事项
- 安全隐患
- 内存泄漏
- 循环引用
- 状态一致性
- 调试难度

## 最佳实践
- 使用规范
- 安全策略
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建8.2.5发送消息的速度文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.5-发送消息的速度.md" << 'EOF'
---
title: 发送消息的速度
icon: message-speed
order: 6
---

# 发送消息的速度

## 性能分析
- 消息开销
- 调用耗时
- 缓存机制
- 优化策略
- 性能测试

## 优化方法
- 缓存优化
- 方法内联
- 快速路径
- 编译优化
- 运行时优化

## 影响因素
- 方法查找
- 参数传递
- 返回值处理
- 缓存命中
- 系统负载

## 最佳实践
- 优化策略
- 性能监控
- 测试方法
- 调优技巧
- 维护建议
EOF

# 创建8.2.6类对象和根类文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.6-类对象和根类.md" << 'EOF'
---
title: 类对象和根类
icon: class-root
order: 7
---

# 类对象和根类

## 基本概念
- 类对象定义
- 根类特性
- 继承关系
- 内存模型
- 运行时特性

## 实现机制
- 对象创建
- 方法调用
- 继承链接
- 内存管理
- 消息传递

## 使用场景
- 对象创建
- 类型判断
- 方法调用
- 动态特性
- 运行时操作

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.2.7Target-actionparadigm文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.7-Target-actionparadigm.md" << 'EOF'
---
title: Target-action范式
icon: target-action
order: 8
---

# Target-action范式

## 基本概念
- 设计模式
- 事件处理
- 消息传递
- 对象关系
- 使用场景

## 实现机制
- 目标对象
- 动作方法
- 事件绑定
- 消息传递
- 错误处理

## 使用场景
- 界面交互
- 事件处理
- 回调机制
- 解耦设计
- 动态绑定

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.2.8Xcode中的动作方法和Outlet的写法文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.2-消息发送机制/8.2.8-Xcode中的动作方法和Outlet的写法.md" << 'EOF'
---
title: Xcode中的动作方法和Outlet的写法
icon: xcode-actions
order: 9
---

# Xcode中的动作方法和Outlet的写法

## 基本语法
- IBAction定义
- IBOutlet声明
- 连接方式
- 命名规范
- 使用限制

## 实现方法
- 方法声明
- 属性连接
- 事件绑定
- 代码生成
- 调试支持

## 使用场景
- 界面交互
- 数据绑定
- 事件处理
- 状态更新
- 用户响应

## 最佳实践
- 命名规范
- 实现标准
- 调试方法
- 维护策略
- 性能优化
EOF

# 创建8.3Objective-C和Cocoa环境目录及其README
mkdir -p "$BASE_DIR/第8章-类NSObject和运行时系统/8.3-Objective-C和Cocoa环境"
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.3-Objective-C和Cocoa环境/README.md" << 'EOF'
---
title: Objective-C和Cocoa环境
icon: cocoa-env
order: 3
---

# Objective-C和Cocoa环境

本节介绍Objective-C在Cocoa环境中的应用和特性。
EOF

# 创建8.3.1Cocoa环境和MacOSX文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.3-Objective-C和Cocoa环境/8.3.1-Cocoa环境和MacOSX.md" << 'EOF'
---
title: Cocoa环境和MacOSX
icon: cocoa-macos
order: 1
---

# Cocoa环境和MacOSX

## 基本概念
- Cocoa框架
- MacOS特性
- 开发环境
- 运行时系统
- 框架集成

## 核心功能
- 界面框架
- 数据管理
- 系统服务
- 应用架构
- 开发工具

## 开发特性
- 框架使用
- 接口设计
- 性能优化
- 调试支持
- 部署管理

## 最佳实践
- 开发规范
- 架构设计
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建8.3.2CocoaTouch和iOS文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.3-Objective-C和Cocoa环境/8.3.2-CocoaTouch和iOS.md" << 'EOF'
---
title: CocoaTouch和iOS
icon: cocoa-touch
order: 2
---

# CocoaTouch和iOS

## 基本概念
- CocoaTouch框架
- iOS平台特性
- 开发环境
- 运行时系统
- 框架集成

## 核心功能
- 界面框架
- 触摸事件
- 手势识别
- 动画系统
- 设备特性

## 开发特性
- 界面设计
- 事件处理
- 性能优化
- 内存管理
- 调试支持

## 最佳实践
- 开发规范
- 架构设计
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.3.3框架文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.3-Objective-C和Cocoa环境/8.3.3-框架.md" << 'EOF'
---
title: 框架
icon: framework
order: 3
---

# 框架

## 基本概念
- 框架定义
- 架构设计
- 模块组织
- 依赖管理
- 版本控制

## 核心功能
- 基础服务
- 界面组件
- 数据管理
- 网络通信
- 系统集成

## 使用方法
- 框架引入
- API调用
- 配置管理
- 错误处理
- 性能优化

## 最佳实践
- 架构设计
- 代码组织
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.3.4框架的构成和头文件文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.3-Objective-C和Cocoa环境/8.3.4-框架的构成和头文件.md" << 'EOF'
---
title: 框架的构成和头文件
icon: framework-structure
order: 4
---

# 框架的构成和头文件

## 框架结构
- 目录组织
- 文件分类
- 模块划分
- 依赖关系
- 版本管理

## 头文件管理
- 文件组织
- 导入规则
- 命名规范
- 访问控制
- 版本控制

## 使用规范
- 导入方式
- 依赖管理
- 命名约定
- 注释规范
- 版本兼容

## 最佳实践
- 文件组织
- 代码规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.4全新的运行时系统目录及其README
mkdir -p "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统"
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统/README.md" << 'EOF'
---
title: 全新的运行时系统
icon: runtime-system
order: 4
---

# 全新的运行时系统

本节介绍Objective-C新一代运行时系统的特性和功能。
EOF

# 创建8.4.1对64位的对应和现代运行时系统文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统/8.4.1-对64位的对应和现代运行时系统.md" << 'EOF'
---
title: 对64位的对应和现代运行时系统
icon: 64bit-runtime
order: 1
---

# 对64位的对应和现代运行时系统

## 基本特性
- 64位支持
- 内存模型
- 性能优化
- 兼容性
- 新特性

## 实现机制
- 内存管理
- 消息传递
- 方法调用
- 类型系统
- 运行时特性

## 优化改进
- 性能提升
- 内存效率
- 并发支持
- 调试能力
- 安全特性

## 最佳实践
- 迁移策略
- 优化方法
- 调试技巧
- 性能监控
- 维护建议
EOF

# 创建8.4.2数据模型文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统/8.4.2-数据模型.md" << 'EOF'
---
title: 数据模型
icon: data-model
order: 2
---

# 数据模型

## 基本概念
- 数据结构
- 内存布局
- 类型系统
- 对象模型
- 引用关系

## 实现机制
- 数据组织
- 内存管理
- 类型处理
- 对象映射
- 性能优化

## 使用方法
- 模型定义
- 数据操作
- 类型转换
- 序列化
- 持久化

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.4.364位模型和整数类型文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统/8.4.3-64位模型和整数类型.md" << 'EOF'
---
title: 64位模型和整数类型
icon: 64bit-integers
order: 3
---

# 64位模型和整数类型

## 基本概念
- 64位架构
- 整数类型
- 内存对齐
- 数据表示
- 性能特性

## 类型系统
- 基本类型
- 类型转换
- 位操作
- 边界处理
- 兼容性

## 注意事项
- 类型安全
- 性能影响
- 内存使用
- 平台差异
- 调试方法

## 最佳实践
- 类型选择
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建8.4.4CoreGraphics的浮点数类型文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统/8.4.4-CoreGraphics的浮点数类型.md" << 'EOF'
---
title: CoreGraphics的浮点数类型
icon: floating-point
order: 4
---

# CoreGraphics的浮点数类型

## 基本类型
- CGFloat定义
- 精度特性
- 平台差异
- 性能考虑
- 使用场景

## 实现机制
- 类型转换
- 计算精度
- 内存布局
- 性能优化
- 平台适配

## 使用方法
- 数值运算
- 坐标计算
- 图形变换
- 精度控制
- 类型转换

## 最佳实践
- 类型选择
- 精度控制
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建8.4.5健壮实例变量文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统/8.4.5-健壮实例变量.md" << 'EOF'
---
title: 健壮实例变量
icon: robust-ivar
order: 5
---

# 健壮实例变量

## 基本概念
- 变量定义
- 内存管理
- 线程安全
- 访问控制
- 生命周期

## 实现机制
- 内存布局
- 访问方式
- 同步处理
- 安全保护
- 性能优化

## 使用场景
- 数据存储
- 状态管理
- 线程控制
- 内存优化
- 安全考虑

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏条件编译文件
cat > "$BASE_DIR/第8章-类NSObject和运行时系统/8.4-全新的运行时系统/专栏-条件编译.md" << 'EOF'
---
title: 条件编译
icon: conditional-compilation
order: 6
---

# 条件编译

## 基本概念
- 预处理指令
- 编译条件
- 平台差异
- 版本控制
- 调试支持

## 使用方法
- 条件判断
- 宏定义
- 平台适配
- 版本控制
- 调试开关

## 应用场景
- 平台兼容
- 调试控制
- 特性开关
- 版本管理
- 性能优化

## 最佳实践
- 使用规范
- 代码组织
- 维护策略
- 调试方法
- 版本控制
EOF

# 创建第9章Foundation框架中常用的类目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/README.md" << 'EOF'
---
title: Foundation框架中常用的类
icon: foundation
order: 9
---

# Foundation框架中常用的类

本章介绍Foundation框架中最常用的核心类及其使用方法。
EOF

# 创建9.1对象的可变性目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类/9.1-对象的可变性"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.1-对象的可变性/README.md" << 'EOF'
---
title: 对象的可变性
icon: mutability
order: 1
---

# 对象的可变性

本节介绍对象的可变性特征及其应用。
EOF

# 创建9.1.1可变对象和不可变对象文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.1-对象的可变性/9.1.1-可变对象和不可变对象.md" << 'EOF'
---
title: 可变对象和不可变对象
icon: mutable-immutable
order: 1
---

# 可变对象和不可变对象

## 基本概念
- 可变性定义
- 对象特性
- 内存管理
- 线程安全
- 使用场景

## 实现机制
- 内部结构
- 状态管理
- 内存分配
- 线程处理
- 性能优化

## 使用场景
- 数据处理
- 状态管理
- 并发控制
- 性能优化
- 安全考虑

## 最佳实践
- 设计选择
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建9.1.2可变对象的生成文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.1-对象的可变性/9.1.2-可变对象的生成.md" << 'EOF'
---
title: 可变对象的生成
icon: mutable-creation
order: 2
---

# 可变对象的生成

## 创建方法
- 初始化
- 复制转换
- 工厂方法
- 构建模式
- 性能考虑

## 实现机制
- 内存分配
- 状态初始化
- 数据复制
- 引用管理
- 性能优化

## 使用场景
- 数据处理
- 状态管理
- 对象转换
- 性能优化
- 内存控制

## 最佳实践
- 创建策略
- 内存管理
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建9.2字符串类NSString目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类/9.2-字符串类NSString"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.2-字符串类NSString/README.md" << 'EOF'
---
title: 字符串类NSString
icon: nsstring
order: 2
---

# 字符串类NSString

本节介绍NSString类的基本概念和使用方法。
EOF

# 创建9.2.1常量字符串文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.2-字符串类NSString/9.2.1-常量字符串.md" << 'EOF'
---
title: 常量字符串
icon: constant-string
order: 1
---

# 常量字符串

## 基本概念
- 字符串常量
- 内存管理
- 性能特性
- 使用限制
- 编码支持

## 实现机制
- 内存分配
- 存储方式
- 编码处理
- 性能优化
- 内存管理

## 使用场景
- 静态文本
- 资源管理
- 国际化
- 性能优化
- 内存控制

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建9.2.2NSString文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.2-字符串类NSString/9.2.2-NSString.md" << 'EOF'
---
title: NSString
icon: nsstring-class
order: 2
---

# NSString

## 基本特性
- 不可变性
- 字符编码
- 内存管理
- 性能特性
- API设计

## 核心功能
- 字符串操作
- 编码转换
- 比较搜索
- 格式化
- 文件处理

## 使用场景
- 文本处理
- 数据转换
- 文件操作
- 国际化
- 序列化

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建9.2.3NSMutableString文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.2-字符串类NSString/9.2.3-NSMutableString.md" << 'EOF'
---
title: NSMutableString
icon: mutable-string
order: 3
---

# NSMutableString

## 基本特性
- 可变性
- 内存管理
- 线程安全
- 性能特性
- 继承关系

## 核心功能
- 字符串修改
- 插入删除
- 替换操作
- 追加操作
- 格式化

## 使用场景
- 文本编辑
- 动态内容
- 字符串构建
- 性能优化
- 内存管理

## 最佳实践
- 使用规范
- 性能优化
- 线程安全
- 调试技巧
- 维护建议
EOF

# 创建9.3NSData目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类/9.3-NSData"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.3-NSData/README.md" << 'EOF'
---
title: NSData
icon: nsdata
order: 3
---

# NSData

本节介绍NSData类的基本概念和使用方法。
EOF

# 创建9.3.1NSData文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.3-NSData/9.3.1-NSData.md" << 'EOF'
---
title: NSData
icon: nsdata-class
order: 1
---

# NSData

## 基本特性
- 二进制数据
- 不可变性
- 内存管理
- 性能特性
- API设计

## 核心功能
- 数据存储
- 文件操作
- 网络传输
- 加密解密
- 序列化

## 使用场景
- 文件处理
- 网络通信
- 数据加密
- 二进制操作
- 资源管理

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建9.3.2NSMutableData文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.3-NSData/9.3.2-NSMutableData.md" << 'EOF'
---
title: NSMutableData
icon: mutable-data
order: 2
---

# NSMutableData

## 基本特性
- 可变性
- 内存管理
- 线程安全
- 性能特性
- 继承关系

## 核心功能
- 数据修改
- 追加操作
- 插入删除
- 容量管理
- 字节操作

## 使用场景
- 数据处理
- 流操作
- 缓冲区管理
- 动态内容
- 性能优化

## 最佳实践
- 使用规范
- 性能优化
- 线程安全
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建9.4数组类目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/README.md" << 'EOF'
---
title: 数组类
icon: array
order: 4
---

# 数组类

本节介绍Foundation框架中的数组类及其使用方法。
EOF

# 创建9.4.1NSArray文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/9.4.1-NSArray.md" << 'EOF'
---
title: NSArray
icon: nsarray
order: 1
---

# NSArray

## 基本特性
- 不可变性
- 有序集合
- 类型限制
- 内存管理
- 性能特性

## 核心功能
- 数组操作
- 元素访问
- 查找排序
- 遍历方法
- 序列化

## 使用场景
- 数据存储
- 集合操作
- 数据传输
- 缓存管理
- 性能优化

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建9.4.2NSMutableArray文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/9.4.2-NSMutableArray.md" << 'EOF'
---
title: NSMutableArray
icon: mutable-array
order: 2
---

# NSMutableArray

## 基本特性
- 可变性
- 动态扩容
- 线程安全
- 内存管理
- 性能特性

## 核心功能
- 增删改查
- 排序操作
- 容量管理
- 元素过滤
- 批量操作

## 使用场景
- 动态集合
- 数据缓存
- 临时存储
- 队列实现
- 数据处理

## 最佳实践
- 使用规范
- 性能优化
- 线程安全
- 调试技巧
- 维护建议
EOF

# 创建9.4.3数组对象的所有权文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/9.4.3-数组对象的所有权.md" << 'EOF'
---
title: 数组对象的所有权
icon: array-ownership
order: 3
---

# 数组对象的所有权

## 基本概念
- 所有权模型
- 引用计数
- 内存管理
- 生命周期
- 对象关系

## 管理机制
- 引用管理
- 内存分配
- 对象释放
- 循环引用
- 性能优化

## 注意事项
- 内存泄漏
- 悬垂指针
- 循环引用
- 线程安全
- 性能影响

## 最佳实践
- 管理策略
- 内存优化
- 调试方法
- 性能优化
- 维护建议
EOF

# 创建9.4.4快速枚举文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/9.4.4-快速枚举.md" << 'EOF'
---
title: 快速枚举
icon: fast-enumeration
order: 4
---

# 快速枚举

## 基本概念
- 语法特性
- 实现机制
- 性能优势
- 使用限制
- 内存影响

## 使用方法
- 语法格式
- 遍历操作
- 异常处理
- 性能优化
- 调试支持

## 应用场景
- 集合遍历
- 数据处理
- 批量操作
- 性能优化
- 代码简化

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建9.4.5枚举器NSEnumerator文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/9.4.5-枚举器NSEnumerator.md" << 'EOF'
---
title: 枚举器NSEnumerator
icon: enumerator
order: 5
---

# 枚举器NSEnumerator

## 基本概念
- 枚举器定义
- 工作原理
- 内存管理
- 性能特性
- 使用场景

## 核心功能
- 遍历操作
- 状态管理
- 异常处理
- 性能优化
- 调试支持

## 使用场景
- 集合遍历
- 数据处理
- 状态维护
- 性能优化
- 调试支持

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建9.4.6快速枚举和枚举器文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/9.4.6-快速枚举和枚举器.md" << 'EOF'
---
title: 快速枚举和枚举器
icon: enumeration-comparison
order: 6
---

# 快速枚举和枚举器

## 比较分析
- 性能差异
- 使用场景
- 内存开销
- 功能特点
- 实现机制

## 选择标准
- 性能要求
- 功能需求
- 代码复杂度
- 维护成本
- 调试难度

## 使用建议
- 场景选择
- 性能考虑
- 代码风格
- 调试支持
- 维护性

## 最佳实践
- 选择策略
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建9.4.7集合类文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.4-数组类/9.4.7-集合类.md" << 'EOF'
---
title: 集合类
icon: collection
order: 7
---

# 集合类

## 基本概念
- 集合定义
- 数据结构
- 内存管理
- 性能特性
- 使用场景

## 核心功能
- 元素操作
- 集合运算
- 遍历方法
- 性能优化
- 内存管理

## 使用场景
- 数据去重
- 集合运算
- 快速查找
- 数据过滤
- 性能优化

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建9.5词典类目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类/9.5-词典类"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.5-词典类/README.md" << 'EOF'
---
title: 词典类
icon: dictionary
order: 5
---

# 词典类

本节介绍Foundation框架中的词典类及其使用方法。
EOF

# 创建9.6包裹类目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类/9.6-包裹类"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.6-包裹类/README.md" << 'EOF'
---
title: 包裹类
icon: wrapper
order: 6
---

# 包裹类

本节介绍Foundation框架中的包裹类及其使用方法。
EOF

# 创建9.6.1NSNumber文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.6-包裹类/9.6.1-NSNumber.md" << 'EOF'
---
title: NSNumber
icon: nsnumber
order: 1
---

# NSNumber

## 基本概念
- 数值包装
- 类型转换
- 内存管理
- 性能特性
- 使用场景

## 核心功能
- 数值封装
- 类型转换
- 比较操作
- 序列化
- 格式化

## 使用场景
- 数据存储
- 类型转换
- 集合操作
- 序列化
- 数值处理

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建9.6.2NSValue文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.6-包裹类/9.6.2-NSValue.md" << 'EOF'
---
title: NSValue
icon: nsvalue
order: 2
---

# NSValue

## 基本概念
- 值包装
- 类型支持
- 内存管理
- 性能特性
- 使用场景

## 核心功能
- 结构体封装
- 指针包装
- 类型转换
- 序列化
- 数据存储

## 使用场景
- 结构体存储
- 指针管理
- 集合操作
- 数据传递
- 类型转换

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF

# 创建9.6.3类型编码和@encode()文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.6-包裹类/9.6.3-类型编码和@encode().md" << 'EOF'
---
title: 类型编码和@encode()
icon: type-encoding
order: 3
---

# 类型编码和@encode()

## 基本概念
- 编码规则
- 类型表示
- 运行时支持
- 使用场景
- 性能影响

## 实现机制
- 编码生成
- 类型解析
- 运行时处理
- 内存管理
- 性能优化

## 使用场景
- 类型识别
- 运行时操作
- 动态调用
- 类型转换
- 反射机制

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建9.6.4NSNull文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.6-包裹类/9.6.4-NSNull.md" << 'EOF'
---
title: NSNull
icon: nsnull
order: 4
---

# NSNull

## 基本概念
- 空值表示
- 单例模式
- 使用场景
- 内存管理
- 性能特性

## 核心功能
- 空值处理
- 集合操作
- 序列化
- 比较操作
- 类型转换

## 使用场景
- 空值表示
- 集合存储
- 数据传输
- JSON处理
- 数据库操作

## 最佳实践
- 使用规范
- 性能优化
- 错误处理
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建9.7NSURL目录及其README
mkdir -p "$BASE_DIR/第9章-Foundation框架中常用的类/9.7-NSURL"
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.7-NSURL/README.md" << 'EOF'
---
title: NSURL
icon: url
order: 7
---

# NSURL

本节介绍NSURL类的基本概念和使用方法。
EOF

# 创建9.7.1关于URL文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.7-NSURL/9.7.1-关于URL.md" << 'EOF'
---
title: 关于URL
icon: url-intro
order: 1
---

# 关于URL

## 基本概念
- URL定义
- 组成部分
- 编码规则
- 使用场景
- 安全考虑

## 核心特性
- 格式规范
- 编码解码
- 参数处理
- 安全机制
- 性能优化

## 使用场景
- 网络访问
- 资源定位
- 文件操作
- 参数传递
- 安全处理

## 最佳实践
- 使用规范
- 安全策略
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建9.7.2NSURL的概要文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.7-NSURL/9.7.2-NSURL的概要.md" << 'EOF'
---
title: NSURL的概要
icon: url-overview
order: 2
---

# NSURL的概要

## 基本特性
- 类设计
- 功能特点
- 内存管理
- 性能特性
- 使用限制

## 核心功能
- URL解析
- 参数处理
- 编码转换
- 资源访问
- 错误处理

## 使用方法
- 创建URL
- 解析组件
- 参数操作
- 资源定位
- 错误处理

## 最佳实践
- 使用规范
- 性能优化
- 安全考虑
- 调试技巧
- 维护建议
EOF

# 创建9.7.3使用NSURL来访问资源文件
cat > "$BASE_DIR/第9章-Foundation框架中常用的类/9.7-NSURL/9.7.3-使用NSURL来访问资源.md" << 'EOF'
---
title: 使用NSURL来访问资源
icon: url-resource
order: 3
---

# 使用NSURL来访问资源

## 访问方法
- 资源加载
- 数据读取
- 异步操作
- 缓存管理
- 错误处理

## 实现机制
- 资源定位
- 数据传输
- 缓存策略
- 错误处理
- 性能优化

## 使用场景
- 文件访问
- 网络请求
- 资源下载
- 数据上传
- 缓存管理

## 最佳实践
- 使用规范
- 性能优化
- 错误处理
- 调试技巧
- 维护建议
EOF

# 创建第10章范畴目录及其README
mkdir -p "$BASE_DIR/第10章-范畴"
cat > "$BASE_DIR/第10章-范畴/README.md" << 'EOF'
---
title: 范畴
icon: category
order: 10
---

# 范畴

本章介绍Objective-C中的范畴概念及其应用。
EOF

# 创建10.1范畴目录及其README
mkdir -p "$BASE_DIR/第10章-范畴/10.1-范畴"
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/README.md" << 'EOF'
---
title: 范畴
icon: category-intro
order: 1
---

# 范畴

本节介绍范畴的基本概念和核心特性。
EOF

# 创建10.1.1范畴文件
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/10.1.1-范畴.md" << 'EOF'
---
title: 范畴
icon: category-detail
order: 1
---

# 范畴

## 基本概念
- 范畴定义
- 设计目的
- 实现机制
- 使用场景
- 限制条件

## 核心特性
- 方法扩展
- 属性添加
- 协议实现
- 私有方法
- 运行时特性

## 使用场景
- 类扩展
- 功能分组
- 私有实现
- 代码组织
- 模块化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建10.1.2范畴和文件的组织文件
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/10.1.2-范畴和文件的组织.md" << 'EOF'
---
title: 范畴和文件的组织
icon: category-organization
order: 2
---

# 范畴和文件的组织

## 文件结构
- 头文件组织
- 实现文件
- 命名规范
- 依赖管理
- 版本控制

## 组织方式
- 模块划分
- 功能分组
- 代码复用
- 维护策略
- 扩展性

## 最佳实践
- 文件命名
- 目录结构
- 代码组织
- 版本管理
- 文档规范

## 注意事项
- 命名冲突
- 依赖循环
- 版本兼容
- 维护成本
- 扩展性
EOF

# 创建10.1.3作为子模块的范畴文件
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/10.1.3-作为子模块的范畴.md" << 'EOF'
---
title: 作为子模块的范畴
icon: category-submodule
order: 3
---

# 作为子模块的范畴

## 基本概念
- 子模块定义
- 模块化设计
- 依赖关系
- 接口设计
- 封装性

## 实现机制
- 模块划分
- 接口定义
- 依赖管理
- 版本控制
- 测试策略

## 使用场景
- 功能扩展
- 代码重用
- 模块化
- 维护优化
- 团队协作

## 最佳实践
- 设计模式
- 实现规范
- 测试方法
- 文档管理
- 版本控制
EOF

# 创建10.1.4方法的前向声明文件
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/10.1.4-方法的前向声明.md" << 'EOF'
---
title: 方法的前向声明
icon: forward-declaration
order: 4
---

# 方法的前向声明

## 基本概念
- 声明定义
- 使用场景
- 编译原理
- 性能影响
- 使用限制

## 实现机制
- 声明方式
- 编译过程
- 链接处理
- 性能优化
- 错误处理

## 使用场景
- 循环依赖
- 接口设计
- 编译优化
- 代码组织
- 模块化

## 最佳实践
- 使用规范
- 性能优化
- 调试技巧
- 维护建议
- 文档规范
EOF

# 创建10.1.5私有方法文件
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/10.1.5-私有方法.md" << 'EOF'
---
title: 私有方法
icon: private-method
order: 5
---

# 私有方法

## 基本概念
- 私有性定义
- 访问控制
- 封装原则
- 使用场景
- 实现机制

## 实现方式
- 声明方式
- 访问限制
- 命名规范
- 封装策略
- 安全考虑

## 使用场景
- 内部实现
- 辅助功能
- 数据封装
- 代码重用
- 安全控制

## 最佳实践
- 设计规范
- 实现标准
- 安全策略
- 调试方法
- 维护建议
EOF

# 创建10.1.6类扩展文件
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/10.1.6-类扩展.md" << 'EOF'
---
title: 类扩展
icon: class-extension
order: 6
---

# 类扩展

## 基本概念
- 扩展定义
- 实现机制
- 使用场景
- 限制条件
- 性能影响

## 实现方式
- 声明语法
- 实现细节
- 访问控制
- 继承关系
- 性能优化

## 使用场景
- 功能扩展
- 接口适配
- 代码重用
- 私有实现
- 模块化

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建10.1.7范畴和属性声明文件
cat > "$BASE_DIR/第10章-范畴/10.1-范畴/10.1.7-范畴和属性声明.md" << 'EOF'
---
title: 范畴和属性声明
icon: category-property
order: 7
---

# 范畴和属性声明

## 基本概念
- 属性定义
- 声明规则
- 访问控制
- 内存管理
- 使用限制

## 实现机制
- 声明方式
- 访问方法
- 内存管理
- 线程安全
- 性能优化

## 使用场景
- 数据封装
- 状态管理
- 接口设计
- 功能扩展
- 代码重用

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建10.2给现有类追加范畴目录及其README
mkdir -p "$BASE_DIR/第10章-范畴/10.2-给现有类追加范畴"
cat > "$BASE_DIR/第10章-范畴/10.2-给现有类追加范畴/README.md" << 'EOF'
---
title: 给现有类追加范畴
icon: add-category
order: 2
---

# 给现有类追加范畴

本节介绍如何为现有类添加范畴以扩展功能。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建10.2.1追加新的方法文件
cat > "$BASE_DIR/第10章-范畴/10.2-给现有类追加范畴/10.2.1-追加新的方法.md" << 'EOF'
---
title: 追加新的方法
icon: add-method
order: 1
---

# 追加新的方法

## 基本概念
- 方法追加
- 命名规范
- 实现机制
- 使用限制
- 性能影响

## 实现方式
- 声明语法
- 方法定义
- 参数处理
- 返回值
- 错误处理

## 使用场景
- 功能扩展
- 接口适配
- 代码重用
- 性能优化
- 维护需求

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建10.2.2追加方法的例子文件
cat > "$BASE_DIR/第10章-范畴/10.2-给现有类追加范畴/10.2.2-追加方法的例子.md" << 'EOF'
---
title: 追加方法的例子
icon: method-examples
order: 2
---

# 追加方法的例子

## 实现示例
- 基础方法
- 工具方法
- 辅助功能
- 性能优化
- 调试支持

## 使用方法
- 方法调用
- 参数传递
- 返回处理
- 错误处理
- 性能考虑

## 注意事项
- 命名规范
- 参数验证
- 错误处理
- 性能优化
- 代码复用

## 最佳实践
- 实现规范
- 测试策略
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏可变参数的方法的定义文件
cat > "$BASE_DIR/第10章-范畴/10.2-给现有类追加范畴/专栏-可变参数的方法的定义.md" << 'EOF'
---
title: 可变参数的方法的定义
icon: variadic-method
order: 3
---

# 可变参数的方法的定义

## 基本概念
- 可变参数
- 语法规则
- 实现机制
- 使用限制
- 性能影响

## 实现方式
- 参数声明
- 参数处理
- 类型安全
- 内存管理
- 性能优化

## 使用场景
- 灵活调用
- 参数集合
- 便捷方法
- 接口设计
- 代码简化

## 最佳实践
- 使用规范
- 性能优化
- 类型检查
- 调试技巧
- 维护建议
EOF

# 创建10.2.3覆盖已有的方法文件
cat > "$BASE_DIR/第10章-范畴/10.2-给现有类追加范畴/10.2.3-覆盖已有的方法.md" << 'EOF'
---
title: 覆盖已有的方法
icon: override-method
order: 4
---

# 覆盖已有的方法

## 基本概念
- 方法覆盖
- 实现机制
- 使用限制
- 性能影响
- 安全考虑

## 实现方式
- 覆盖声明
- 方法调用
- 参数处理
- 返回值
- 错误处理

## 注意事项
- 命名冲突
- 调用顺序
- 性能影响
- 兼容性
- 维护性

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建10.3关联引用目录及其README
mkdir -p "$BASE_DIR/第10章-范畴/10.3-关联引用"
cat > "$BASE_DIR/第10章-范畴/10.3-关联引用/README.md" << 'EOF'
---
title: 关联引用
icon: associated-reference
order: 3
---

# 关联引用

本节介绍关联引用的概念和使用方法。
EOF

# 创建10.3.1关联引用的概念文件
cat > "$BASE_DIR/第10章-范畴/10.3-关联引用/10.3.1-关联引用的概念.md" << 'EOF'
---
title: 关联引用的概念
icon: associated-concept
order: 1
---

# 关联引用的概念

## 基本概念
- 引用定义
- 关联机制
- 内存管理
- 生命周期
- 使用场景

## 实现机制
- 引用存储
- 关联方式
- 内存分配
- 生命周期
- 垃圾回收

## 使用场景
- 对象关联
- 数据存储
- 状态管理
- 缓存实现
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建10.3.2添加和检索关联文件
cat > "$BASE_DIR/第10章-范畴/10.3-关联引用/10.3.2-添加和检索关联.md" << 'EOF'
---
title: 添加和检索关联
icon: add-retrieve
order: 2
---

# 添加和检索关联

## 基本操作
- 添加关联
- 检索方法
- 更新操作
- 删除关联
- 关联管理

## 实现机制
- 存储结构
- 查找算法
- 更新策略
- 删除处理
- 性能优化

## 使用场景
- 数据关联
- 缓存管理
- 状态跟踪
- 对象映射
- 性能优化

## 最佳实践
- 使用规范
- 性能优化
- 内存管理
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建10.3.3对象的存储方法文件
cat > "$BASE_DIR/第10章-范畴/10.3-关联引用/10.3.3-对象的存储方法.md" << 'EOF'
---
title: 对象的存储方法
icon: object-storage
order: 3
---

# 对象的存储方法

## 存储机制
- 内存分配
- 引用计数
- 存储策略
- 生命周期
- 垃圾回收

## 实现方式
- 存储结构
- 访问方法
- 内存管理
- 性能优化
- 安全控制

## 使用场景
- 数据缓存
- 对象持久化
- 状态保存
- 内存优化
- 性能提升

## 最佳实践
- 存储策略
- 内存管理
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建10.3.4断开关联文件
cat > "$BASE_DIR/第10章-范畴/10.3-关联引用/10.3.4-断开关联.md" << 'EOF'
---
title: 断开关联
icon: break-association
order: 4
---

# 断开关联

## 基本概念
- 关联解除
- 内存释放
- 引用清理
- 安全考虑
- 性能影响

## 实现机制
- 解除方法
- 内存管理
- 引用处理
- 异常处理
- 性能优化

## 注意事项
- 内存泄漏
- 悬垂指针
- 循环引用
- 线程安全
- 性能考虑

## 最佳实践
- 解除策略
- 内存管理
- 安全处理
- 调试技巧
- 维护建议
EOF

# 创建10.3.5利用范畴的例子文件
cat > "$BASE_DIR/第10章-范畴/10.3-关联引用/10.3.5-利用范畴的例子.md" << 'EOF'
---
title: 利用范畴的例子
icon: category-examples
order: 5
---

# 利用范畴的例子

## 实现示例
- 基础用法
- 扩展功能
- 工具方法
- 性能优化
- 调试支持

## 使用场景
- 功能扩展
- 代码重用
- 接口适配
- 性能优化
- 维护需求

## 注意事项
- 命名规范
- 实现限制
- 性能影响
- 兼容性
- 维护性

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第11章抽象类和类簇目录及其README
mkdir -p "$BASE_DIR/第11章-抽象类和类簇"
cat > "$BASE_DIR/第11章-抽象类和类簇/README.md" << 'EOF'
---
title: 抽象类和类簇
icon: abstract-class
order: 11
---

# 抽象类和类簇

本章介绍Objective-C中的抽象类和类簇概念及其应用。
EOF

# 创建11.1抽象类目录及其README
mkdir -p "$BASE_DIR/第11章-抽象类和类簇/11.1-抽象类"
cat > "$BASE_DIR/第11章-抽象类和类簇/11.1-抽象类/README.md" << 'EOF'
---
title: 抽象类
icon: abstract-class-intro
order: 1
---

# 抽象类

本节介绍抽象类的基本概念和使用方法。
EOF

# 创建11.1.1什么是抽象类文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.1-抽象类/11.1.1-什么是抽象类.md" << 'EOF'
---
title: 什么是抽象类
icon: abstract-class-concept
order: 1
---

# 什么是抽象类

## 基本概念
- 抽象定义
- 设计目的
- 实现机制
- 使用场景
- 限制条件

## 核心特性
- 抽象方法
- 继承关系
- 多态性
- 接口设计
- 实现约束

## 使用场景
- 框架设计
- 接口规范
- 代码复用
- 扩展性
- 维护性

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建11.1.2抽象类的例子文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.1-抽象类/11.1.2-抽象类的例子.md" << 'EOF'
---
title: 抽象类的例子
icon: abstract-class-example
order: 2
---

# 抽象类的例子

## 实现示例
- 基础抽象类
- 常用模式
- 实现方法
- 使用技巧
- 注意事项

## 使用场景
- 框架设计
- 接口定义
- 代码复用
- 扩展实现
- 维护优化

## 注意事项
- 设计原则
- 实现限制
- 性能考虑
- 扩展性
- 维护性

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建11.2类簇目录及其README
mkdir -p "$BASE_DIR/第11章-抽象类和类簇/11.2-类簇"
cat > "$BASE_DIR/第11章-抽象类和类簇/11.2-类簇/README.md" << 'EOF'
---
title: 类簇
icon: class-cluster
order: 2
---

# 类簇

本节介绍类簇的基本概念和使用方法。
EOF

# 创建11.2.1类簇的概念文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.2-类簇/11.2.1-类簇的概念.md" << 'EOF'
---
title: 类簇的概念
icon: cluster-concept
order: 1
---

# 类簇的概念

## 基本概念
- 类簇定义
- 设计目的
- 实现机制
- 使用场景
- 优势特点

## 核心特性
- 抽象工厂
- 继承体系
- 多态实现
- 封装性
- 扩展性

## 使用场景
- 框架设计
- 接口统一
- 实现隐藏
- 性能优化
- 维护简化

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建11.2.2测试程序文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.2-类簇/11.2.2-测试程序.md" << 'EOF'
---
title: 测试程序
icon: test-program
order: 2
---

# 测试程序

## 测试方法
- 单元测试
- 集成测试
- 性能测试
- 边界测试
- 异常测试

## 实现示例
- 测试用例
- 测试框架
- 测试数据
- 测试环境
- 测试报告

## 注意事项
- 测试覆盖
- 性能监控
- 内存检测
- 异常处理
- 结果验证

## 最佳实践
- 测试策略
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建11.2.3编程中的注意事项文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.2-类簇/11.2.3-编程中的注意事项.md" << 'EOF'
---
title: 编程中的注意事项
icon: programming-notes
order: 3
---

# 编程中的注意事项

## 设计考虑
- 架构设计
- 接口定义
- 实现策略
- 扩展性
- 维护性

## 实现细节
- 命名规范
- 错误处理
- 性能优化
- 内存管理
- 线程安全

## 常见问题
- 类型转换
- 内存泄漏
- 循环引用
- 性能瓶颈
- 兼容性

## 最佳实践
- 编码规范
- 性能优化
- 调试技巧
- 测试策略
- 维护建议
EOF

# 创建11.3生成类簇的子类目录及其README
mkdir -p "$BASE_DIR/第11章-抽象类和类簇/11.3-生成类簇的子类"
cat > "$BASE_DIR/第11章-抽象类和类簇/11.3-生成类簇的子类/README.md" << 'EOF'
---
title: 生成类簇的子类
icon: cluster-subclass
order: 3
---

# 生成类簇的子类

本节介绍如何创建和使用类簇的子类。
EOF

# 创建11.3.1使用范畴文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.3-生成类簇的子类/11.3.1-使用范畴.md" << 'EOF'
---
title: 使用范畴
icon: category-usage
order: 1
---

# 使用范畴

## 基本概念
- 范畴应用
- 实现机制
- 使用场景
- 优势特点
- 限制条件

## 实现方式
- 范畴定义
- 方法扩展
- 属性添加
- 功能增强
- 性能优化

## 使用场景
- 功能扩展
- 接口适配
- 代码重用
- 性能优化
- 维护需求

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建11.3.2基本方法的重定义文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.3-生成类簇的子类/11.3.2-基本方法的重定义.md" << 'EOF'
---
title: 基本方法的重定义
icon: method-override
order: 2
---

# 基本方法的重定义

## 基本概念
- 方法重写
- 实现机制
- 使用场景
- 优势特点
- 限制条件

## 实现方式
- 方法声明
- 参数处理
- 返回值
- 异常处理
- 性能优化

## 注意事项
- 命名规范
- 参数验证
- 返回类型
- 异常处理
- 性能考虑

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建11.3.3生成字符串的子类文件
cat > "$BASE_DIR/第11章-抽象类和类簇/11.3-生成类簇的子类/11.3.3-生成字符串的子类.md" << 'EOF'
---
title: 生成字符串的子类
icon: string-subclass
order: 3
---

# 生成字符串的子类

## 基本概念
- 字符串继承
- 子类特性
- 实现机制
- 使用场景
- 限制条件

## 实现方式
- 类定义
- 方法重写
- 属性扩展
- 内存管理
- 性能优化

## 使用场景
- 自定义格式
- 特殊处理
- 功能扩展
- 性能优化
- 定制需求

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第12章协议目录及其README
mkdir -p "$BASE_DIR/第12章-协议"
cat > "$BASE_DIR/第12章-协议/README.md" << 'EOF'
---
title: 协议
icon: protocol
order: 12
---

# 协议

本章介绍Objective-C中的协议概念及其应用。
EOF

# 创建12.1协议的概念目录及其README
mkdir -p "$BASE_DIR/第12章-协议/12.1-协议的概念"
cat > "$BASE_DIR/第12章-协议/12.1-协议的概念/README.md" << 'EOF'
---
title: 协议的概念
icon: protocol-concept
order: 1
---

# 协议的概念

本节介绍协议的基本概念和核心特性。
EOF

# 创建12.1.1什么是协议文件
cat > "$BASE_DIR/第12章-协议/12.1-协议的概念/12.1.1-什么是协议.md" << 'EOF'
---
title: 什么是协议
icon: protocol-intro
order: 1
---

# 什么是协议

## 基本概念
- 协议定义
- 设计目的
- 实现机制
- 使用场景
- 优势特点

## 核心特性
- 接口定义
- 方法声明
- 可选实现
- 多重继承
- 类型检查

## 使用场景
- 接口设计
- 代码复用
- 多态实现
- 解耦设计
- 扩展性

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.1.2对象的协议文件
cat > "$BASE_DIR/第12章-协议/12.1-协议的概念/12.1.2-对象的协议.md" << 'EOF'
---
title: 对象的协议
icon: object-protocol
order: 2
---

# 对象的协议

## 基本概念
- 对象协议
- 实现机制
- 使用场景
- 优势特点
- 限制条件

## 实现方式
- 协议声明
- 方法实现
- 类型检查
- 多重协议
- 可选方法

## 使用场景
- 接口定义
- 行为规范
- 类型约束
- 扩展功能
- 代码重用

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.2Objective-C中协议的声明目录及其README
mkdir -p "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明"
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/README.md" << 'EOF'
---
title: Objective-C中协议的声明
icon: protocol-declaration
order: 2
---

# Objective-C中协议的声明

本节介绍如何在Objective-C中声明和使用协议。
EOF

# 创建12.2.1协议的声明文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.1-协议的声明.md" << 'EOF'
---
title: 协议的声明
icon: protocol-syntax
order: 1
---

# 协议的声明

## 基本语法
- 声明格式
- 关键字
- 命名规范
- 方法声明
- 属性声明

## 实现细节
- 必选方法
- 可选方法
- 类型声明
- 继承关系
- 多重协议

## 使用方法
- 协议采用
- 类型检查
- 方法调用
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建12.2.2协议的采用文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.2-协议的采用.md" << 'EOF'
---
title: 协议的采用
icon: protocol-adoption
order: 2
---

# 协议的采用

## 基本概念
- 采用声明
- 实现要求
- 类型检查
- 多重采用
- 限制条件

## 实现方式
- 语法格式
- 方法实现
- 类型声明
- 错误处理
- 性能优化

## 使用场景
- 接口实现
- 功能扩展
- 类型约束
- 多态设计
- 代码重用

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.2.3协议的继承文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.3-协议的继承.md" << 'EOF'
---
title: 协议的继承
icon: protocol-inheritance
order: 3
---

# 协议的继承

## 基本概念
- 继承机制
- 多重继承
- 实现要求
- 类型检查
- 限制条件

## 实现方式
- 继承声明
- 方法重写
- 类型适配
- 错误处理
- 性能优化

## 使用场景
- 接口扩展
- 功能复用
- 类型约束
- 多态实现
- 代码组织

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.2.4指定协议的类型声明文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.4-指定协议的类型声明.md" << 'EOF'
---
title: 指定协议的类型声明
icon: protocol-type
order: 4
---

# 指定协议的类型声明

## 基本语法
- 类型声明
- 语法规则
- 类型检查
- 编译限制
- 运行时检查

## 实现机制
- 声明方式
- 类型转换
- 错误处理
- 性能优化
- 安全检查

## 使用场景
- 类型约束
- 接口定义
- 多态实现
- 类型安全
- 代码组织

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.2.5协议的前置声明文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.5-协议的前置声明.md" << 'EOF'
---
title: 协议的前置声明
icon: protocol-forward
order: 5
---

# 协议的前置声明

## 基本概念
- 前置声明
- 使用场景
- 编译原理
- 性能影响
- 限制条件

## 实现机制
- 声明语法
- 编译处理
- 链接过程
- 性能优化
- 错误处理

## 使用场景
- 循环依赖
- 接口设计
- 编译优化
- 代码组织
- 模块化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.2.6协议适用性检查文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.6-协议适用性检查.md" << 'EOF'
---
title: 协议适用性检查
icon: protocol-conformance
order: 6
---

# 协议适用性检查

## 基本概念
- 适用性定义
- 检查机制
- 运行时检查
- 编译时检查
- 类型安全

## 实现机制
- 检查方法
- 错误处理
- 类型转换
- 性能优化
- 安全保证

## 使用场景
- 类型验证
- 接口检查
- 安全控制
- 错误预防
- 调试支持

## 最佳实践
- 检查策略
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.2.7必选功能和可选功能文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.7-必选功能和可选功能.md" << 'EOF'
---
title: 必选功能和可选功能
icon: required-optional
order: 7
---

# 必选功能和可选功能

## 基本概念
- 必选定义
- 可选定义
- 实现机制
- 运行时检查
- 使用场景

## 实现方式
- 声明语法
- 实现要求
- 检查机制
- 错误处理
- 性能优化

## 使用场景
- 接口设计
- 功能扩展
- 向后兼容
- 版本控制
- 代码重用

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.2.8使用协议的程序示例文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/12.2.8-使用协议的程序示例.md" << 'EOF'
---
title: 使用协议的程序示例
icon: protocol-example
order: 8
---

# 使用协议的程序示例

## 示例内容
- 基础示例
- 进阶用法
- 实现技巧
- 常见问题
- 解决方案

## 实现方法
- 协议定义
- 类实现
- 方法调用
- 错误处理
- 性能优化

## 注意事项
- 命名规范
- 实现要求
- 错误处理
- 性能考虑
- 维护性

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建专栏类的多重继承文件
cat > "$BASE_DIR/第12章-协议/12.2-Objective-C中协议的声明/专栏-类的多重继承.md" << 'EOF'
---
title: 类的多重继承
icon: multiple-inheritance
order: 9
---

# 类的多重继承

## 基本概念
- 多重继承
- 实现机制
- 优缺点
- 使用限制
- 性能影响

## 实现方式
- 协议组合
- 类继承
- 方法转发
- 组合模式
- 代理模式

## 注意事项
- 命名冲突
- 方法覆盖
- 性能开销
- 复杂性
- 维护难度

## 最佳实践
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.3非正式协议目录及其README
mkdir -p "$BASE_DIR/第12章-协议/12.3-非正式协议"
cat > "$BASE_DIR/第12章-协议/12.3-非正式协议/README.md" << 'EOF'
---
title: 非正式协议
icon: informal-protocol
order: 3
---

# 非正式协议

本节介绍非正式协议的概念和应用。
EOF

# 创建12.3.1什么是非正式协议文件
cat > "$BASE_DIR/第12章-协议/12.3-非正式协议/12.3.1-什么是非正式协议.md" << 'EOF'
---
title: 什么是非正式协议
icon: informal-protocol-intro
order: 1
---

# 什么是非正式协议

## 基本概念
- 定义特点
- 实现机制
- 使用场景
- 优缺点
- 限制条件

## 核心特性
- 灵活性
- 动态性
- 运行时检查
- 方法调用
- 错误处理

## 使用场景
- 动态交互
- 松耦合设计
- 运行时适配
- 扩展功能
- 兼容性

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建12.3.2非正式协议的用途文件
cat > "$BASE_DIR/第12章-协议/12.3-非正式协议/12.3.2-非正式协议的用途.md" << 'EOF'
---
title: 非正式协议的用途
icon: informal-protocol-usage
order: 2
---

# 非正式协议的用途

## 应用场景
- 动态交互
- 扩展功能
- 兼容处理
- 运行时适配
- 松耦合设计

## 实现方式
- 方法调用
- 消息转发
- 动态绑定
- 错误处理
- 性能优化

## 使用优势
- 灵活性
- 可扩展性
- 运行时适配
- 低耦合度
- 易维护性

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏使用宏（macro）来区分系统版本的差异文件
cat > "$BASE_DIR/第12章-协议/12.3-非正式协议/专栏-使用宏（macro）来区分系统版本的差异.md" << 'EOF'
---
title: 使用宏（macro）来区分系统版本的差异
icon: macro-version
order: 3
---

# 使用宏（macro）来区分系统版本的差异

## 基本概念
- 宏定义
- 版本检测
- 条件编译
- 兼容性
- 使用场景

## 实现方式
- 宏语法
- 版本判断
- 条件分支
- 错误处理
- 兼容处理

## 使用场景
- 版本适配
- 平台兼容
- 功能开关
- 调试支持
- 性能优化

## 最佳实践
- 命名规范
- 实现标准
- 版本控制
- 调试技巧
- 维护建议
EOF

# 创建第13章对象的复制及存储目录及其README
mkdir -p "$BASE_DIR/第13章-对象的复制及存储"
cat > "$BASE_DIR/第13章-对象的复制及存储/README.md" << 'EOF'
---
title: 对象的复制及存储
icon: object-copy-storage
order: 13
---

# 对象的复制及存储

本章介绍对象的复制和存储机制。
EOF

# 创建13.1对象的复制目录及其README
mkdir -p "$BASE_DIR/第13章-对象的复制及存储/13.1-对象的复制"
cat > "$BASE_DIR/第13章-对象的复制及存储/13.1-对象的复制/README.md" << 'EOF'
---
title: 对象的复制
icon: object-copy
order: 1
---

# 对象的复制

本节介绍对象复制的基本概念和实现方法。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建13.1.1浅复制和深复制文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.1-对象的复制/13.1.1-浅复制和深复制.md" << 'EOF'
---
title: 浅复制和深复制
icon: copy-types
order: 1
---

# 浅复制和深复制

## 基本概念
- 浅复制定义
- 深复制定义
- 实现机制
- 性能影响
- 使用场景

## 实现方式
- 浅复制实现
- 深复制实现
- 内存管理
- 性能优化
- 错误处理

## 使用场景
- 数据复制
- 对象克隆
- 状态保存
- 性能优化
- 内存管理

## 最佳实践
- 选择策略
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.1.2区域文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.1-对象的复制/13.1.2-区域.md" << 'EOF'
---
title: 区域
icon: zone
order: 2
---

# 区域

## 基本概念
- 区域定义
- 内存分配
- 管理机制
- 使用场景
- 性能特性

## 实现机制
- 区域创建
- 内存管理
- 资源分配
- 释放策略
- 性能优化

## 使用场景
- 内存管理
- 资源控制
- 性能优化
- 内存回收
- 资源复用

## 最佳实践
- 管理策略
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.1.3复制方法的定义文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.1-对象的复制/13.1.3-复制方法的定义.md" << 'EOF'
---
title: 复制方法的定义
icon: copy-method
order: 3
---

# 复制方法的定义

## 基本语法
- 方法声明
- 参数定义
- 返回类型
- 实现要求
- 使用限制

## 实现机制
- 方法实现
- 内存管理
- 错误处理
- 性能优化
- 安全考虑

## 使用场景
- 对象复制
- 状态克隆
- 数据备份
- 性能优化
- 资源管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.1.4复制方法的例子文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.1-对象的复制/13.1.4-复制方法的例子.md" << 'EOF'
---
title: 复制方法的例子
icon: copy-examples
order: 4
---

# 复制方法的例子

## 示例内容
- 基础示例
- 进阶用法
- 实现技巧
- 常见问题
- 解决方案

## 实现方法
- 方法定义
- 参数处理
- 返回值
- 错误处理
- 性能优化

## 注意事项
- 内存管理
- 性能考虑
- 错误处理
- 安全检查
- 兼容性

## 最佳实践
- 实现规范
- 性能优化
- 调试技巧
- 错误处理
- 维护建议
EOF

# 创建13.1.5实现可变复制文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.1-对象的复制/13.1.5-实现可变复制.md" << 'EOF'
---
title: 实现可变复制
icon: mutable-copy
order: 5
---

# 实现可变复制

## 基本概念
- 可变性定义
- 实现机制
- 使用场景
- 优势特点
- 限制条件

## 实现方式
- 方法定义
- 内存管理
- 状态复制
- 错误处理
- 性能优化

## 使用场景
- 数据修改
- 状态管理
- 对象克隆
- 性能优化
- 资源管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.2归档目录及其README
mkdir -p "$BASE_DIR/第13章-对象的复制及存储/13.2-归档"
cat > "$BASE_DIR/第13章-对象的复制及存储/13.2-归档/README.md" << 'EOF'
---
title: 归档
icon: archiving
order: 2
---

# 归档

本节介绍对象归档的概念和实现方法。
EOF

# 创建13.2.1对象的归档文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.2-归档/13.2.1-对象的归档.md" << 'EOF'
---
title: 对象的归档
icon: object-archive
order: 1
---

# 对象的归档

## 基本概念
- 归档定义
- 实现机制
- 使用场景
- 优势特点
- 限制条件

## 实现方式
- 归档过程
- 解档过程
- 数据格式
- 错误处理
- 性能优化

## 使用场景
- 数据持久化
- 状态保存
- 对象传输
- 版本控制
- 备份恢复

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建13.2.2Foundation框架的归档功能文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.2-归档/13.2.2-Foundation框架的归档功能.md" << 'EOF'
---
title: Foundation框架的归档功能
icon: foundation-archive
order: 2
---

# Foundation框架的归档功能

## 基本功能
- 归档接口
- 数据格式
- 存储机制
- 性能特性
- 使用限制

## 实现机制
- 序列化
- 反序列化
- 数据压缩
- 错误处理
- 性能优化

## 使用场景
- 数据持久化
- 对象传输
- 状态保存
- 版本控制
- 数据备份

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.2.3归档方法的定义文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.2-归档/13.2.3-归档方法的定义.md" << 'EOF'
---
title: 归档方法的定义
icon: archive-method
order: 3
---

# 归档方法的定义

## 基本语法
- 方法声明
- 参数定义
- 返回类型
- 实现要求
- 使用限制

## 实现机制
- 方法实现
- 数据处理
- 错误处理
- 性能优化
- 安全考虑

## 使用场景
- 对象存储
- 数据传输
- 状态保存
- 版本控制
- 数据备份

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.2.4归档方法定义文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.2-归档/13.2.4-归档方法定义.md" << 'EOF'
---
title: 归档方法定义
icon: archive-method-def
order: 4
---

# 归档方法定义

## 方法规范
- 命名规则
- 参数要求
- 返回值
- 异常处理
- 使用限制

## 实现细节
- 方法声明
- 参数验证
- 数据处理
- 错误处理
- 性能优化

## 使用示例
- 基础用法
- 进阶应用
- 错误处理
- 性能优化
- 最佳实践

## 注意事项
- 安全考虑
- 性能影响
- 兼容性
- 维护性
- 扩展性
EOF

# 创建13.2.5归档和解档的初始化方法文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.2-归档/13.2.5-归档和解档的初始化方法.md" << 'EOF'
---
title: 归档和解档的初始化方法
icon: archive-init
order: 5
---

# 归档和解档的初始化方法

## 初始化过程
- 归档初始化
- 解档初始化
- 参数配置
- 资源分配
- 错误处理

## 实现机制
- 方法定义
- 数据处理
- 资源管理
- 错误处理
- 性能优化

## 使用场景
- 对象创建
- 数据恢复
- 状态初始化
- 资源管理
- 错误处理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.3属性表目录及其README
mkdir -p "$BASE_DIR/第13章-对象的复制及存储/13.3-属性表"
cat > "$BASE_DIR/第13章-对象的复制及存储/13.3-属性表/README.md" << 'EOF'
---
title: 属性表
icon: property-list
order: 3
---

# 属性表

本节介绍属性表的概念和使用方法。
EOF

# 创建13.3.1属性表概况文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.3-属性表/13.3.1-属性表概况.md" << 'EOF'
---
title: 属性表概况
icon: property-list-overview
order: 1
---

# 属性表概况

## 基本概念
- 属性表定义
- 数据结构
- 存储格式
- 使用场景
- 性能特性

## 核心功能
- 数据存储
- 属性管理
- 值类型
- 访问方法
- 性能优化

## 使用场景
- 配置管理
- 数据存储
- 属性序列化
- 状态保存
- 数据交换

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.3.2ASCII码格式属性表文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.3-属性表/13.3.2-ASCII码格式属性表.md" << 'EOF'
---
title: ASCII码格式属性表
icon: ascii-property-list
order: 2
---

# ASCII码格式属性表

## 基本概念
- ASCII格式
- 编码规则
- 存储结构
- 解析机制
- 使用场景

## 实现机制
- 格式定义
- 编码转换
- 解析处理
- 错误处理
- 性能优化

## 使用场景
- 文本配置
- 数据交换
- 属性存储
- 跨平台
- 调试支持

## 最佳实践
- 格式规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建13.3.3XML格式属性表文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.3-属性表/13.3.3-XML格式属性表.md" << 'EOF'
---
title: XML格式属性表
icon: xml-property-list
order: 3
---

# XML格式属性表

## 基本概念
- XML格式
- 结构定义
- 解析机制
- 存储方式
- 使用场景

## 实现机制
- XML解析
- 数据转换
- 节点处理
- 错误处理
- 性能优化

## 使用场景
- 配置文件
- 数据交换
- 属性存储
- 跨平台
- 可读性

## 最佳实践
- 格式规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建13.3.4属性表的变换和检查文件
cat > "$BASE_DIR/第13章-对象的复制及存储/13.3-属性表/13.3.4-属性表的变换和检查.md" << 'EOF'
---
title: 属性表的变换和检查
icon: property-list-validation
order: 4
---

# 属性表的变换和检查

## 变换机制
- 格式转换
- 数据验证
- 类型检查
- 错误处理
- 性能优化

## 检查方法
- 完整性检查
- 类型验证
- 格式验证
- 值范围检查
- 错误处理

## 使用场景
- 数据迁移
- 格式转换
- 数据验证
- 错误检测
- 质量保证

## 最佳实践
- 检查策略
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第14章块对象目录及其README
mkdir -p "$BASE_DIR/第14章-块对象"
cat > "$BASE_DIR/第14章-块对象/README.md" << 'EOF'
---
title: 块对象
icon: block-object
order: 14
---

# 块对象

本章介绍块对象的概念和使用方法。
EOF

# 创建14.1什么是块对象目录及其README
mkdir -p "$BASE_DIR/第14章-块对象/14.1-什么是块对象"
cat > "$BASE_DIR/第14章-块对象/14.1-什么是块对象/README.md" << 'EOF'
---
title: 什么是块对象
icon: block-intro
order: 1
---

# 什么是块对象

本节介绍块对象的基本概念和特性。
EOF

# 创建14.1.1C编译器和GCD文件
cat > "$BASE_DIR/第14章-块对象/14.1-什么是块对象/14.1.1-C编译器和GCD.md" << 'EOF'
---
title: C编译器和GCD
icon: compiler-gcd
order: 1
---

# C编译器和GCD

## 基本概念
- 编译器特性
- GCD定义
- 实现机制
- 使用场景
- 性能特性

## 实现机制
- 编译过程
- 代码生成
- 优化策略
- 线程管理
- 性能优化

## 使用场景
- 并发编程
- 异步操作
- 性能优化
- 资源管理
- 任务调度

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.1.2块对象的定义文件
cat > "$BASE_DIR/第14章-块对象/14.1-什么是块对象/14.1.2-块对象的定义.md" << 'EOF'
---
title: 块对象的定义
icon: block-definition
order: 2
---

# 块对象的定义

## 基本概念
- 块语法
- 数据捕获
- 内存管理
- 使用场景
- 限制条件

## 实现机制
- 语法规则
- 变量捕获
- 生命周期
- 内存管理
- 性能优化

## 使用场景
- 回调函数
- 异步操作
- 闭包实现
- 代码组织
- 并发编程

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.1.3块对象和类型声明文件
cat > "$BASE_DIR/第14章-块对象/14.1-什么是块对象/14.1.3-块对象和类型声明.md" << 'EOF'
---
title: 块对象和类型声明
icon: block-type
order: 3
---

# 块对象和类型声明

## 基本语法
- 类型声明
- 参数定义
- 返回类型
- 变量捕获
- 使用限制

## 实现机制
- 声明语法
- 类型检查
- 内存管理
- 错误处理
- 性能优化

## 使用场景
- 函数指针
- 回调实现
- 类型安全
- 代码复用
- 接口设计

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建14.1.4块对象中的变量行为文件
cat > "$BASE_DIR/第14章-块对象/14.1-什么是块对象/14.1.4-块对象中的变量行为.md" << 'EOF'
---
title: 块对象中的变量行为
icon: block-variables
order: 4
---

# 块对象中的变量行为

## 变量作用域
- 局部变量
- 全局变量
- 静态变量
- 实例变量
- 捕获变量

## 内存管理
- 变量生命周期
- 引用计数
- 循环引用
- 内存泄漏
- 性能优化

## 使用场景
- 数据共享
- 状态保持
- 闭包实现
- 异步操作
- 并发编程

## 最佳实践
- 变量管理
- 内存控制
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.1.5排序函数和块对象文件
cat > "$BASE_DIR/第14章-块对象/14.1-什么是块对象/14.1.5-排序函数和块对象.md" << 'EOF'
---
title: 排序函数和块对象
icon: sort-block
order: 5
---

# 排序函数和块对象

## 基本概念
- 排序算法
- 块对象应用
- 比较函数
- 性能特性
- 使用场景

## 实现机制
- 排序方法
- 比较逻辑
- 块对象传递
- 性能优化
- 错误处理

## 使用场景
- 数据排序
- 自定义比较
- 集合处理
- 性能优化
- 代码复用

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.2块对象的构成目录及其README
mkdir -p "$BASE_DIR/第14章-块对象/14.2-块对象的构成"
cat > "$BASE_DIR/第14章-块对象/14.2-块对象的构成/README.md" << 'EOF'
---
title: 块对象的构成
icon: block-structure
order: 2
---

# 块对象的构成

本节介绍块对象的内部结构和组成部分。
EOF

# 创建14.2.1块对象的实例和生命周期文件
cat > "$BASE_DIR/第14章-块对象/14.2-块对象的构成/14.2.1-块对象的实例和生命周期.md" << 'EOF'
---
title: 块对象的实例和生命周期
icon: block-lifecycle
order: 1
---

# 块对象的实例和生命周期

## 实例化过程
- 创建实例
- 内存分配
- 变量捕获
- 初始化
- 销毁过程

## 生命周期管理
- 引用计数
- 内存管理
- 循环引用
- 自动释放
- 手动控制

## 使用场景
- 对象创建
- 状态管理
- 资源控制
- 内存优化
- 性能提升

## 最佳实践
- 实例管理
- 内存控制
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.2.2应该避免的编码模式文件
cat > "$BASE_DIR/第14章-块对象/14.2-块对象的构成/14.2.2-应该避免的编码模式.md" << 'EOF'
---
title: 应该避免的编码模式
icon: avoid-patterns
order: 2
---

# 应该避免的编码模式

## 常见问题
- 循环引用
- 内存泄漏
- 死锁风险
- 性能问题
- 代码复杂性

## 错误模式
- 反模式
- 不良实践
- 代码缺陷
- 设计缺陷
- 维护困难

## 优化建议
- 代码重构
- 设计改进
- 性能优化
- 可维护性
- 最佳实践

## 解决方案
- 设计模式
- 实现规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.2.3块对象的复制文件
cat > "$BASE_DIR/第14章-块对象/14.2-块对象的构成/14.2.3-块对象的复制.md" << 'EOF'
---
title: 块对象的复制
icon: block-copy
order: 3
---

# 块对象的复制

## 基本概念
- 复制机制
- 内存管理
- 变量处理
- 性能影响
- 使用限制

## 实现方式
- 复制方法
- 内存分配
- 变量处理
- 引用管理
- 性能优化

## 使用场景
- 对象复制
- 状态保持
- 并发处理
- 性能优化
- 资源管理

## 最佳实践
- 复制策略
- 内存管理
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.2.4指定特殊变量_block文件
cat > "$BASE_DIR/第14章-块对象/14.2-块对象的构成/14.2.4-指定特殊变量_block.md" << 'EOF'
---
title: 指定特殊变量_block
icon: special-block
order: 4
---

# 指定特殊变量_block

## 基本概念
- 变量定义
- 使用规则
- 作用范围
- 限制条件
- 性能影响

## 实现机制
- 变量声明
- 内存管理
- 作用域控制
- 生命周期
- 性能优化

## 使用场景
- 块引用
- 状态管理
- 内存控制
- 性能优化
- 调试支持

## 最佳实践
- 使用规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建14.3Objective-C和块对象目录及其README
mkdir -p "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象"
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/README.md" << 'EOF'
---
title: Objective-C和块对象
icon: objc-block
order: 3
---

# Objective-C和块对象

本节介绍Objective-C中块对象的使用方法和特性。
EOF

# 创建14.3.1方法定义和块对象文件
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/14.3.1-方法定义和块对象.md" << 'EOF'
---
title: 方法定义和块对象
icon: method-block
order: 1
---

# 方法定义和块对象

## 基本语法
- 方法声明
- 块参数
- 返回类型
- 语法规则
- 使用限制

## 实现机制
- 方法定义
- 参数传递
- 返回值处理
- 内存管理
- 性能优化

## 使用场景
- 回调实现
- 异步操作
- 事件处理
- 代码组织
- 并发编程

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.3.2作为Objective-C对象的块对象文件
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/14.3.2-作为Objective-C对象的块对象.md" << 'EOF'
---
title: 作为Objective-C对象的块对象
icon: block-as-object
order: 2
---

# 作为Objective-C对象的块对象

## 基本概念
- 对象特性
- 内存管理
- 生命周期
- 使用场景
- 限制条件

## 实现机制
- 对象创建
- 属性管理
- 方法调用
- 内存控制
- 性能优化

## 使用场景
- 对象封装
- 状态管理
- 回调实现
- 并发处理
- 资源管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.3.3ARC和块对象文件
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/14.3.3-ARC和块对象.md" << 'EOF'
---
title: ARC和块对象
icon: arc-block
order: 3
---

# ARC和块对象

## 基本概念
- ARC机制
- 内存管理
- 引用计数
- 生命周期
- 使用规则

## 实现机制
- 自动管理
- 引用控制
- 循环引用
- 内存优化
- 性能考虑

## 使用场景
- 内存管理
- 对象生命周期
- 资源控制
- 性能优化
- 代码简化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.3.4对象内变量的行为文件
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/14.3.4-对象内变量的行为.md" << 'EOF'
---
title: 对象内变量的行为
icon: object-variables
order: 4
---

# 对象内变量的行为

## 变量特性
- 作用域
- 生命周期
- 访问控制
- 内存管理
- 线程安全

## 实现机制
- 变量管理
- 内存分配
- 访问控制
- 同步机制
- 性能优化

## 使用场景
- 状态管理
- 数据共享
- 并发控制
- 资源管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.3.5集合类中添加的方法文件
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/14.3.5-集合类中添加的方法.md" << 'EOF'
---
title: 集合类中添加的方法
icon: collection-methods
order: 5
---

# 集合类中添加的方法

## 方法扩展
- 新增方法
- 功能增强
- 使用场景
- 性能特性
- 限制条件

## 实现机制
- 方法定义
- 参数处理
- 返回值
- 错误处理
- 性能优化

## 使用场景
- 数据处理
- 集合操作
- 遍历优化
- 并发处理
- 功能扩展

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建14.3.6在窗体中使用块对象文件
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/14.3.6-在窗体中使用块对象.md" << 'EOF'
---
title: 在窗体中使用块对象
icon: ui-blocks
order: 6
---

# 在窗体中使用块对象

## 基本应用
- 事件处理
- 动画实现
- 回调机制
- 异步操作
- 界面更新

## 实现机制
- 事件绑定
- 状态管理
- 线程处理
- 内存控制
- 性能优化

## 使用场景
- 用户交互
- 界面动画
- 数据刷新
- 异步加载
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建14.3.7ARC中使用块对象的注意事项文件
cat > "$BASE_DIR/第14章-块对象/14.3-Objective-C和块对象/14.3.7-ARC中使用块对象的注意事项.md" << 'EOF'
---
title: ARC中使用块对象的注意事项
icon: arc-block-notes
order: 7
---

# ARC中使用块对象的注意事项

## 常见问题
- 循环引用
- 内存泄漏
- 变量捕获
- 生命周期
- 性能影响

## 解决方案
- 弱引用
- 强引用
- 内存管理
- 变量控制
- 性能优化

## 最佳实践
- 代码规范
- 内存管理
- 性能优化
- 调试技巧
- 维护建议

## 注意事项
- 引用控制
- 变量作用域
- 内存释放
- 线程安全
- 性能考虑
EOF

# 创建第15章消息发送模式目录及其README
mkdir -p "$BASE_DIR/第15章-消息发送模式"
cat > "$BASE_DIR/第15章-消息发送模式/README.md" << 'EOF'
---
title: 消息发送模式
icon: message-pattern
order: 15
---

# 消息发送模式

本章介绍Objective-C中的消息发送模式及其应用。
EOF

# 创建15.1应用和运行回路目录及其README
mkdir -p "$BASE_DIR/第15章-消息发送模式/15.1-应用和运行回路"
cat > "$BASE_DIR/第15章-消息发送模式/15.1-应用和运行回路/README.md" << 'EOF'
---
title: 应用和运行回路
icon: app-runloop
order: 1
---

# 应用和运行回路

本节介绍应用程序和运行回路的基本概念。
EOF

# 创建15.1.1运行回路文件
cat > "$BASE_DIR/第15章-消息发送模式/15.1-应用和运行回路/15.1.1-运行回路.md" << 'EOF'
---
title: 运行回路
icon: runloop
order: 1
---

# 运行回路

## 基本概念
- 运行循环
- 事件处理
- 消息分发
- 线程管理
- 性能特性

## 实现机制
- 循环处理
- 事件队列
- 消息传递
- 线程调度
- 性能优化

## 使用场景
- 事件处理
- 定时任务
- 异步操作
- 线程管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.1.2定时器对象文件
cat > "$BASE_DIR/第15章-消息发送模式/15.1-应用和运行回路/15.1.2-定时器对象.md" << 'EOF'
---
title: 定时器对象
icon: timer
order: 2
---

# 定时器对象

## 基本概念
- 定时器类型
- 工作机制
- 精度控制
- 使用场景
- 性能影响

## 实现机制
- 创建方法
- 调度策略
- 触发机制
- 取消操作
- 性能优化

## 使用场景
- 定时任务
- 周期执行
- 延迟操作
- 动画控制
- 性能监控

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.1.3消息的延迟执行文件
cat > "$BASE_DIR/第15章-消息发送模式/15.1-应用和运行回路/15.1.3-消息的延迟执行.md" << 'EOF'
---
title: 消息的延迟执行
icon: delayed-message
order: 3
---

# 消息的延迟执行

## 基本概念
- 延迟机制
- 执行控制
- 时间精度
- 使用场景
- 性能影响

## 实现机制
- 延迟方法
- 队列管理
- 触发控制
- 取消操作
- 性能优化

## 使用场景
- 延迟处理
- 异步操作
- 性能优化
- 资源管理
- 任务调度

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.2委托目录及其README
mkdir -p "$BASE_DIR/第15章-消息发送模式/15.2-委托"
cat > "$BASE_DIR/第15章-消息发送模式/15.2-委托/README.md" << 'EOF'
---
title: 委托
icon: delegation
order: 2
---

# 委托

本节介绍委托模式的概念和实现方法。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建15.2.1委托的概念文件
cat > "$BASE_DIR/第15章-消息发送模式/15.2-委托/15.2.1-委托的概念.md" << 'EOF'
---
title: 委托的概念
icon: delegation-concept
order: 1
---

# 委托的概念

## 基本概念
- 委托定义
- 设计模式
- 工作机制
- 使用场景
- 优势特点

## 实现机制
- 委托模式
- 消息传递
- 回调机制
- 协议实现
- 性能优化

## 使用场景
- 事件处理
- 状态管理
- 数据传递
- 界面控制
- 业务解耦

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.2.2Cocoa环境中的委托文件
cat > "$BASE_DIR/第15章-消息发送模式/15.2-委托/15.2.2-Cocoa环境中的委托.md" << 'EOF'
---
title: Cocoa环境中的委托
icon: cocoa-delegation
order: 2
---

# Cocoa环境中的委托

## 基本特性
- 框架支持
- 实现机制
- 使用方式
- 性能特点
- 限制条件

## 实现方式
- 委托声明
- 协议定义
- 方法实现
- 消息传递
- 性能优化

## 使用场景
- 界面控制
- 事件处理
- 数据管理
- 状态同步
- 业务处理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.2.3委托的设置和协议文件
cat > "$BASE_DIR/第15章-消息发送模式/15.2-委托/15.2.3-委托的设置和协议.md" << 'EOF'
---
title: 委托的设置和协议
icon: delegation-setup
order: 3
---

# 委托的设置和协议

## 基本配置
- 委托设置
- 协议定义
- 方法声明
- 参数配置
- 返回值处理

## 实现机制
- 设置方法
- 协议实现
- 消息传递
- 错误处理
- 性能优化

## 使用场景
- 对象交互
- 事件处理
- 数据传递
- 状态同步
- 业务处理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.2.4使用委托的程序文件
cat > "$BASE_DIR/第15章-消息发送模式/15.2-委托/15.2.4-使用委托的程序.md" << 'EOF'
---
title: 使用委托的程序
icon: delegation-program
order: 4
---

# 使用委托的程序

## 实现示例
- 基础用法
- 进阶应用
- 实现技巧
- 常见问题
- 解决方案

## 编程要点
- 委托设置
- 方法实现
- 消息处理
- 错误处理
- 性能优化

## 使用场景
- 界面交互
- 数据处理
- 事件响应
- 状态管理
- 业务逻辑

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.3通知目录及其README
mkdir -p "$BASE_DIR/第15章-消息发送模式/15.3-通知"
cat > "$BASE_DIR/第15章-消息发送模式/15.3-通知/README.md" << 'EOF'
---
title: 通知
icon: notification
order: 3
---

# 通知

本节介绍通知机制的概念和实现方法。
EOF

# 创建15.3.1通知和通知中心的概念文件
cat > "$BASE_DIR/第15章-消息发送模式/15.3-通知/15.3.1-通知和通知中心的概念.md" << 'EOF'
---
title: 通知和通知中心的概念
icon: notification-center
order: 1
---

# 通知和通知中心的概念

## 基本概念
- 通知定义
- 通知中心
- 工作机制
- 使用场景
- 优势特点

## 实现机制
- 消息分发
- 观察者模式
- 事件处理
- 线程管理
- 性能优化

## 使用场景
- 事件广播
- 状态同步
- 数据更新
- 界面刷新
- 业务解耦

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.3.2通知对象文件
cat > "$BASE_DIR/第15章-消息发送模式/15.3-通知/15.3.2-通知对象.md" << 'EOF'
---
title: 通知对象
icon: notification-object
order: 2
---

# 通知对象

## 基本特性
- 对象结构
- 属性定义
- 方法接口
- 生命周期
- 使用限制

## 实现机制
- 对象创建
- 属性设置
- 消息传递
- 内存管理
- 性能优化

## 使用场景
- 消息通知
- 数据传递
- 状态同步
- 事件处理
- 业务解耦

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建15.3.3通知中心文件
cat > "$BASE_DIR/第15章-消息发送模式/15.3-通知/15.3.3-通知中心.md" << 'EOF'
---
title: 通知中心
icon: notification-center-detail
order: 3
---

# 通知中心

## 基本功能
- 消息分发
- 观察者管理
- 通知注册
- 通知移除
- 线程控制

## 实现机制
- 单例模式
- 观察者模式
- 消息队列
- 线程管理
- 性能优化

## 使用场景
- 消息广播
- 事件分发
- 状态同步
- 数据更新
- 界面刷新

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.3.4通知队列文件
cat > "$BASE_DIR/第15章-消息发送模式/15.3-通知/15.3.4-通知队列.md" << 'EOF'
---
title: 通知队列
icon: notification-queue
order: 4
---

# 通知队列

## 基本概念
- 队列结构
- 消息排序
- 处理机制
- 线程安全
- 性能特性

## 实现机制
- 队列管理
- 消息调度
- 优先级控制
- 线程同步
- 性能优化

## 使用场景
- 消息排队
- 异步处理
- 任务调度
- 性能优化
- 资源管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏通知名或异常名的定义文件
cat > "$BASE_DIR/第15章-消息发送模式/15.3-通知/专栏-通知名或异常名的定义.md" << 'EOF'
---
title: 通知名或异常名的定义
icon: notification-naming
order: 5
---

# 通知名或异常名的定义

## 命名规范
- 命名规则
- 格式要求
- 标准定义
- 最佳实践
- 注意事项

## 实现方式
- 常量定义
- 字符串格式
- 命名空间
- 版本控制
- 兼容处理

## 使用场景
- 系统通知
- 自定义通知
- 异常处理
- 错误定义
- 调试支持

## 最佳实践
- 命名规范
- 实现标准
- 版本控制
- 调试技巧
- 维护建议
EOF

# 创建15.4反应链目录及其README
mkdir -p "$BASE_DIR/第15章-消息发送模式/15.4-反应链"
cat > "$BASE_DIR/第15章-消息发送模式/15.4-反应链/README.md" << 'EOF'
---
title: 反应链
icon: responder-chain
order: 4
---

# 反应链

本节介绍反应链的概念和实现方法。
EOF

# 创建15.4.1反应链概述文件
cat > "$BASE_DIR/第15章-消息发送模式/15.4-反应链/15.4.1-反应链概述.md" << 'EOF'
---
title: 反应链概述
icon: responder-overview
order: 1
---

# 反应链概述

## 基本概念
- 反应链定义
- 工作机制
- 消息传递
- 事件处理
- 性能特性

## 实现机制
- 链式结构
- 消息传递
- 事件处理
- 响应机制
- 性能优化

## 使用场景
- 事件处理
- 消息传递
- 界面交互
- 状态管理
- 业务处理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.4.2应用中的反应链文件
cat > "$BASE_DIR/第15章-消息发送模式/15.4-反应链/15.4.2-应用中的反应链.md" << 'EOF'
---
title: 应用中的反应链
icon: app-responder
order: 2
---

# 应用中的反应链

## 应用实践
- 实现方式
- 使用场景
- 最佳实践
- 注意事项
- 性能考虑

## 实现机制
- 链式处理
- 事件传递
- 状态管理
- 错误处理
- 性能优化

## 使用场景
- 界面交互
- 事件处理
- 消息传递
- 状态同步
- 业务逻辑

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.5消息转送目录及其README
mkdir -p "$BASE_DIR/第15章-消息发送模式/15.5-消息转送"
cat > "$BASE_DIR/第15章-消息发送模式/15.5-消息转送/README.md" << 'EOF'
---
title: 消息转送
icon: message-forwarding
order: 5
---

# 消息转送

本节介绍消息转送的概念和实现方法。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建15.5.1消息转送的构成文件
cat > "$BASE_DIR/第15章-消息发送模式/15.5-消息转送/15.5.1-消息转送的构成.md" << 'EOF'
---
title: 消息转送的构成
icon: message-forwarding-structure
order: 1
---

# 消息转送的构成

## 基本组成
- 转送机制
- 消息结构
- 处理流程
- 运行时特性
- 性能影响

## 实现机制
- 消息传递
- 方法查找
- 动态解析
- 错误处理
- 性能优化

## 使用场景
- 方法转发
- 消息拦截
- 动态处理
- 错误恢复
- 功能扩展

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.5.2消息转送需要的信息文件
cat > "$BASE_DIR/第15章-消息发送模式/15.5-消息转送/15.5.2-消息转送需要的信息.md" << 'EOF'
---
title: 消息转送需要的信息
icon: message-forwarding-info
order: 2
---

# 消息转送需要的信息

## 基本信息
- 选择器
- 参数列表
- 返回类型
- 目标对象
- 上下文信息

## 处理机制
- 信息收集
- 参数处理
- 类型检查
- 错误处理
- 性能优化

## 使用场景
- 方法调用
- 参数传递
- 返回值处理
- 错误处理
- 调试支持

## 最佳实践
- 信息管理
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.5.3消息转送的定义文件
cat > "$BASE_DIR/第15章-消息发送模式/15.5-消息转送/15.5.3-消息转送的定义.md" << 'EOF'
---
title: 消息转送的定义
icon: message-forwarding-definition
order: 3
---

# 消息转送的定义

## 基本概念
- 定义方式
- 语法规则
- 实现机制
- 使用限制
- 性能影响

## 实现机制
- 方法声明
- 参数定义
- 返回类型
- 错误处理
- 性能优化

## 使用场景
- 消息转发
- 方法调用
- 动态处理
- 错误恢复
- 功能扩展

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.5.4禁止使用消息文件
cat > "$BASE_DIR/第15章-消息发送模式/15.5-消息转送/15.5.4-禁止使用消息.md" << 'EOF'
---
title: 禁止使用消息
icon: message-restriction
order: 4
---

# 禁止使用消息

## 限制原因
- 安全考虑
- 性能影响
- 设计限制
- 兼容性
- 最佳实践

## 实现机制
- 限制方法
- 检查机制
- 错误处理
- 替代方案
- 性能优化

## 使用场景
- 安全控制
- 性能优化
- 设计规范
- 错误预防
- 维护管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.5.5程序示例文件
cat > "$BASE_DIR/第15章-消息发送模式/15.5-消息转送/15.5.5-程序示例.md" << 'EOF'
---
title: 程序示例
icon: program-example
order: 5
---

# 程序示例

## 示例内容
- 基础用法
- 进阶应用
- 实现技巧
- 常见问题
- 解决方案

## 实现方法
- 代码结构
- 方法实现
- 错误处理
- 性能优化
- 调试支持

## 使用场景
- 消息转发
- 方法调用
- 动态处理
- 错误恢复
- 功能扩展

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建15.6撤销构造目录及其README
mkdir -p "$BASE_DIR/第15章-消息发送模式/15.6-撤销构造"
cat > "$BASE_DIR/第15章-消息发送模式/15.6-撤销构造/README.md" << 'EOF'
---
title: 撤销构造
icon: undo-construction
order: 6
---

# 撤销构造

本节介绍撤销构造的概念和实现方法。
EOF

# 创建15.6.1撤销构造的概念文件
cat > "$BASE_DIR/第15章-消息发送模式/15.6-撤销构造/15.6.1-撤销构造的概念.md" << 'EOF'
---
title: 撤销构造的概念
icon: undo-concept
order: 1
---

# 撤销构造的概念

## 基本概念
- 撤销定义
- 工作机制
- 使用场景
- 优势特点
- 限制条件

## 实现机制
- 撤销过程
- 状态恢复
- 资源释放
- 错误处理
- 性能优化

## 使用场景
- 对象创建
- 状态管理
- 资源控制
- 错误恢复
- 内存管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建15.6.2在撤销管理器中记录操作文件
cat > "$BASE_DIR/第15章-消息发送模式/15.6-撤销构造/15.6.2-在撤销管理器中记录操作.md" << 'EOF'
---
title: 在撤销管理器中记录操作
icon: undo-manager
order: 2
---

# 在撤销管理器中记录操作

## 基本概念
- 管理器结构
- 操作记录
- 状态管理
- 内存控制
- 性能特性

## 实现机制
- 记录方法
- 状态保存
- 操作回滚
- 内存管理
- 性能优化

## 使用场景
- 操作记录
- 状态恢复
- 错误处理
- 资源管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第16章应用的构造目录及其README
mkdir -p "$BASE_DIR/第16章-应用的构造"
cat > "$BASE_DIR/第16章-应用的构造/README.md" << 'EOF'
---
title: 应用的构造
icon: app-construction
order: 16
---

# 应用的构造

本章介绍iOS应用程序的构造方法和原理。
EOF

# 创建16.1应用束目录及其README
mkdir -p "$BASE_DIR/第16章-应用的构造/16.1-应用束"
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/README.md" << 'EOF'
---
title: 应用束
icon: app-bundle
order: 1
---

# 应用束

本节介绍iOS应用程序包的结构和组成。
EOF

# 创建16.1.1应用束的构造文件
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/16.1.1-应用束的构造.md" << 'EOF'
---
title: 应用束的构造
icon: bundle-structure
order: 1
---

# 应用束的构造

## 基本结构
- 目录组织
- 文件布局
- 资源管理
- 配置信息
- 版本控制

## 实现机制
- 构建过程
- 资源打包
- 配置管理
- 版本管理
- 性能优化

## 使用场景
- 应用打包
- 资源管理
- 配置控制
- 版本发布
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.1.2nib文件和各语言资源文件
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/16.1.2-nib文件和各语言资源.md" << 'EOF'
---
title: nib文件和各语言资源
icon: nib-resources
order: 2
---

# nib文件和各语言资源

## 基本概念
- nib文件
- 语言资源
- 本地化
- 资源管理
- 性能影响

## 实现机制
- 文件格式
- 资源组织
- 加载过程
- 内存管理
- 性能优化

## 使用场景
- 界面设计
- 多语言支持
- 资源管理
- 本地化
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏指定语言和地区文件
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/专栏-指定语言和地区.md" << 'EOF'
---
title: 指定语言和地区
icon: language-region
order: 3
---

# 指定语言和地区

## 基本概念
- 语言设置
- 地区配置
- 本地化
- 国际化
- 兼容性

## 实现机制
- 语言选择
- 地区适配
- 资源加载
- 配置管理
- 性能优化

## 使用场景
- 多语言支持
- 地区适配
- 本地化
- 国际化
- 用户体验

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.1.3信息文件的主要内容文件
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/16.1.3-信息文件的主要内容.md" << 'EOF'
---
title: 信息文件的主要内容
icon: info-file
order: 4
---

# 信息文件的主要内容

## 基本结构
- 文件格式
- 配置项目
- 必要信息
- 可选信息
- 版本控制

## 实现机制
- 内容组织
- 数据格式
- 读写操作
- 验证机制
- 性能优化

## 使用场景
- 应用配置
- 版本信息
- 权限管理
- 系统要求
- 兼容性

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建16.1.4通过NSBundle访问资源文件
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/16.1.4-通过NSBundle访问资源.md" << 'EOF'
---
title: 通过NSBundle访问资源
icon: bundle-access
order: 5
---

# 通过NSBundle访问资源

## 基本概念
- NSBundle类
- 资源访问
- 路径管理
- 加载机制
- 性能特性

## 实现机制
- 资源定位
- 路径解析
- 资源加载
- 缓存管理
- 性能优化

## 使用场景
- 资源访问
- 文件管理
- 本地化
- 配置读取
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.1.5iOS中资源的访问文件
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/16.1.5-iOS中资源的访问.md" << 'EOF'
---
title: iOS中资源的访问
icon: ios-resource
order: 6
---

# iOS中资源的访问

## 基本方法
- 资源路径
- 访问权限
- 加载机制
- 缓存策略
- 性能考虑

## 实现机制
- 资源管理
- 文件操作
- 内存控制
- 错误处理
- 性能优化

## 使用场景
- 图片资源
- 音频文件
- 配置文件
- 本地化资源
- 数据文件

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.1.6通用二进制文件
cat > "$BASE_DIR/第16章-应用的构造/16.1-应用束/16.1.6-通用二进制.md" << 'EOF'
---
title: 通用二进制
icon: universal-binary
order: 7
---

# 通用二进制

## 基本概念
- 架构支持
- 文件格式
- 兼容性
- 性能影响
- 大小优化

## 实现机制
- 编译选项
- 链接设置
- 架构管理
- 优化策略
- 性能考虑

## 使用场景
- 跨平台
- 架构适配
- 版本兼容
- 性能优化
- 发布管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.2加载nib文件目录及其README
mkdir -p "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件"
cat > "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件/README.md" << 'EOF'
---
title: 加载nib文件
icon: nib-loading
order: 2
---

# 加载nib文件

本节介绍nib文件的加载机制和方法。
EOF

# 创建16.2.1nib文件实例化文件
cat > "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件/16.2.1-nib文件实例化.md" << 'EOF'
---
title: nib文件实例化
icon: nib-instantiation
order: 1
---

# nib文件实例化

## 基本过程
- 加载机制
- 对象创建
- 属性设置
- 关系建立
- 性能优化

## 实现机制
- 文件解析
- 对象初始化
- 连接建立
- 内存管理
- 性能考虑

## 使用场景
- 界面加载
- 视图创建
- 控件初始化
- 布局设置
- 事件绑定

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.2.2在MacOSX中加载nib文件文件
cat > "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件/16.2.2-在MacOSX中加载nib文件.md" << 'EOF'
---
title: 在MacOSX中加载nib文件
icon: macos-nib
order: 2
---

# 在MacOSX中加载nib文件

## 加载方式
- API选择
- 加载过程
- 错误处理
- 性能优化
- 内存管理

## 实现机制
- 文件解析
- 对象创建
- 属性设置
- 关系建立
- 性能考虑

## 使用场景
- 界面加载
- 视图创建
- 控件初始化
- 布局设置
- 事件绑定

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.2.3在iOS中加载nib文件文件
cat > "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件/16.2.3-在iOS中加载nib文件.md" << 'EOF'
---
title: 在iOS中加载nib文件
icon: ios-nib
order: 3
---

# 在iOS中加载nib文件

## 加载方式
- API选择
- 加载过程
- 错误处理
- 性能优化
- 内存管理

## 实现机制
- 文件解析
- 对象创建
- 属性设置
- 关系建立
- 性能考虑

## 使用场景
- 界面加载
- 视图创建
- 控件初始化
- 布局设置
- 事件绑定

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建16.2.4nib文件内的包含循环文件
cat > "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件/16.2.4-nib文件内的包含循环.md" << 'EOF'
---
title: nib文件内的包含循环
icon: nib-cycles
order: 4
---

# nib文件内的包含循环

## 基本概念
- 循环引用
- 依赖关系
- 解决方案
- 性能影响
- 内存管理

## 实现机制
- 循环检测
- 引用管理
- 内存控制
- 性能优化
- 错误处理

## 使用场景
- 视图嵌套
- 控件关联
- 数据绑定
- 事件处理
- 内存优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.2.5nib文件内对象的初始化文件
cat > "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件/16.2.5-nib文件内对象的初始化.md" << 'EOF'
---
title: nib文件内对象的初始化
icon: nib-initialization
order: 5
---

# nib文件内对象的初始化

## 初始化过程
- 对象创建
- 属性设置
- 关系建立
- 事件绑定
- 生命周期

## 实现机制
- 初始化方法
- 参数配置
- 状态管理
- 错误处理
- 性能优化

## 使用场景
- 视图加载
- 控件初始化
- 数据绑定
- 事件处理
- 状态管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.2.6启动应用文件
cat > "$BASE_DIR/第16章-应用的构造/16.2-加载nib文件/16.2.6-启动应用.md" << 'EOF'
---
title: 启动应用
icon: app-launch
order: 6
---

# 启动应用

## 启动流程
- 初始化过程
- 资源加载
- 状态设置
- 界面准备
- 性能优化

## 实现机制
- 启动方法
- 资源管理
- 状态控制
- 错误处理
- 性能考虑

## 使用场景
- 应用启动
- 资源初始化
- 状态恢复
- 界面加载
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.3iOS的文件保存场所目录及其README
mkdir -p "$BASE_DIR/第16章-应用的构造/16.3-iOS的文件保存场所"
cat > "$BASE_DIR/第16章-应用的构造/16.3-iOS的文件保存场所/README.md" << 'EOF'
---
title: iOS的文件保存场所
icon: ios-storage
order: 3
---

# iOS的文件保存场所

本节介绍iOS系统中文件的存储位置和管理方法。
EOF

# 创建16.3.1主要目录及功能文件
cat > "$BASE_DIR/第16章-应用的构造/16.3-iOS的文件保存场所/16.3.1-主要目录及功能.md" << 'EOF'
---
title: 主要目录及功能
icon: directory-structure
order: 1
---

# 主要目录及功能

## 目录结构
- 沙盒机制
- 目录层级
- 访问权限
- 存储限制
- 管理策略

## 功能分类
- 文档目录
- 缓存目录
- 临时目录
- 库目录
- 应用目录

## 使用场景
- 数据存储
- 文件管理
- 缓存控制
- 资源访问
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.3.2获取目录路径文件
cat > "$BASE_DIR/第16章-应用的构造/16.3-iOS的文件保存场所/16.3.2-获取目录路径.md" << 'EOF'
---
title: 获取目录路径
icon: path-access
order: 2
---

# 获取目录路径

## 基本方法
- 路径获取
- 权限验证
- 错误处理
- 路径管理
- 性能优化

## 实现机制
- API使用
- 路径解析
- 权限检查
- 错误处理
- 性能考虑

## 使用场景
- 文件访问
- 路径管理
- 资源定位
- 数据存储
- 缓存控制

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.4用户默认目录及其README
mkdir -p "$BASE_DIR/第16章-应用的构造/16.4-用户默认"
cat > "$BASE_DIR/第16章-应用的构造/16.4-用户默认/README.md" << 'EOF'
---
title: 用户默认
icon: user-defaults
order: 4
---

# 用户默认

本节介绍用户默认设置的管理和使用方法。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建16.4.1保存设定值文件
cat > "$BASE_DIR/第16章-应用的构造/16.4-用户默认/16.4.1-保存设定值.md" << 'EOF'
---
title: 保存设定值
icon: save-settings
order: 1
---

# 保存设定值

## 基本操作
- 数据存储
- 值类型
- 读写方法
- 同步机制
- 性能考虑

## 实现机制
- 存储方式
- 数据格式
- 同步控制
- 错误处理
- 性能优化

## 使用场景
- 配置保存
- 用户设置
- 状态维护
- 数据持久化
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.4.2默认域文件
cat > "$BASE_DIR/第16章-应用的构造/16.4-用户默认/16.4.2-默认域.md" << 'EOF'
---
title: 默认域
icon: default-domain
order: 2
---

# 默认域

## 基本概念
- 域定义
- 作用范围
- 访问权限
- 数据类型
- 使用限制

## 实现机制
- 域管理
- 数据存储
- 访问控制
- 同步机制
- 性能优化

## 使用场景
- 配置管理
- 权限控制
- 数据共享
- 状态维护
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.4.3查找用户默认的工具文件
cat > "$BASE_DIR/第16章-应用的构造/16.4-用户默认/16.4.3-查找用户默认的工具.md" << 'EOF'
---
title: 查找用户默认的工具
icon: default-tools
order: 3
---

# 查找用户默认的工具

## 工具功能
- 查找方法
- 搜索范围
- 结果处理
- 错误处理
- 性能优化

## 实现机制
- 搜索算法
- 数据访问
- 结果过滤
- 错误处理
- 性能考虑

## 使用场景
- 配置查找
- 数据检索
- 状态查询
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.4.4NSUserDefaults概要文件
cat > "$BASE_DIR/第16章-应用的构造/16.4-用户默认/16.4.4-NSUserDefaults概要.md" << 'EOF'
---
title: NSUserDefaults概要
icon: userdefaults-summary
order: 4
---

# NSUserDefaults概要

## 基本功能
- 类定义
- 主要方法
- 数据类型
- 存储机制
- 性能特性

## 实现机制
- 数据管理
- 存储方式
- 同步控制
- 错误处理
- 性能优化

## 使用场景
- 配置存储
- 用户设置
- 状态保持
- 数据持久化
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.5应用的本地化目录及其README
mkdir -p "$BASE_DIR/第16章-应用的构造/16.5-应用的本地化"
cat > "$BASE_DIR/第16章-应用的构造/16.5-应用的本地化/README.md" << 'EOF'
---
title: 应用的本地化
icon: app-localization
order: 5
---

# 应用的本地化

本节介绍应用程序的本地化实现方法。
EOF

# 创建16.5.1消息的本地化文件
cat > "$BASE_DIR/第16章-应用的构造/16.5-应用的本地化/16.5.1-消息的本地化.md" << 'EOF'
---
title: 消息的本地化
icon: message-localization
order: 1
---

# 消息的本地化

## 基本概念
- 本地化定义
- 实现方式
- 资源管理
- 语言支持
- 性能考虑

## 实现机制
- 消息处理
- 资源加载
- 语言切换
- 错误处理
- 性能优化

## 使用场景
- 界面文本
- 错误提示
- 系统消息
- 用户提示
- 帮助信息

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.5.2本地化指针文件
cat > "$BASE_DIR/第16章-应用的构造/16.5-应用的本地化/16.5.2-本地化指针.md" << 'EOF'
---
title: 本地化指针
icon: localization-pointer
order: 2
---

# 本地化指针

## 基本概念
- 指针定义
- 使用方式
- 资源管理
- 内存控制
- 性能特性

## 实现机制
- 指针管理
- 资源访问
- 内存控制
- 错误处理
- 性能优化

## 使用场景
- 资源定位
- 语言切换
- 内存管理
- 性能优化
- 调试支持

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建专栏本地化应用名文件
cat > "$BASE_DIR/第16章-应用的构造/16.5-应用的本地化/专栏-本地化应用名.md" << 'EOF'
---
title: 本地化应用名
icon: app-name-localization
order: 3
---

# 本地化应用名

## 基本概念
- 命名规范
- 本地化要求
- 文件结构
- 资源管理
- 命名限制

## 实现机制
- 名称设置
- 资源组织
- 语言适配
- 配置管理
- 性能优化

## 使用场景
- 应用发布
- 市场适配
- 用户体验
- 品牌管理
- 本地化支持

## 最佳实践
- 命名规范
- 实现标准
- 资源管理
- 调试技巧
- 维护建议
EOF

# 创建16.5.3本地化文件
cat > "$BASE_DIR/第16章-应用的构造/16.5-应用的本地化/16.5.3-本地化.md" << 'EOF'
---
title: 本地化
icon: localization
order: 4
---

# 本地化

## 基本概念
- 本地化定义
- 实现方式
- 资源管理
- 语言支持
- 区域适配

## 实现机制
- 资源管理
- 语言切换
- 区域设置
- 内容适配
- 性能优化

## 使用场景
- 界面本地化
- 内容翻译
- 区域适配
- 文化定制
- 用户体验

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏消息内的语序文件
cat > "$BASE_DIR/第16章-应用的构造/16.5-应用的本地化/专栏-消息内的语序.md" << 'EOF'
---
title: 消息内的语序
icon: message-order
order: 5
---

# 消息内的语序

## 基本概念
- 语序规则
- 语言特性
- 文化差异
- 翻译要求
- 适配策略

## 实现机制
- 语序处理
- 文本组织
- 格式控制
- 翻译管理
- 性能优化

## 使用场景
- 消息翻译
- 文本排序
- 语言适配
- 文化本地化
- 用户体验

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.6模块的动态加载目录及其README
mkdir -p "$BASE_DIR/第16章-应用的构造/16.6-模块的动态加载"
cat > "$BASE_DIR/第16章-应用的构造/16.6-模块的动态加载/README.md" << 'EOF'
---
title: 模块的动态加载
icon: dynamic-loading
order: 6
---

# 模块的动态加载

本节介绍模块的动态加载机制和实现方法。
EOF

# 创建16.6.1可加载束文件
cat > "$BASE_DIR/第16章-应用的构造/16.6-模块的动态加载/16.6.1-可加载束.md" << 'EOF'
---
title: 可加载束
icon: loadable-bundle
order: 1
---

# 可加载束

## 基本概念
- 束结构
- 加载机制
- 生命周期
- 资源管理
- 性能特性

## 实现机制
- 加载过程
- 资源管理
- 内存控制
- 错误处理
- 性能优化

## 使用场景
- 动态加载
- 插件系统
- 资源管理
- 功能扩展
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.6.2使用可加载束的程序文件
cat > "$BASE_DIR/第16章-应用的构造/16.6-模块的动态加载/16.6.2-使用可加载束的程序.md" << 'EOF'
---
title: 使用可加载束的程序
icon: loadable-program
order: 2
---

# 使用可加载束的程序

## 基本用法
- 程序结构
- 加载方式
- 资源管理
- 错误处理
- 性能考虑

## 实现机制
- 加载控制
- 资源管理
- 生命周期
- 错误处理
- 性能优化

## 使用场景
- 插件系统
- 功能扩展
- 资源管理
- 动态更新
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建16.6.3插件概述文件
cat > "$BASE_DIR/第16章-应用的构造/16.6-模块的动态加载/16.6.3-插件概述.md" << 'EOF'
---
title: 插件概述
icon: plugin-overview
order: 3
---

# 插件概述

## 基本概念
- 插件定义
- 架构设计
- 加载机制
- 生命周期
- 性能影响

## 实现机制
- 插件管理
- 资源控制
- 接口设计
- 错误处理
- 性能优化

## 使用场景
- 功能扩展
- 动态更新
- 模块化设计
- 系统集成
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建专栏沙盒文件
cat > "$BASE_DIR/第16章-应用的构造/专栏-沙盒（AppSandbox）.md" << 'EOF'
---
title: 沙盒（AppSandbox）
icon: app-sandbox
order: 7
---

# 沙盒（AppSandbox）

## 基本概念
- 沙盒定义
- 安全机制
- 访问限制
- 资源隔离
- 权限控制

## 实现机制
- 隔离环境
- 权限管理
- 资源访问
- 数据保护
- 安全策略

## 使用场景
- 应用隔离
- 数据保护
- 资源管理
- 安全控制
- 权限管理

## 最佳实践
- 设计规范
- 实现标准
- 安全优化
- 调试技巧
- 维护建议
EOF

# 创建第17章实例：简单图像视图目录及其README
mkdir -p "$BASE_DIR/第17章-实例：简单图像视图"
cat > "$BASE_DIR/第17章-实例：简单图像视图/README.md" << 'EOF'
---
title: 实例：简单图像视图
icon: image-viewer
order: 17
---

# 实例：简单图像视图

本章通过一个简单的图像视图实例，展示iOS应用开发的基本流程和核心概念。
EOF

# 创建17.1Application框架和InterfaceBuilder文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.1-Application框架和InterfaceBuilder.md" << 'EOF'
---
title: Application框架和InterfaceBuilder
icon: app-framework
order: 1
---

# Application框架和InterfaceBuilder

## 基本组件
- 框架结构
- 界面构建
- 生命周期
- 事件处理
- 性能优化

## 实现机制
- 框架设计
- 界面布局
- 控件管理
- 事件响应
- 性能考虑

## 使用场景
- 应用开发
- 界面设计
- 交互实现
- 功能集成
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.2程序概况目录及其README
mkdir -p "$BASE_DIR/第17章-实例：简单图像视图/17.2-程序概况"
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.2-程序概况/README.md" << 'EOF'
---
title: 程序概况
icon: program-overview
order: 2
---

# 程序概况

本节介绍图像视图应用的整体架构和主要功能。
EOF

# 创建17.2.1对象间的关系文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.2-程序概况/17.2.1-对象间的关系.md" << 'EOF'
---
title: 对象间的关系
icon: object-relationship
order: 1
---

# 对象间的关系

## 基本结构
- 对象模型
- 关系类型
- 交互方式
- 依赖管理
- 生命周期

## 实现机制
- 对象设计
- 关系管理
- 消息传递
- 状态同步
- 性能优化

## 使用场景
- 数据流转
- 状态管理
- 事件处理
- 功能协作
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.2.2通知文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.2-程序概况/17.2.2-通知.md" << 'EOF'
---
title: 通知
icon: notification
order: 2
---

# 通知

## 基本机制
- 通知中心
- 消息传递
- 观察者模式
- 事件处理
- 性能考虑

## 实现方式
- 通知注册
- 消息发送
- 事件响应
- 状态同步
- 性能优化

## 使用场景
- 状态更新
- 数据同步
- 事件广播
- 界面刷新
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.2.3撤销和重做文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.2-程序概况/17.2.3-撤销和重做.md" << 'EOF'
---
title: 撤销和重做
icon: undo-redo
order: 3
---

# 撤销和重做

## 基本功能
- 操作记录
- 状态管理
- 内存控制
- 性能优化
- 用户体验

## 实现机制
- 命令模式
- 状态保存
- 操作回滚
- 内存管理
- 性能考虑

## 使用场景
- 编辑操作
- 状态恢复
- 错误修正
- 用户交互
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建17.2.4可加载束和本地化文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.2-程序概况/17.2.4-可加载束和本地化.md" << 'EOF'
---
title: 可加载束和本地化
icon: bundle-localization
order: 4
---

# 可加载束和本地化

## 基本概念
- 束结构
- 加载机制
- 本地化支持
- 资源管理
- 性能特性

## 实现机制
- 资源加载
- 语言切换
- 内存管理
- 错误处理
- 性能优化

## 使用场景
- 插件加载
- 多语言支持
- 资源管理
- 动态更新
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.2.5用户默认文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.2-程序概况/17.2.5-用户默认.md" << 'EOF'
---
title: 用户默认
icon: user-defaults
order: 5
---

# 用户默认

## 基本功能
- 配置存储
- 数据持久化
- 设置管理
- 读写操作
- 同步机制

## 实现机制
- 数据存储
- 配置管理
- 同步控制
- 错误处理
- 性能优化

## 使用场景
- 应用设置
- 用户偏好
- 状态保存
- 配置管理
- 数据同步

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.3编程介绍目录及其README
mkdir -p "$BASE_DIR/第17章-实例：简单图像视图/17.3-编程介绍"
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.3-编程介绍/README.md" << 'EOF'
---
title: 编程介绍
icon: programming-intro
order: 3
---

# 编程介绍

本节介绍图像视图应用的具体实现方法。
EOF

# 创建17.3.1main函数和MyViewerCtrl类文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.3-编程介绍/17.3.1-main函数和MyViewerCtrl类.md" << 'EOF'
---
title: main函数和MyViewerCtrl类
icon: main-viewer
order: 1
---

# main函数和MyViewerCtrl类

## 主要功能
- 程序入口
- 控制器类
- 初始化流程
- 事件处理
- 资源管理

## 实现机制
- 启动流程
- 类设计
- 生命周期
- 错误处理
- 性能优化

## 使用场景
- 应用启动
- 视图控制
- 事件处理
- 状态管理
- 资源控制

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.3.2类WinCtr文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.3-编程介绍/17.3.2-类WinCtr.md" << 'EOF'
---
title: 类WinCtr
icon: window-controller
order: 2
---

# 类WinCtr

## 基本功能
- 窗口管理
- 视图控制
- 事件处理
- 状态维护
- 资源管理

## 实现机制
- 类设计
- 窗口操作
- 事件响应
- 状态控制
- 性能优化

## 使用场景
- 窗口控制
- 界面管理
- 交互处理
- 状态同步
- 资源管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.3.3类MyInspector文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.3-编程介绍/17.3.3-类MyInspector.md" << 'EOF'
---
title: 类MyInspector
icon: inspector-class
order: 3
---

# 类MyInspector

## 基本功能
- 属性检查
- 状态监控
- 数据展示
- 交互控制
- 资源管理

## 实现机制
- 类设计
- 检查方法
- 数据处理
- 界面更新
- 性能优化

## 使用场景
- 属性查看
- 状态监控
- 数据分析
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.4应用束的组织文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.4-应用束的组织.md" << 'EOF'
---
title: 应用束的组织
icon: bundle-organization
order: 4
---

# 应用束的组织

## 基本结构
- 目录组织
- 资源管理
- 配置文件
- 依赖关系
- 版本控制

## 实现机制
- 束结构
- 资源组织
- 配置管理
- 依赖处理
- 性能优化

## 使用场景
- 应用打包
- 资源管理
- 配置控制
- 版本管理
- 发布部署

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建17.4.1创建编译和设置文件文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.4-应用束的组织/17.4.1-创建编译和设置文件.md" << 'EOF'
---
title: 创建编译和设置文件
icon: build-settings
order: 1
---

# 创建编译和设置文件

## 基本配置
- 项目结构
- 编译选项
- 依赖管理
- 资源配置
- 环境设置

## 实现机制
- 配置文件
- 编译流程
- 依赖处理
- 资源管理
- 性能优化

## 使用场景
- 项目构建
- 环境配置
- 依赖管理
- 资源处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.4.2程序运行例子文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.4-应用束的组织/17.4.2-程序运行例子.md" << 'EOF'
---
title: 程序运行例子
icon: program-example
order: 2
---

# 程序运行例子

## 基本流程
- 启动过程
- 功能演示
- 交互操作
- 错误处理
- 性能分析

## 实现要点
- 初始化
- 功能实现
- 交互处理
- 异常处理
- 性能优化

## 使用场景
- 功能测试
- 性能评估
- 用户体验
- 调试支持
- 示例展示

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建17.4.3GUI定义文件和程序文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/17.4-应用束的组织/17.4.3-GUI定义文件和程序.md" << 'EOF'
---
title: GUI定义文件和程序
icon: gui-definition
order: 3
---

# GUI定义文件和程序

## 界面定义
- 布局设计
- 控件配置
- 样式定义
- 交互设计
- 资源管理

## 实现机制
- 界面构建
- 事件处理
- 数据绑定
- 状态管理
- 性能优化

## 使用场景
- 界面开发
- 交互实现
- 视觉设计
- 用户体验
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏Objective-C调试器的功能文件
cat > "$BASE_DIR/第17章-实例：简单图像视图/专栏-Objective-C调试器的功能.md" << 'EOF'
---
title: Objective-C调试器的功能
icon: debugger-features
order: 5
---

# Objective-C调试器的功能

## 基本功能
- 断点管理
- 变量监视
- 调用栈
- 内存检查
- 性能分析

## 调试特性
- 运行控制
- 数据查看
- 异常处理
- 日志记录
- 性能监控

## 使用场景
- 程序调试
- 错误定位
- 性能优化
- 内存分析
- 问题排查

## 最佳实践
- 调试技巧
- 问题定位
- 性能优化
- 内存管理
- 维护建议
EOF

# 创建第18章异常和错误目录及其README
mkdir -p "$BASE_DIR/第18章-异常和错误"
cat > "$BASE_DIR/第18章-异常和错误/README.md" << 'EOF'
---
title: 异常和错误
icon: exception-error
order: 18
---

# 异常和错误

本章介绍Objective-C中的异常处理和错误处理机制。
EOF

# 创建18.1异常目录及其README
mkdir -p "$BASE_DIR/第18章-异常和错误/18.1-异常"
cat > "$BASE_DIR/第18章-异常和错误/18.1-异常/README.md" << 'EOF'
---
title: 异常
icon: exception
order: 1
---

# 异常

本节介绍异常的基本概念和处理方法。
EOF

# 创建18.1.1异常处理的概念文件
cat > "$BASE_DIR/第18章-异常和错误/18.1-异常/18.1.1-异常处理的概念.md" << 'EOF'
---
title: 异常处理的概念
icon: exception-concept
order: 1
---

# 异常处理的概念

## 基本概念
- 异常定义
- 处理机制
- 异常类型
- 传播规则
- 性能影响

## 实现机制
- 异常捕获
- 异常抛出
- 处理流程
- 资源管理
- 性能优化

## 使用场景
- 错误处理
- 异常恢复
- 资源清理
- 调试支持
- 程序健壮性

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建18.1.2Objective-C中的异常处理文件
cat > "$BASE_DIR/第18章-异常和错误/18.1-异常/18.1.2-Objective-C中的异常处理.md" << 'EOF'
---
title: Objective-C中的异常处理
icon: objc-exception
order: 2
---

# Objective-C中的异常处理

## 基本机制
- 异常类型
- 处理流程
- 语法规则
- 资源管理
- 性能考虑

## 实现方式
- 异常捕获
- 异常抛出
- 清理操作
- 资源释放
- 性能优化

## 使用场景
- 错误处理
- 资源管理
- 程序恢复
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.2异常处理机制概述目录及其README
mkdir -p "$BASE_DIR/第18章-异常和错误/18.2-异常处理机制概述"
cat > "$BASE_DIR/第18章-异常和错误/18.2-异常处理机制概述/README.md" << 'EOF'
---
title: 异常处理机制概述
icon: exception-mechanism
order: 2
---

# 异常处理机制概述

本节介绍Objective-C异常处理机制的基本原理和实现方法。
EOF

# 创建18.2.1异常句柄和异常处理域文件
cat > "$BASE_DIR/第18章-异常和错误/18.2-异常处理机制概述/18.2.1-异常句柄和异常处理域.md" << 'EOF'
---
title: 异常句柄和异常处理域
icon: exception-handler
order: 1
---

# 异常句柄和异常处理域

## 基本概念
- 句柄定义
- 处理域
- 作用范围
- 生命周期
- 性能影响

## 实现机制
- 句柄管理
- 域控制
- 异常传播
- 资源管理
- 性能优化

## 使用场景
- 异常处理
- 资源管理
- 错误恢复
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.2.2异常表示类NSException文件
cat > "$BASE_DIR/第18章-异常和错误/18.2-异常处理机制概述/18.2.2-异常表示类NSException.md" << 'EOF'
---
title: 异常表示类NSException
icon: nsexception
order: 2
---

# 异常表示类NSException

## 类定义
- 属性定义
- 方法接口
- 异常类型
- 使用规则
- 性能特性

## 实现机制
- 异常创建
- 信息管理
- 异常传播
- 资源控制
- 性能优化

## 使用场景
- 异常表示
- 错误处理
- 信息传递
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.2.3异常处理机制的语法文件
cat > "$BASE_DIR/第18章-异常和错误/18.2-异常处理机制概述/18.2.3-异常处理机制的语法.md" << 'EOF'
---
title: 异常处理机制的语法
icon: exception-syntax
order: 3
---

# 异常处理机制的语法

## 基本语法
- 关键字
- 语法规则
- 使用方式
- 作用域
- 限制条件

## 实现机制
- 语法解析
- 代码生成
- 运行时支持
- 资源管理
- 性能优化

## 使用场景
- 异常捕获
- 异常抛出
- 资源清理
- 错误处理
- 调试支持

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.2.4简单的异常处理的示例程序文件
cat > "$BASE_DIR/第18章-异常和错误/18.2-异常处理机制概述/18.2.4-简单的异常处理的示例程序.md" << 'EOF'
---
title: 简单的异常处理的示例程序
icon: exception-example
order: 4
---

# 简单的异常处理的示例程序

## 程序结构
- 代码组织
- 异常处理
- 资源管理
- 错误恢复
- 示例说明

## 实现要点
- 异常捕获
- 异常抛出
- 资源清理
- 错误处理
- 性能优化

## 使用场景
- 实践演示
- 学习参考
- 测试验证
- 调试支持
- 性能评估

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏日志输出函数NSLog()文件
cat > "$BASE_DIR/第18章-异常和错误/18.2-异常处理机制概述/专栏-日志输出函数NSLog().md" << 'EOF'
---
title: 日志输出函数NSLog()
icon: nslog-function
order: 5
---

# 日志输出函数NSLog()

## 基本功能
- 函数定义
- 参数说明
- 输出格式
- 使用方法
- 性能影响

## 实现机制
- 日志记录
- 格式化输出
- 时间戳
- 线程安全
- 性能优化

## 使用场景
- 调试输出
- 错误记录
- 状态跟踪
- 性能分析
- 问题诊断

## 最佳实践
- 使用规范
- 格式标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建18.3异常的发生和传播目录及其README
mkdir -p "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播"
cat > "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播/README.md" << 'EOF'
---
title: 异常的发生和传播
icon: exception-propagation
order: 3
---

# 异常的发生和传播

本节介绍异常的产生机制和传播过程。
EOF

# 创建18.3.1异常的传播文件
cat > "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播/18.3.1-异常的传播.md" << 'EOF'
---
title: 异常的传播
icon: exception-flow
order: 1
---

# 异常的传播

## 传播机制
- 调用栈
- 传播规则
- 处理流程
- 性能影响
- 资源管理

## 实现原理
- 栈展开
- 异常捕获
- 资源释放
- 状态恢复
- 性能优化

## 使用场景
- 错误处理
- 异常恢复
- 资源清理
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.3.2自己触发异常文件
cat > "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播/18.3.2-自己触发异常.md" << 'EOF'
---
title: 自己触发异常
icon: raise-exception
order: 2
---

# 自己触发异常

## 基本方法
- 异常创建
- 触发时机
- 参数设置
- 资源管理
- 性能考虑

## 实现机制
- 异常构造
- 触发过程
- 资源处理
- 状态管理
- 性能优化

## 使用场景
- 错误处理
- 业务逻辑
- 调试支持
- 测试验证
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.3.3用@throw语法产生异常文件
cat > "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播/18.3.3-用@throw语法产生异常.md" << 'EOF'
---
title: 用@throw语法产生异常
icon: throw-syntax
order: 3
---

# 用@throw语法产生异常

## 语法规则
- 关键字使用
- 参数传递
- 异常类型
- 作用域
- 性能影响

## 实现机制
- 语法解析
- 异常生成
- 资源管理
- 状态控制
- 性能优化

## 使用场景
- 异常抛出
- 错误处理
- 调试支持
- 测试验证
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.3.4@catch的特殊语法文件
cat > "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播/18.3.4-@catch的特殊语法.md" << 'EOF'
---
title: @catch的特殊语法
icon: catch-syntax
order: 4
---

# @catch的特殊语法

## 语法特性
- 语法规则
- 参数处理
- 作用域
- 异常匹配
- 性能考虑

## 实现机制
- 语法解析
- 异常捕获
- 资源管理
- 状态控制
- 性能优化

## 使用场景
- 异常处理
- 错误恢复
- 资源清理
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.3.5异常传播和@finally文件
cat > "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播/18.3.5-异常传播和@finally.md" << 'EOF'
---
title: 异常传播和@finally
icon: finally-block
order: 5
---

# 异常传播和@finally

## 基本概念
- finally块
- 执行顺序
- 资源清理
- 异常处理
- 性能影响

## 实现机制
- 代码执行
- 资源管理
- 异常处理
- 状态恢复
- 性能优化

## 使用场景
- 资源清理
- 状态恢复
- 异常处理
- 调试支持
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.3.6异常处理程序的注意点文件
cat > "$BASE_DIR/第18章-异常和错误/18.3-异常的发生和传播/18.3.6-异常处理程序的注意点.md" << 'EOF'
---
title: 异常处理程序的注意点
icon: exception-notes
order: 6
---

# 异常处理程序的注意点

## 关键要点
- 性能考虑
- 资源管理
- 异常粒度
- 错误恢复
- 代码可维护性

## 实践建议
- 异常设计
- 处理策略
- 资源管理
- 性能优化
- 代码组织

## 常见问题
- 性能开销
- 资源泄露
- 异常滥用
- 错误恢复
- 代码复杂性

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建18.4断言目录及其README
mkdir -p "$BASE_DIR/第18章-异常和错误/18.4-断言"
cat > "$BASE_DIR/第18章-异常和错误/18.4-断言/README.md" << 'EOF'
---
title: 断言
icon: assertion
order: 4
---

# 断言

本节介绍断言的概念和使用方法。
EOF

# 创建18.4.1断言是什么文件
cat > "$BASE_DIR/第18章-异常和错误/18.4-断言/18.4.1-断言是什么.md" << 'EOF'
---
title: 断言是什么
icon: assertion-concept
order: 1
---

# 断言是什么

## 基本概念
- 断言定义
- 使用目的
- 工作原理
- 调试支持
- 性能影响

## 实现机制
- 断言检查
- 条件验证
- 错误报告
- 调试信息
- 性能优化

## 使用场景
- 程序调试
- 条件验证
- 错误检测
- 开发测试
- 质量保证

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.4.2断言宏文件
cat > "$BASE_DIR/第18章-异常和错误/18.4-断言/18.4.2-断言宏.md" << 'EOF'
---
title: 断言宏
icon: assertion-macro
order: 2
---

# 断言宏

## 基本用法
- 宏定义
- 参数说明
- 使用方法
- 调试功能
- 性能考虑

## 实现机制
- 宏展开
- 条件检查
- 错误处理
- 调试支持
- 性能优化

## 使用场景
- 条件验证
- 错误检测
- 调试辅助
- 开发测试
- 质量保证

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏包含可变个数的参数的宏文件
cat > "$BASE_DIR/第18章-异常和错误/18.4-断言/专栏-包含可变个数的参数的宏.md" << 'EOF'
---
title: 包含可变个数的参数的宏
icon: variadic-macro
order: 3
---

# 包含可变个数的参数的宏

## 基本概念
- 可变参数
- 语法规则
- 使用方法
- 限制条件
- 性能影响

## 实现机制
- 参数处理
- 宏展开
- 类型安全
- 错误处理
- 性能优化

## 使用场景
- 灵活调用
- 参数传递
- 调试支持
- 日志记录
- 错误处理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.5错误处理目录及其README
mkdir -p "$BASE_DIR/第18章-异常和错误/18.5-错误处理"
cat > "$BASE_DIR/第18章-异常和错误/18.5-错误处理/README.md" << 'EOF'
---
title: 错误处理
icon: error-handling
order: 5
---

# 错误处理

本节介绍错误处理的基本概念和实现方法。
EOF

# 创建18.5.1错误处理结构的目的文件
cat > "$BASE_DIR/第18章-异常和错误/18.5-错误处理/18.5.1-错误处理结构的目的.md" << 'EOF'
---
title: 错误处理结构的目的
icon: error-structure
order: 1
---

# 错误处理结构的目的

## 基本目标
- 错误检测
- 错误恢复
- 程序稳定
- 用户体验
- 调试支持

## 实现机制
- 错误捕获
- 错误处理
- 状态恢复
- 资源管理
- 性能优化

## 使用场景
- 异常处理
- 错误恢复
- 资源清理
- 状态管理
- 用户反馈

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.5.2表示错误的类NSError的使用方法文件
cat > "$BASE_DIR/第18章-异常和错误/18.5-错误处理/18.5.2-表示错误的类NSError的使用方法.md" << 'EOF'
---
title: 表示错误的类NSError的使用方法
icon: nserror-usage
order: 2
---

# 表示错误的类NSError的使用方法

## 基本用法
- 类定义
- 属性方法
- 错误创建
- 错误处理
- 信息获取

## 实现机制
- 错误表示
- 信息封装
- 错误传递
- 状态管理
- 性能优化

## 使用场景
- 错误处理
- 信息传递
- 状态管理
- 调试支持
- 用户反馈

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建18.5.3获取错误对象的信息文件
cat > "$BASE_DIR/第18章-异常和错误/18.5-错误处理/18.5.3-获取错误对象的信息.md" << 'EOF'
---
title: 获取错误对象的信息
icon: error-info
order: 3
---

# 获取错误对象的信息

## 基本方法
- 属性访问
- 信息提取
- 错误码解析
- 描述获取
- 用户信息

## 实现机制
- 信息访问
- 数据解析
- 错误描述
- 本地化支持
- 性能优化

## 使用场景
- 错误分析
- 日志记录
- 用户反馈
- 调试支持
- 问题诊断

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.5.4生成自定义错误对象文件
cat > "$BASE_DIR/第18章-异常和错误/18.5-错误处理/18.5.4-生成自定义错误对象.md" << 'EOF'
---
title: 生成自定义错误对象
icon: custom-error
order: 4
---

# 生成自定义错误对象

## 基本步骤
- 对象创建
- 属性设置
- 错误定义
- 信息配置
- 本地化支持

## 实现机制
- 错误构造
- 属性管理
- 信息组织
- 资源处理
- 性能优化

## 使用场景
- 自定义错误
- 业务异常
- 特殊处理
- 调试支持
- 用户反馈

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.6错误反应链目录及其README
mkdir -p "$BASE_DIR/第18章-异常和错误/18.6-错误反应链"
cat > "$BASE_DIR/第18章-异常和错误/18.6-错误反应链/README.md" << 'EOF'
---
title: 错误反应链
icon: error-chain
order: 6
---

# 错误反应链

本节介绍错误反应链的概念和实现方法。
EOF

# 创建18.6.1错误反应链的结构文件
cat > "$BASE_DIR/第18章-异常和错误/18.6-错误反应链/18.6.1-错误反应链的结构.md" << 'EOF'
---
title: 错误反应链的结构
icon: chain-structure
order: 1
---

# 错误反应链的结构

## 基本组成
- 链式结构
- 节点定义
- 传播机制
- 处理流程
- 性能特性

## 实现机制
- 链表管理
- 错误传递
- 状态控制
- 资源管理
- 性能优化

## 使用场景
- 错误处理
- 异常传播
- 状态管理
- 资源控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建18.6.2错误对象的更改和恢复文件
cat > "$BASE_DIR/第18章-异常和错误/18.6-错误反应链/18.6.2-错误对象的更改和恢复.md" << 'EOF'
---
title: 错误对象的更改和恢复
icon: error-modification
order: 2
---

# 错误对象的更改和恢复

## 基本操作
- 对象修改
- 状态恢复
- 数据更新
- 资源管理
- 性能考虑

## 实现机制
- 更改处理
- 恢复流程
- 状态管理
- 资源控制
- 性能优化

## 使用场景
- 错误处理
- 状态恢复
- 数据修复
- 资源管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建专栏单元测试文件
cat > "$BASE_DIR/第18章-异常和错误/18.6-错误反应链/专栏-单元测试.md" << 'EOF'
---
title: 单元测试
icon: unit-test
order: 3
---

# 单元测试

## 基本概念
- 测试定义
- 测试范围
- 测试方法
- 测试工具
- 测试策略

## 实现机制
- 测试框架
- 测试用例
- 断言机制
- 结果验证
- 性能测试

## 使用场景
- 功能测试
- 回归测试
- 性能测试
- 集成测试
- 自动化测试

## 最佳实践
- 测试规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第19章并行编程目录及其README
mkdir -p "$BASE_DIR/第19章-并行编程"
cat > "$BASE_DIR/第19章-并行编程/README.md" << 'EOF'
---
title: 并行编程
icon: parallel-programming
order: 19
---

# 并行编程

本章介绍Objective-C中的并行编程概念和实现方法。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建19.1多线程目录及其README
mkdir -p "$BASE_DIR/第19章-并行编程/19.1-多线程"
cat > "$BASE_DIR/第19章-并行编程/19.1-多线程/README.md" << 'EOF'
---
title: 多线程
icon: multi-threading
order: 1
---

# 多线程

本节介绍多线程编程的基本概念和实现方法。
EOF

# 创建19.1.1线程的基本概念文件
cat > "$BASE_DIR/第19章-并行编程/19.1-多线程/19.1.1-线程的基本概念.md" << 'EOF'
---
title: 线程的基本概念
icon: thread-basics
order: 1
---

# 线程的基本概念

## 基本定义
- 线程概念
- 进程关系
- 并发模型
- 资源共享
- 性能影响

## 实现机制
- 线程创建
- 线程管理
- 资源控制
- 状态转换
- 性能优化

## 使用场景
- 并发处理
- 异步操作
- 性能优化
- 响应提升
- 资源利用

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.1.2线程安全文件
cat > "$BASE_DIR/第19章-并行编程/19.1-多线程/19.1.2-线程安全.md" << 'EOF'
---
title: 线程安全
icon: thread-safety
order: 2
---

# 线程安全

## 基本概念
- 安全定义
- 同步机制
- 锁机制
- 原子操作
- 内存模型

## 实现机制
- 同步控制
- 锁管理
- 资源保护
- 状态一致
- 性能优化

## 使用场景
- 资源共享
- 数据保护
- 状态管理
- 并发控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.1.3注意点文件
cat > "$BASE_DIR/第19章-并行编程/19.1-多线程/19.1.3-注意点.md" << 'EOF'
---
title: 注意点
icon: thread-notes
order: 3
---

# 注意点

## 关键要点
- 资源管理
- 死锁预防
- 性能考虑
- 内存管理
- 错误处理

## 实践建议
- 设计原则
- 实现策略
- 优化方法
- 调试方案
- 维护要点

## 常见问题
- 资源竞争
- 死锁情况
- 性能瓶颈
- 内存泄漏
- 并发错误

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.1.4使用NSThread创建线程文件
cat > "$BASE_DIR/第19章-并行编程/19.1-多线程/19.1.4-使用NSThread创建线程.md" << 'EOF'
---
title: 使用NSThread创建线程
icon: nsthread
order: 4
---

# 使用NSThread创建线程

## 基本用法
- 创建方法
- 参数设置
- 生命周期
- 状态控制
- 资源管理

## 实现机制
- 线程创建
- 参数传递
- 状态管理
- 资源控制
- 性能优化

## 使用场景
- 异步处理
- 并发操作
- 后台任务
- 性能优化
- 响应提升

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.1.5当前线程文件
cat > "$BASE_DIR/第19章-并行编程/19.1-多线程/19.1.5-当前线程.md" << 'EOF'
---
title: 当前线程
icon: current-thread
order: 5
---

# 当前线程

## 基本概念
- 线程标识
- 状态信息
- 优先级
- 属性设置
- 资源关联

## 实现机制
- 线程获取
- 状态查询
- 属性管理
- 资源控制
- 性能优化

## 使用场景
- 线程识别
- 状态判断
- 属性设置
- 资源管理
- 调试支持

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.1.6GUI应用和线程文件
cat > "$BASE_DIR/第19章-并行编程/19.1-多线程/19.1.6-GUI应用和线程.md" << 'EOF'
---
title: GUI应用和线程
icon: gui-thread
order: 6
---

# GUI应用和线程

## 基本概念
- 主线程
- UI更新
- 事件处理
- 线程通信
- 性能优化

## 实现机制
- 界面刷新
- 事件分发
- 线程协作
- 状态同步
- 性能优化

## 使用场景
- 界面更新
- 用户交互
- 后台处理
- 数据同步
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建19.2互斥目录及其README
mkdir -p "$BASE_DIR/第19章-并行编程/19.2-互斥"
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/README.md" << 'EOF'
---
title: 互斥
icon: mutex
order: 2
---

# 互斥

本节介绍多线程编程中的互斥机制和实现方法。
EOF

# 创建19.2.1需要互斥的例子文件
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/19.2.1-需要互斥的例子.md" << 'EOF'
---
title: 需要互斥的例子
icon: mutex-example
order: 1
---

# 需要互斥的例子

## 场景分析
- 资源竞争
- 数据一致性
- 并发访问
- 临界区域
- 性能影响

## 实现机制
- 互斥控制
- 资源保护
- 同步机制
- 状态管理
- 性能优化

## 使用场景
- 共享资源
- 数据保护
- 状态同步
- 并发控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.2.2锁文件
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/19.2.2-锁.md" << 'EOF'
---
title: 锁
icon: lock
order: 2
---

# 锁

## 基本概念
- 锁定义
- 锁类型
- 锁机制
- 性能影响
- 使用限制

## 实现机制
- 锁操作
- 资源管理
- 状态控制
- 异常处理
- 性能优化

## 使用场景
- 资源保护
- 同步控制
- 并发管理
- 状态维护
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.2.3死锁文件
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/19.2.3-死锁.md" << 'EOF'
---
title: 死锁
icon: deadlock
order: 3
---

# 死锁

## 基本概念
- 死锁定义
- 产生条件
- 检测方法
- 预防策略
- 性能影响

## 实现机制
- 死锁预防
- 死锁检测
- 死锁恢复
- 资源管理
- 性能优化

## 使用场景
- 资源竞争
- 循环等待
- 互斥条件
- 持有等待
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.2.4尝试获得锁文件
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/19.2.4-尝试获得锁.md" << 'EOF'
---
title: 尝试获得锁
icon: try-lock
order: 4
---

# 尝试获得锁

## 基本方法
- 尝试机制
- 超时设置
- 失败处理
- 资源管理
- 性能考虑

## 实现机制
- 锁请求
- 超时控制
- 状态管理
- 资源释放
- 性能优化

## 使用场景
- 非阻塞操作
- 超时控制
- 资源竞争
- 性能优化
- 并发控制

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.2.5条件锁文件
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/19.2.5-条件锁.md" << 'EOF'
---
title: 条件锁
icon: condition-lock
order: 5
---

# 条件锁

## 基本概念
- 条件变量
- 等待机制
- 通知机制
- 状态同步
- 性能特性

## 实现机制
- 条件等待
- 信号通知
- 状态管理
- 资源控制
- 性能优化

## 使用场景
- 条件同步
- 状态等待
- 信号通知
- 资源管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.2.6NSRecursiveLock文件
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/19.2.6-NSRecursiveLock.md" << 'EOF'
---
title: NSRecursiveLock
icon: recursive-lock
order: 6
---

# NSRecursiveLock

## 基本特性
- 递归特性
- 使用方法
- 限制条件
- 性能影响
- 资源管理

## 实现机制
- 递归锁定
- 计数管理
- 状态控制
- 资源释放
- 性能优化

## 使用场景
- 递归调用
- 嵌套锁定
- 资源保护
- 并发控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建19.2.7@synchronized文件
cat > "$BASE_DIR/第19章-并行编程/19.2-互斥/19.2.7-@synchronized.md" << 'EOF'
---
title: @synchronized
icon: synchronized
order: 7
---

# @synchronized

## 基本语法
- 语法规则
- 使用方法
- 作用范围
- 性能影响
- 限制条件

## 实现机制
- 同步控制
- 锁管理
- 资源保护
- 异常处理
- 性能优化

## 使用场景
- 对象同步
- 临界区保护
- 资源访问
- 状态管理
- 并发控制

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3操作对象和并行处理目录及其README
mkdir -p "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理"
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/README.md" << 'EOF'
---
title: 操作对象和并行处理
icon: operation-parallel
order: 3
---

# 操作对象和并行处理

本节介绍操作对象和并行处理的概念及实现方法。
EOF

# 创建19.3.1新的并行处理程序文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.1-新的并行处理程序.md" << 'EOF'
---
title: 新的并行处理程序
icon: parallel-processing
order: 1
---

# 新的并行处理程序

## 基本概念
- 并行处理
- 任务分配
- 资源管理
- 性能优化
- 调度策略

## 实现机制
- 任务调度
- 资源分配
- 并发控制
- 状态管理
- 性能优化

## 使用场景
- 并行计算
- 任务处理
- 资源利用
- 性能提升
- 负载均衡

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.2使用NSOperation的处理概述文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.2-使用NSOperation的处理概述.md" << 'EOF'
---
title: 使用NSOperation的处理概述
icon: nsoperation-overview
order: 2
---

# 使用NSOperation的处理概述

## 基本概念
- 操作对象
- 任务封装
- 依赖关系
- 执行控制
- 性能特性

## 实现机制
- 对象创建
- 任务管理
- 依赖处理
- 状态控制
- 性能优化

## 使用场景
- 任务处理
- 并发控制
- 依赖管理
- 状态监控
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.3NSOperation和NSOperationQueue的简单用法文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.3-NSOperation和NSOperationQueue的简单用法.md" << 'EOF'
---
title: NSOperation和NSOperationQueue的简单用法
icon: operation-queue-usage
order: 3
---

# NSOperation和NSOperationQueue的简单用法

## 基本用法
- 队列创建
- 操作添加
- 任务调度
- 状态管理
- 性能控制

## 实现机制
- 队列管理
- 操作调度
- 并发控制
- 状态监控
- 性能优化

## 使用场景
- 任务队列
- 并发处理
- 依赖管理
- 状态控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.4等待至聚合任务终止文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.4-等待至聚合任务终止.md" << 'EOF'
---
title: 等待至聚合任务终止
icon: task-completion
order: 4
---

# 等待至聚合任务终止

## 基本概念
- 任务同步
- 完成等待
- 状态检查
- 资源管理
- 性能影响

## 实现机制
- 同步控制
- 状态监控
- 资源管理
- 异常处理
- 性能优化

## 使用场景
- 任务协调
- 状态同步
- 资源释放
- 完成确认
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.5使用操作对象的简单程序文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.5-使用操作对象的简单程序.md" << 'EOF'
---
title: 使用操作对象的简单程序
icon: operation-example
order: 5
---

# 使用操作对象的简单程序

## 程序结构
- 对象创建
- 任务定义
- 队列管理
- 执行控制
- 状态监控

## 实现机制
- 操作封装
- 任务调度
- 状态管理
- 资源控制
- 性能优化

## 使用场景
- 任务处理
- 并发控制
- 状态管理
- 资源利用
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建19.3.6NSInvocationOperation的使用方法文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.6-NSInvocationOperation的使用方法.md" << 'EOF'
---
title: NSInvocationOperation的使用方法
icon: invocation-operation
order: 6
---

# NSInvocationOperation的使用方法

## 基本用法
- 对象创建
- 方法调用
- 参数传递
- 执行控制
- 结果处理

## 实现机制
- 调用封装
- 参数管理
- 执行流程
- 状态控制
- 性能优化

## 使用场景
- 方法调用
- 任务封装
- 参数传递
- 异步执行
- 结果获取

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.7NSBlockOperation的使用方法文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.7-NSBlockOperation的使用方法.md" << 'EOF'
---
title: NSBlockOperation的使用方法
icon: block-operation
order: 7
---

# NSBlockOperation的使用方法

## 基本用法
- 块对象创建
- 任务定义
- 执行控制
- 状态管理
- 结果处理

## 实现机制
- 块封装
- 任务管理
- 执行流程
- 状态控制
- 性能优化

## 使用场景
- 任务封装
- 并发执行
- 状态管理
- 结果处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.8NSBlockOperation中添加多个块对象文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.8-NSBlockOperation中添加多个块对象.md" << 'EOF'
---
title: NSBlockOperation中添加多个块对象
icon: multiple-blocks
order: 8
---

# NSBlockOperation中添加多个块对象

## 基本方法
- 块添加
- 执行顺序
- 并发控制
- 状态管理
- 资源控制

## 实现机制
- 多块管理
- 执行调度
- 状态同步
- 资源分配
- 性能优化

## 使用场景
- 多任务处理
- 并发执行
- 任务协调
- 资源管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.9设置任务间的依赖文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.9-设置任务间的依赖.md" << 'EOF'
---
title: 设置任务间的依赖
icon: task-dependency
order: 9
---

# 设置任务间的依赖

## 基本概念
- 依赖关系
- 执行顺序
- 状态管理
- 错误处理
- 性能影响

## 实现机制
- 依赖设置
- 顺序控制
- 状态监控
- 错误处理
- 性能优化

## 使用场景
- 任务编排
- 流程控制
- 状态同步
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.10任务的优先级设置文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.10-任务的优先级设置.md" << 'EOF'
---
title: 任务的优先级设置
icon: task-priority
order: 10
---

# 任务的优先级设置

## 基本概念
- 优先级定义
- 执行顺序
- 调度策略
- 资源分配
- 性能影响

## 实现机制
- 优先级管理
- 调度控制
- 资源分配
- 状态监控
- 性能优化

## 使用场景
- 任务调度
- 资源分配
- 执行控制
- 性能优化
- 负载均衡

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.11设置最大并行任务数文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.11-设置最大并行任务数.md" << 'EOF'
---
title: 设置最大并行任务数
icon: max-concurrent
order: 11
---

# 设置最大并行任务数

## 基本概念
- 并发限制
- 资源控制
- 性能平衡
- 调度策略
- 系统负载

## 实现机制
- 并发控制
- 资源管理
- 任务调度
- 状态监控
- 性能优化

## 使用场景
- 资源限制
- 负载控制
- 性能优化
- 系统稳定
- 任务管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.3.12终止任务文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.12-终止任务.md" << 'EOF'
---
title: 终止任务
icon: task-cancellation
order: 12
---

# 终止任务

## 基本操作
- 终止方法
- 状态处理
- 资源清理
- 异常处理
- 性能影响

## 实现机制
- 终止控制
- 状态管理
- 资源释放
- 异常处理
- 性能优化

## 使用场景
- 任务取消
- 资源回收
- 异常处理
- 状态恢复
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建19.3.13设置队列调度为中断状态文件
cat > "$BASE_DIR/第19章-并行编程/19.3-操作对象和并行处理/19.3.13-设置队列调度为中断状态.md" << 'EOF'
---
title: 设置队列调度为中断状态
icon: queue-suspend
order: 13
---

# 设置队列调度为中断状态

## 基本操作
- 状态设置
- 调度控制
- 任务管理
- 资源处理
- 性能影响

## 实现机制
- 状态管理
- 调度暂停
- 资源控制
- 任务处理
- 性能优化

## 使用场景
- 调度控制
- 资源管理
- 任务暂停
- 状态维护
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.4并行处理的示例程序目录及其README
mkdir -p "$BASE_DIR/第19章-并行编程/19.4-并行处理的示例程序"
cat > "$BASE_DIR/第19章-并行编程/19.4-并行处理的示例程序/README.md" << 'EOF'
---
title: 并行处理的示例程序
icon: parallel-example
order: 4
---

# 并行处理的示例程序

本节通过具体示例介绍并行处理的实现方法。
EOF

# 创建19.4.1程序概要文件
cat > "$BASE_DIR/第19章-并行编程/19.4-并行处理的示例程序/19.4.1-程序概要.md" << 'EOF'
---
title: 程序概要
icon: program-overview
order: 1
---

# 程序概要

## 基本结构
- 程序架构
- 模块组成
- 功能划分
- 交互流程
- 性能特性

## 实现机制
- 并行处理
- 任务调度
- 资源管理
- 状态控制
- 性能优化

## 使用场景
- 并发处理
- 任务管理
- 资源控制
- 状态维护
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.4.2类BrowsingViewCtrl文件
cat > "$BASE_DIR/第19章-并行编程/19.4-并行处理的示例程序/19.4.2-类BrowsingViewCtrl.md" << 'EOF'
---
title: 类BrowsingViewCtrl
icon: browsing-view
order: 2
---

# 类BrowsingViewCtrl

## 类设计
- 属性定义
- 方法接口
- 状态管理
- 视图控制
- 事件处理

## 实现机制
- 视图管理
- 事件响应
- 状态控制
- 资源处理
- 性能优化

## 使用场景
- 界面控制
- 事件处理
- 状态管理
- 资源控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.4.3类BrowsingWinCtrl文件
cat > "$BASE_DIR/第19章-并行编程/19.4-并行处理的示例程序/19.4.3-类BrowsingWinCtrl.md" << 'EOF'
---
title: 类BrowsingWinCtrl
icon: browsing-window
order: 3
---

# 类BrowsingWinCtrl

## 类设计
- 窗口管理
- 控制逻辑
- 事件处理
- 状态维护
- 资源控制

## 实现机制
- 窗口控制
- 事件响应
- 状态管理
- 资源处理
- 性能优化

## 使用场景
- 窗口管理
- 界面控制
- 事件处理
- 状态维护
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.4.4类DrawOperation文件
cat > "$BASE_DIR/第19章-并行编程/19.4-并行处理的示例程序/19.4.4-类DrawOperation.md" << 'EOF'
---
title: 类DrawOperation
icon: draw-operation
order: 4
---

# 类DrawOperation

## 类设计
- 绘制操作
- 状态管理
- 资源控制
- 性能优化
- 异常处理

## 实现机制
- 绘制实现
- 状态控制
- 资源管理
- 性能优化
- 错误处理

## 使用场景
- 图形绘制
- 状态管理
- 资源控制
- 性能优化
- 异常处理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.4.5其他改变文件
cat > "$BASE_DIR/第19章-并行编程/19.4-并行处理的示例程序/19.4.5-其他改变.md" << 'EOF'
---
title: 其他改变
icon: other-changes
order: 5
---

# 其他改变

## 修改内容
- 功能优化
- 性能提升
- 接口调整
- 资源管理
- 错误处理

## 实现机制
- 代码重构
- 性能优化
- 接口改进
- 资源控制
- 异常处理

## 使用场景
- 功能增强
- 性能提升
- 接口优化
- 资源管理
- 错误处理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建19.5使用连接的通信目录及其README
mkdir -p "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信"
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/README.md" << 'EOF'
---
title: 使用连接的通信
icon: connection-communication
order: 5
---

# 使用连接的通信

本节介绍使用连接进行通信的基本概念和实现方法。
EOF

# 创建19.5.1连接文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.1-连接.md" << 'EOF'
---
title: 连接
icon: connection
order: 1
---

# 连接

## 基本概念
- 连接定义
- 连接类型
- 建立过程
- 通信机制
- 性能特性

## 实现机制
- 连接管理
- 数据传输
- 状态控制
- 错误处理
- 性能优化

## 使用场景
- 通信建立
- 数据交换
- 状态同步
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.5.2代理文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.2-代理.md" << 'EOF'
---
title: 代理
icon: proxy
order: 2
---

# 代理

## 基本概念
- 代理定义
- 代理类型
- 工作原理
- 使用方法
- 性能影响

## 实现机制
- 代理创建
- 消息转发
- 状态管理
- 资源控制
- 性能优化

## 使用场景
- 远程调用
- 消息转发
- 访问控制
- 负载均衡
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.5.3方法的指针参数文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.3-方法的指针参数.md" << 'EOF'
---
title: 方法的指针参数
icon: pointer-parameters
order: 3
---

# 方法的指针参数

## 基本用法
- 参数传递
- 指针操作
- 内存管理
- 安全考虑
- 性能影响

## 实现机制
- 参数处理
- 内存控制
- 安全检查
- 错误处理
- 性能优化

## 使用场景
- 数据传递
- 引用传递
- 内存共享
- 性能优化
- 资源管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.5.4对象的副本传递文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.4-对象的副本传递.md" << 'EOF'
---
title: 对象的副本传递
icon: object-copy
order: 4
---

# 对象的副本传递

## 基本概念
- 复制机制
- 传递方式
- 内存管理
- 性能考虑
- 安全性

## 实现机制
- 对象复制
- 数据传输
- 内存控制
- 状态管理
- 性能优化

## 使用场景
- 数据传递
- 状态复制
- 安全隔离
- 并发控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.5.5异步通信文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.5-异步通信.md" << 'EOF'
---
title: 异步通信
icon: async-communication
order: 5
---

# 异步通信

## 基本概念
- 异步模型
- 通信机制
- 回调处理
- 状态管理
- 性能特性

## 实现机制
- 消息发送
- 回调处理
- 状态控制
- 错误处理
- 性能优化

## 使用场景
- 非阻塞通信
- 并发处理
- 事件驱动
- 性能优化
- 资源管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.5.6设置协议文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.6-设置协议.md" << 'EOF'
---
title: 设置协议
icon: protocol-setup
order: 6
---

# 设置协议

## 基本概念
- 协议定义
- 协议类型
- 通信规则
- 安全机制
- 性能考虑

## 实现机制
- 协议设置
- 规则实现
- 安全控制
- 状态管理
- 性能优化

## 使用场景
- 通信规范
- 数据交换
- 安全控制
- 状态同步
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建19.5.7运行回路的开始文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.7-运行回路的开始.md" << 'EOF'
---
title: 运行回路的开始
icon: run-loop-start
order: 7
---

# 运行回路的开始

## 基本概念
- 回路定义
- 启动过程
- 运行机制
- 状态管理
- 性能特性

## 实现机制
- 回路初始化
- 事件处理
- 状态控制
- 资源管理
- 性能优化

## 使用场景
- 事件循环
- 消息处理
- 状态维护
- 资源控制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.5.8接收消息时的处理文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.8-接收消息时的处理.md" << 'EOF'
---
title: 接收消息时的处理
icon: message-handling
order: 8
---

# 接收消息时的处理

## 基本流程
- 消息接收
- 数据解析
- 处理逻辑
- 状态更新
- 错误处理

## 实现机制
- 消息处理
- 数据验证
- 状态管理
- 错误恢复
- 性能优化

## 使用场景
- 消息通信
- 数据交换
- 状态同步
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.9线程间连接目录及其README
mkdir -p "$BASE_DIR/第19章-并行编程/19.9-线程间连接"
cat > "$BASE_DIR/第19章-并行编程/19.9-线程间连接/README.md" << 'EOF'
---
title: 线程间连接
icon: thread-connection
order: 9
---

# 线程间连接

本节介绍线程间通信的基本概念和实现方法。
EOF

# 创建19.9.9线程间连接文件
cat > "$BASE_DIR/第19章-并行编程/19.9-线程间连接/19.9.9-线程间连接.md" << 'EOF'
---
title: 线程间连接
icon: thread-connection
order: 1
---

# 线程间连接

## 基本概念
- 连接机制
- 通信方式
- 同步控制
- 资源共享
- 性能特性

## 实现机制
- 连接建立
- 数据传输
- 同步管理
- 资源控制
- 性能优化

## 使用场景
- 线程通信
- 数据共享
- 状态同步
- 资源管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建19.5.10进程间连接的例子文件
cat > "$BASE_DIR/第19章-并行编程/19.5-使用连接的通信/19.5.10-进程间连接的例子.md" << 'EOF'
---
title: 进程间连接的例子
icon: process-connection
order: 10
---

# 进程间连接的例子

## 基本结构
- 连接建立
- 数据传输
- 同步机制
- 错误处理
- 资源管理

## 实现机制
- 进程通信
- 数据交换
- 同步控制
- 错误恢复
- 性能优化

## 使用场景
- 进程通信
- 数据共享
- 状态同步
- 资源管理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第20章键值编码目录及其README
mkdir -p "$BASE_DIR/第20章-键值编码"
cat > "$BASE_DIR/第20章-键值编码/README.md" << 'EOF'
---
title: 键值编码
icon: key-value-coding
order: 20
---

# 键值编码

本章介绍键值编码的基本概念和实现方法。
EOF

# 创建20.1键值编码概况目录及其README
mkdir -p "$BASE_DIR/第20章-键值编码/20.1-键值编码概况"
cat > "$BASE_DIR/第20章-键值编码/20.1-键值编码概况/README.md" << 'EOF'
---
title: 键值编码概况
icon: kvc-overview
order: 1
---

# 键值编码概况

本节介绍键值编码的基本概念和使用方法。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建20.1.1什么是键值编码文件
cat > "$BASE_DIR/第20章-键值编码/20.1-键值编码概况/20.1.1-什么是键值编码.md" << 'EOF'
---
title: 什么是键值编码
icon: kvc-intro
order: 1
---

# 什么是键值编码

## 基本概念
- 定义说明
- 工作原理
- 核心特性
- 使用场景
- 优势特点

## 实现机制
- 编码过程
- 解码过程
- 数据转换
- 错误处理
- 性能优化

## 使用场景
- 数据存储
- 对象序列化
- 属性访问
- 数据转换
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.1.2键值编码的基本处理文件
cat > "$BASE_DIR/第20章-键值编码/20.1-键值编码概况/20.1.2-键值编码的基本处理.md" << 'EOF'
---
title: 键值编码的基本处理
icon: kvc-basics
order: 2
---

# 键值编码的基本处理

## 基本操作
- 编码处理
- 解码处理
- 数据转换
- 错误处理
- 性能优化

## 实现机制
- 处理流程
- 数据管理
- 转换规则
- 错误处理
- 性能优化

## 使用场景
- 数据处理
- 属性访问
- 对象转换
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.2访问属性目录及其README
mkdir -p "$BASE_DIR/第20章-键值编码/20.2-访问属性"
cat > "$BASE_DIR/第20章-键值编码/20.2-访问属性/README.md" << 'EOF'
---
title: 访问属性
icon: property-access
order: 2
---

# 访问属性

本节介绍如何通过键值编码访问对象属性。
EOF

# 创建20.2.1键值编码的方法的行为文件
cat > "$BASE_DIR/第20章-键值编码/20.2-访问属性/20.2.1-键值编码的方法的行为.md" << 'EOF'
---
title: 键值编码的方法的行为
icon: kvc-method-behavior
order: 1
---

# 键值编码的方法的行为

## 基本行为
- 方法定义
- 调用过程
- 参数处理
- 返回值处理
- 错误处理

## 实现机制
- 方法调用
- 参数传递
- 返回处理
- 错误处理
- 性能优化

## 使用场景
- 属性访问
- 方法调用
- 数据处理
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.2.2属性值的自动转换文件
cat > "$BASE_DIR/第20章-键值编码/20.2-访问属性/20.2.2-属性值的自动转换.md" << 'EOF'
---
title: 属性值的自动转换
icon: property-conversion
order: 2
---

# 属性值的自动转换

## 基本概念
- 转换规则
- 数据类型
- 转换过程
- 错误处理
- 性能影响

## 实现机制
- 类型检测
- 值转换
- 错误处理
- 性能优化
- 资源管理

## 使用场景
- 数据转换
- 类型适配
- 值处理
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.2.3字典对象和键值编码文件
cat > "$BASE_DIR/第20章-键值编码/20.2-访问属性/20.2.3-字典对象和键值编码.md" << 'EOF'
---
title: 字典对象和键值编码
icon: dictionary-kvc
order: 3
---

# 字典对象和键值编码

## 基本概念
- 字典结构
- 编码规则
- 访问方式
- 数据管理
- 性能特性

## 实现机制
- 数据存储
- 访问控制
- 值管理
- 错误处理
- 性能优化

## 使用场景
- 数据存储
- 属性访问
- 值管理
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.2.4根据键路径进行访问文件
cat > "$BASE_DIR/第20章-键值编码/20.2-访问属性/20.2.4-根据键路径进行访问.md" << 'EOF'
---
title: 根据键路径进行访问
icon: keypath-access
order: 4
---

# 根据键路径进行访问

## 基本概念
- 键路径定义
- 访问规则
- 路径解析
- 值获取
- 性能特性

## 实现机制
- 路径解析
- 值访问
- 错误处理
- 性能优化
- 资源管理

## 使用场景
- 属性访问
- 值获取
- 路径导航
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建20.2.5一对一关系和一对多关系文件
cat > "$BASE_DIR/第20章-键值编码/20.2-访问属性/20.2.5-一对一关系和一对多关系.md" << 'EOF'
---
title: 一对一关系和一对多关系
icon: relationships
order: 5
---

# 一对一关系和一对多关系

## 基本概念
- 关系类型
- 关系定义
- 访问方式
- 数据管理
- 性能特性

## 实现机制
- 关系建立
- 数据访问
- 关系维护
- 错误处理
- 性能优化

## 使用场景
- 数据关联
- 关系管理
- 数据访问
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.2.6数组对象和键值编码文件
cat > "$BASE_DIR/第20章-键值编码/20.2-访问属性/20.2.6-数组对象和键值编码.md" << 'EOF'
---
title: 数组对象和键值编码
icon: array-kvc
order: 6
---

# 数组对象和键值编码

## 基本概念
- 数组处理
- 编码规则
- 访问方式
- 数据管理
- 性能特性

## 实现机制
- 数组操作
- 数据访问
- 值管理
- 错误处理
- 性能优化

## 使用场景
- 数组处理
- 数据访问
- 值管理
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.3一对多关系的访问目录及其README
mkdir -p "$BASE_DIR/第20章-键值编码/20.3-一对多关系的访问"
cat > "$BASE_DIR/第20章-键值编码/20.3-一对多关系的访问/README.md" << 'EOF'
---
title: 一对多关系的访问
icon: one-to-many
order: 3
---

# 一对多关系的访问

本节介绍如何访问和管理一对多关系。
EOF

# 创建20.3.1带索引的访问器模式文件
cat > "$BASE_DIR/第20章-键值编码/20.3-一对多关系的访问/20.3.1-带索引的访问器模式.md" << 'EOF'
---
title: 带索引的访问器模式
icon: indexed-accessor
order: 1
---

# 带索引的访问器模式

## 基本概念
- 访问器定义
- 索引机制
- 访问方式
- 数据管理
- 性能特性

## 实现机制
- 访问控制
- 索引管理
- 数据访问
- 错误处理
- 性能优化

## 使用场景
- 数据访问
- 索引管理
- 值操作
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.3.2一对多关系的可变访问文件
cat > "$BASE_DIR/第20章-键值编码/20.3-一对多关系的访问/20.3.2-一对多关系的可变访问.md" << 'EOF'
---
title: 一对多关系的可变访问
icon: mutable-access
order: 2
---

# 一对多关系的可变访问

## 基本概念
- 可变性定义
- 访问方式
- 数据管理
- 关系维护
- 性能特性

## 实现机制
- 数据修改
- 关系更新
- 状态管理
- 错误处理
- 性能优化

## 使用场景
- 数据更新
- 关系维护
- 状态管理
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.4KVC标准目录及其README
mkdir -p "$BASE_DIR/第20章-键值编码/20.4-KVC标准"
cat > "$BASE_DIR/第20章-键值编码/20.4-KVC标准/README.md" << 'EOF'
---
title: KVC标准
icon: kvc-standard
order: 4
---

# KVC标准

本节介绍键值编码的标准规范。
EOF

# 创建20.4.1验证属性值文件
cat > "$BASE_DIR/第20章-键值编码/20.4-KVC标准/20.4.1-验证属性值.md" << 'EOF'
---
title: 验证属性值
icon: property-validation
order: 1
---

# 验证属性值

## 基本概念
- 验证规则
- 验证过程
- 错误处理
- 数据管理
- 性能特性

## 实现机制
- 值验证
- 规则检查
- 错误处理
- 状态管理
- 性能优化

## 使用场景
- 数据验证
- 值检查
- 错误处理
- 状态维护
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建20.4.2键值编码的准则文件
cat > "$BASE_DIR/第20章-键值编码/20.4-KVC标准/20.4.2-键值编码的准则.md" << 'EOF'
---
title: 键值编码的准则
icon: kvc-guidelines
order: 2
---

# 键值编码的准则

## 基本准则
- 命名规范
- 实现要求
- 访问规则
- 错误处理
- 性能考虑

## 实现机制
- 编码规范
- 访问控制
- 错误处理
- 性能优化
- 资源管理

## 使用场景
- 标准实现
- 规范应用
- 错误处理
- 性能优化
- 维护管理

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.5键值观察目录及其README
mkdir -p "$BASE_DIR/第20章-键值编码/20.5-键值观察"
cat > "$BASE_DIR/第20章-键值编码/20.5-键值观察/README.md" << 'EOF'
---
title: 键值观察
icon: kvo
order: 5
---

# 键值观察

本节介绍键值观察的基本概念和实现方法。
EOF

# 创建20.5.1键值观察的基础文件
cat > "$BASE_DIR/第20章-键值编码/20.5-键值观察/20.5.1-键值观察的基础.md" << 'EOF'
---
title: 键值观察的基础
icon: kvo-basics
order: 1
---

# 键值观察的基础

## 基本概念
- 观察机制
- 通知方式
- 变更检测
- 事件处理
- 性能特性

## 实现机制
- 观察注册
- 变更通知
- 事件处理
- 错误处理
- 性能优化

## 使用场景
- 属性监控
- 状态同步
- 事件处理
- 数据绑定
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.5.2示例程序文件
cat > "$BASE_DIR/第20章-键值编码/20.5-键值观察/20.5.2-示例程序.md" << 'EOF'
---
title: 示例程序
icon: example-program
order: 2
---

# 示例程序

## 程序结构
- 基本框架
- 功能实现
- 观察机制
- 事件处理
- 性能优化

## 实现细节
- 代码组织
- 观察设置
- 事件响应
- 错误处理
- 性能优化

## 使用方法
- 程序配置
- 观察设置
- 事件处理
- 错误处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.5.3一对多关系的属性监视文件
cat > "$BASE_DIR/第20章-键值编码/20.5-键值观察/20.5.3-一对多关系的属性监视.md" << 'EOF'
---
title: 一对多关系的属性监视
icon: one-to-many-monitoring
order: 3
---

# 一对多关系的属性监视

## 基本概念
- 监视机制
- 关系管理
- 变更检测
- 事件处理
- 性能特性

## 实现机制
- 监视设置
- 关系维护
- 事件处理
- 错误处理
- 性能优化

## 使用场景
- 关系监控
- 状态同步
- 事件处理
- 数据绑定
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.5.4依赖键的登记文件
cat > "$BASE_DIR/第20章-键值编码/20.5-键值观察/20.5.4-依赖键的登记.md" << 'EOF'
---
title: 依赖键的登记
icon: key-dependency
order: 4
---

# 依赖键的登记

## 基本概念
- 依赖关系
- 登记机制
- 更新策略
- 事件处理
- 性能特性

## 实现机制
- 依赖管理
- 登记处理
- 更新控制
- 错误处理
- 性能优化

## 使用场景
- 依赖处理
- 状态同步
- 事件管理
- 数据绑定
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.6Cocoa绑定概述目录及其README
mkdir -p "$BASE_DIR/第20章-键值编码/20.6-Cocoa绑定概述"
cat > "$BASE_DIR/第20章-键值编码/20.6-Cocoa绑定概述/README.md" << 'EOF'
---
title: Cocoa绑定概述
icon: cocoa-binding
order: 6
---

# Cocoa绑定概述

本节介绍Cocoa绑定的基本概念和使用方法。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建20.6.1目标－行为－模式的弱点文件
cat > "$BASE_DIR/第20章-键值编码/20.6-Cocoa绑定概述/20.6.1-目标－行为－模式的弱点.md" << 'EOF'
---
title: 目标－行为－模式的弱点
icon: target-action-weakness
order: 1
---

# 目标－行为－模式的弱点

## 基本问题
- 模式局限
- 实现复杂性
- 维护困难
- 扩展性差
- 性能影响

## 主要弱点
- 耦合度高
- 代码冗余
- 维护成本
- 扩展困难
- 调试复杂

## 解决方案
- 模式优化
- 架构改进
- 代码重构
- 性能提升
- 维护简化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.6.2什么是Cocoa绑定文件
cat > "$BASE_DIR/第20章-键值编码/20.6-Cocoa绑定概述/20.6.2-什么是Cocoa绑定.md" << 'EOF'
---
title: 什么是Cocoa绑定
icon: cocoa-binding-intro
order: 2
---

# 什么是Cocoa绑定

## 基本概念
- 绑定定义
- 工作原理
- 核心特性
- 使用场景
- 优势特点

## 实现机制
- 绑定过程
- 数据同步
- 更新机制
- 错误处理
- 性能优化

## 使用场景
- 数据绑定
- 界面同步
- 状态管理
- 事件处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.6.3Cocoa绑定所需的方法文件
cat > "$BASE_DIR/第20章-键值编码/20.6-Cocoa绑定概述/20.6.3-Cocoa绑定所需的方法.md" << 'EOF'
---
title: Cocoa绑定所需的方法
icon: binding-methods
order: 3
---

# Cocoa绑定所需的方法

## 基本方法
- 绑定设置
- 数据访问
- 更新处理
- 错误处理
- 性能优化

## 实现机制
- 方法定义
- 参数处理
- 返回值处理
- 错误处理
- 性能优化

## 使用场景
- 数据绑定
- 界面同步
- 状态管理
- 事件处理
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.6.4例题：绘制二次函数图的软件文件
cat > "$BASE_DIR/第20章-键值编码/20.6-Cocoa绑定概述/20.6.4-例题：绘制二次函数图的软件.md" << 'EOF'
---
title: 例题：绘制二次函数图的软件
icon: quadratic-function
order: 4
---

# 例题：绘制二次函数图的软件

## 程序结构
- 界面设计
- 数据模型
- 绘图逻辑
- 交互处理
- 性能优化

## 实现机制
- 函数计算
- 图形绘制
- 数据绑定
- 交互响应
- 性能优化

## 功能特性
- 参数输入
- 实时绘制
- 缩放控制
- 数据展示
- 交互操作

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建20.6.5自定义视图的方法定义文件
cat > "$BASE_DIR/第20章-键值编码/20.6-Cocoa绑定概述/20.6.5-自定义视图的方法定义.md" << 'EOF'
---
title: 自定义视图的方法定义
icon: custom-view-methods
order: 5
---

# 自定义视图的方法定义

## 基本方法
- 视图创建
- 绘制实现
- 事件处理
- 状态管理
- 性能优化

## 实现机制
- 方法定义
- 参数处理
- 绘制控制
- 事件响应
- 性能优化

## 使用场景
- 界面定制
- 交互处理
- 状态管理
- 性能优化
- 维护更新

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第21章现代Objective-C开发目录及其README
mkdir -p "$BASE_DIR/第21章-现代Objective-C开发"
cat > "$BASE_DIR/第21章-现代Objective-C开发/README.md" << 'EOF'
---
title: 现代Objective-C开发
icon: modern-objc
order: 21
---

# 现代Objective-C开发

本章介绍现代Objective-C开发的特性和最佳实践。
EOF

# 创建21.1Swift互操作文件
cat > "$BASE_DIR/第21章-现代Objective-C开发/21.1-Swift互操作.md" << 'EOF'
---
title: Swift互操作
icon: swift-interop
order: 1
---

# Swift互操作

## 基本概念
- 互操作定义
- 语言桥接
- 类型映射
- 特性支持
- 性能考虑

## 实现机制
- 代码转换
- 类型处理
- 特性适配
- 错误处理
- 性能优化

## 使用场景
- 混合开发
- 代码迁移
- 功能扩展
- 性能优化
- 维护更新

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建21.2ModernObjective-C特性文件
cat > "$BASE_DIR/第21章-现代Objective-C开发/21.2-ModernObjective-C特性.md" << 'EOF'
---
title: Modern Objective-C特性
icon: modern-features
order: 2
---

# Modern Objective-C特性

## 语言特性
- 属性语法
- ARC机制
- 块语法
- 泛型支持
- 模块化

## 实现机制
- 内存管理
- 并发处理
- 类型系统
- 错误处理
- 性能优化

## 使用场景
- 代码简化
- 性能提升
- 安全增强
- 维护优化
- 开发效率

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建21.3新框架集成文件
cat > "$BASE_DIR/第21章-现代Objective-C开发/21.3-新框架集成.md" << 'EOF'
---
title: 新框架集成
icon: framework-integration
order: 3
---

# 新框架集成

## 框架概述
- 框架选择
- 集成方法
- 兼容性
- 性能影响
- 维护成本

## 实现机制
- 集成流程
- 配置管理
- 依赖处理
- 版本控制
- 性能优化

## 使用场景
- 功能扩展
- 性能提升
- 开发效率
- 维护优化
- 质量保证

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建21.4混合开发策略文件
cat > "$BASE_DIR/第21章-现代Objective-C开发/21.4-混合开发策略.md" << 'EOF'
---
title: 混合开发策略
icon: hybrid-development
order: 4
---

# 混合开发策略

## 策略制定
- 技术选择
- 架构设计
- 接口定义
- 数据交换
- 性能考虑

## 实现机制
- 代码组织
- 接口设计
- 数据传输
- 错误处理
- 性能优化

## 使用场景
- 渐进迁移
- 功能扩展
- 性能优化
- 维护更新
- 团队协作

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建第22章开发工具与调试目录及其README
mkdir -p "$BASE_DIR/第22章-开发工具与调试"
cat > "$BASE_DIR/第22章-开发工具与调试/README.md" << 'EOF'
---
title: 开发工具与调试
icon: dev-tools
order: 22
---

# 开发工具与调试

本章介绍开发工具的使用和调试技巧。
EOF

# 创建22.1Xcode高级使用文件
cat > "$BASE_DIR/第22章-开发工具与调试/22.1-Xcode高级使用.md" << 'EOF'
---
title: Xcode高级使用
icon: xcode-advanced
order: 1
---

# Xcode高级使用

## 工具特性
- 界面定制
- 快捷操作
- 插件扩展
- 调试功能
- 性能分析

## 使用技巧
- 效率提升
- 功能优化
- 问题诊断
- 代码管理
- 团队协作

## 最佳实践
- 工作流程
- 配置管理
- 版本控制
- 调试技巧
- 性能优化
EOF

# 创建22.2调试技巧文件
cat > "$BASE_DIR/第22章-开发工具与调试/22.2-调试技巧.md" << 'EOF'
---
title: 调试技巧
icon: debugging
order: 2
---

# 调试技巧

## 基本技巧
- 断点设置
- 变量监视
- 日志分析
- 错误追踪
- 内存检查

## 高级方法
- 条件断点
- 远程调试
- 性能分析
- 内存泄漏
- 崩溃分析

## 最佳实践
- 调试策略
- 问题定位
- 解决方案
- 预防措施
- 经验总结
EOF

# 创建22.3性能优化文件
cat > "$BASE_DIR/第22章-开发工具与调试/22.3-性能优化.md" << 'EOF'
---
title: 性能优化
icon: performance
order: 3
---

# 性能优化

## 优化方向
- 内存管理
- 算法优化
- 并发处理
- 资源利用
- 响应时间

## 优化技术
- 代码优化
- 架构改进
- 缓存策略
- 并发控制
- 资源管理

## 最佳实践
- 性能分析
- 优化方案
- 实施策略
- 效果评估
- 持续改进
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建22.4持续集成文件
cat > "$BASE_DIR/第22章-开发工具与调试/22.4-持续集成.md" << 'EOF'
---
title: 持续集成
icon: ci
order: 4
---

# 持续集成

## 基本概念
- CI/CD流程
- 自动化构建
- 测试集成
- 部署策略
- 监控反馈

## 工具链
- 构建工具
- 测试框架
- 部署工具
- 监控系统
- 反馈机制

## 最佳实践
- 流程规范
- 质量控制
- 自动化策略
- 问题处理
- 持续改进
EOF

# 创建第23章设计模式与架构目录及其README
mkdir -p "$BASE_DIR/第23章-设计模式与架构"
cat > "$BASE_DIR/第23章-设计模式与架构/README.md" << 'EOF'
---
title: 设计模式与架构
icon: design-patterns
order: 23
---

# 设计模式与架构

本章介绍iOS开发中常用的设计模式和架构设计原则。
EOF

# 创建23.1常用设计模式文件
cat > "$BASE_DIR/第23章-设计模式与架构/23.1-常用设计模式.md" << 'EOF'
---
title: 常用设计模式
icon: patterns
order: 1
---

# 常用设计模式

## 创建型模式
- 单例模式
- 工厂模式
- 建造者模式
- 原型模式
- 抽象工厂

## 结构型模式
- 适配器模式
- 桥接模式
- 装饰器模式
- 外观模式
- 代理模式

## 行为型模式
- 观察者模式
- 策略模式
- 命令模式
- 状态模式
- 模板方法
EOF

# 创建23.2架构设计原则文件
cat > "$BASE_DIR/第23章-设计模式与架构/23.2-架构设计原则.md" << 'EOF'
---
title: 架构设计原则
icon: architecture-principles
order: 2
---

# 架构设计原则

## 基本原则
- 单一职责
- 开闭原则
- 里氏替换
- 接口隔离
- 依赖倒置

## 架构模式
- MVC模式
- MVVM模式
- MVP模式
- Clean架构
- 分层架构

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 可维护性
- 可扩展性
EOF

# 创建23.3组件化开发文件
cat > "$BASE_DIR/第23章-设计模式与架构/23.3-组件化开发.md" << 'EOF'
---
title: 组件化开发
icon: component-based
order: 3
---

# 组件化开发

## 基本概念
- 组件定义
- 模块划分
- 接口设计
- 依赖管理
- 版本控制

## 实现机制
- 组件封装
- 接口规范
- 依赖注入
- 通信机制
- 性能优化

## 最佳实践
- 设计规范
- 实现标准
- 性能优化
- 维护策略
- 版本管理
EOF

# 创建23.4代码重构文件
cat > "$BASE_DIR/第23章-设计模式与架构/23.4-代码重构.md" << 'EOF'
---
title: 代码重构
icon: refactoring
order: 4
---

# 代码重构

## 重构原则
- 代码异味
- 重构时机
- 重构策略
- 质量控制
- 性能优化

## 重构技术
- 提取方法
- 移动方法
- 重命名
- 简化条件
- 消除重复

## 最佳实践
- 重构流程
- 测试保障
- 性能优化
- 代码审查
- 持续改进
EOF

# 创建第24章测试与质量保证目录及其README
mkdir -p "$BASE_DIR/第24章-测试与质量保证"
cat > "$BASE_DIR/第24章-测试与质量保证/README.md" << 'EOF'
---
title: 测试与质量保证
icon: testing-qa
order: 24
---

# 测试与质量保证

本章介绍iOS开发中的测试方法和质量保证体系。
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建24.1单元测试文件
cat > "$BASE_DIR/第24章-测试与质量保证/24.1-单元测试.md" << 'EOF'
---
title: 单元测试
icon: unit-testing
order: 1
---

# 单元测试

## 基本概念
- 测试原则
- 测试框架
- 测试用例
- 断言方法
- 测试覆盖

## 测试技术
- 测试设计
- 测试实现
- 数据准备
- 结果验证
- 报告生成

## 最佳实践
- 测试规范
- 代码质量
- 持续集成
- 问题跟踪
- 测试维护
EOF

# 创建24.2UI测试文件
cat > "$BASE_DIR/第24章-测试与质量保证/24.2-UI测试.md" << 'EOF'
---
title: UI测试
icon: ui-testing
order: 2
---

# UI测试

## 基本概念
- 界面测试
- 交互测试
- 自动化测试
- 测试工具
- 测试策略

## 测试技术
- 界面验证
- 事件模拟
- 响应测试
- 兼容性测试
- 性能评估

## 最佳实践
- 测试规范
- 自动化流程
- 问题处理
- 报告生成
- 持续改进
EOF

# 创建24.3性能测试文件
cat > "$BASE_DIR/第24章-测试与质量保证/24.3-性能测试.md" << 'EOF'
---
title: 性能测试
icon: performance-testing
order: 3
---

# 性能测试

## 测试类型
- 负载测试
- 压力测试
- 稳定性测试
- 并发测试
- 内存测试

## 测试技术
- 性能分析
- 瓶颈定位
- 资源监控
- 数据收集
- 报告生成

## 最佳实践
- 测试规范
- 优化策略
- 监控方案
- 问题处理
- 持续改进
EOF

# 创建24.4代码覆盖率文件
cat > "$BASE_DIR/第24章-测试与质量保证/24.4-代码覆盖率.md" << 'EOF'
---
title: 代码覆盖率
icon: code-coverage
order: 4
---

# 代码覆盖率

## 基本概念
- 覆盖率类型
- 测量方法
- 统计分析
- 报告生成
- 质量评估

## 实现技术
- 工具使用
- 数据收集
- 结果分析
- 报告展示
- 持续跟踪

## 最佳实践
- 覆盖率目标
- 改进策略
- 质量控制
- 持续监控
- 团队协作
EOF

# 创建第25章安全开发指南目录及其README
mkdir -p "$BASE_DIR/第25章-安全开发指南"
cat > "$BASE_DIR/第25章-安全开发指南/README.md" << 'EOF'
---
title: 安全开发指南
icon: security
order: 25
---

# 安全开发指南

本章介绍iOS应用开发中的安全开发原则和最佳实践。
EOF

# 创建25.1数据安全文件
cat > "$BASE_DIR/第25章-安全开发指南/25.1-数据安全.md" << 'EOF'
---
title: 数据安全
icon: data-security
order: 1
---

# 数据安全

## 基本概念
- 数据加密
- 安全存储
- 访问控制
- 数据传输
- 隐私保护

## 实现技术
- 加密算法
- 存储方案
- 权限管理
- 传输安全
- 数据清理

## 最佳实践
- 安全策略
- 实现标准
- 审计跟踪
- 应急响应
- 持续改进
EOF

# 创建25.2网络安全文件
cat > "$BASE_DIR/第25章-安全开发指南/25.2-网络安全.md" << 'EOF'
---
title: 网络安全
icon: network-security
order: 2
---

# 网络安全

## 基本概念
- 通信安全
- 协议安全
- 认证授权
- 攻击防护
- 监控审计

## 实现技术
- 安全传输
- 身份验证
- 访问控制
- 防护措施
- 日志记录

## 最佳实践
- 安全策略
- 实现标准
- 漏洞管理
- 应急响应
- 持续改进
EOF
BASE_DIR="c:\project\kphub\src\object-c"

# 创建25.3加密技术文件
cat > "$BASE_DIR/第25章-安全开发指南/25.3-加密技术.md" << 'EOF'
---
title: 加密技术
icon: encryption
order: 3
---

# 加密技术

## 基本概念
- 对称加密
- 非对称加密
- 哈希算法
- 数字签名
- 密钥管理

## 实现技术
- 加密算法
- 密钥生成
- 安全存储
- 签名验证
- 性能优化

## 最佳实践
- 算法选择
- 密钥保护
- 实现标准
- 安全审计
- 持续改进
EOF

# 创建25.4安全最佳实践文件
cat > "$BASE_DIR/第25章-安全开发指南/25.4-安全最佳实践.md" << 'EOF'
---
title: 安全最佳实践
icon: security-practices
order: 4
---

# 安全最佳实践

## 开发规范
- 代码审查
- 漏洞检测
- 安全测试
- 风险评估
- 应急响应

## 实施策略
- 安全架构
- 防护措施
- 监控审计
- 事件响应
- 持续改进

## 最佳实践
- 设计原则
- 实现标准
- 运维规范
- 团队协作
- 持续学习
EOF

# 创建Swift编程语言知识库目录及其README
mkdir -p "$BASE_DIR/../swift"
cat > "$BASE_DIR/../swift/README.md" << 'EOF'
---
title: Swift编程语言知识库
icon: swift
order: 1
---

# Swift编程语言知识库

本知识库系统地整理了Swift编程语言的核心概念和实践经验。
EOF

# 创建1.1欢迎来到Swift文件
mkdir -p "$BASE_DIR/../swift/第1章-Swift基础/1.1-欢迎来到Swift"
cat > "$BASE_DIR/../swift/第1章-Swift基础/1.1-欢迎来到Swift/README.md" << 'EOF'
---
title: 欢迎来到Swift
icon: swift-welcome
order: 1
---

# 欢迎来到Swift

## 语言特点
- 现代特性
- 安全性
- 性能优化
- 互操作性
- 开发效率

## 开发环境
- 工具链
- IDE支持
- 调试功能
- 性能分析
- 部署方案
EOF

# 创建1.2基本语法与数据类型文件
cat > "$BASE_DIR/../swift/第1章-Swift基础/1.2-基本语法与数据类型.md" << 'EOF'
---
title: 基本语法与数据类型
icon: swift-basics
order: 2
---

# 基本语法与数据类型

## 基本语法
- 语法规则
- 代码结构
- 注释规范
- 命名规则
- 代码组织

## 数据类型
- 基本类型
- 复合类型
- 类型推断
- 类型转换
- 类型安全
EOF

# 创建1.3常量与变量文件
cat > "$BASE_DIR/../swift/第1章-Swift基础/1.3-常量与变量.md" << 'EOF'
---
title: 常量与变量
icon: swift-variables
order: 3
---

# 常量与变量

## 基本概念
- 常量定义
- 变量声明
- 类型注解
- 命名规则
- 作用域

## 使用规范
- 声明方式
- 初始化
- 类型推断
- 值修改
- 最佳实践
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建1.4运算符与表达式文件
cat > "$BASE_DIR/第1章-Swift基础/1.4-运算符与表达式.md" << 'EOF'
---
title: 运算符与表达式
icon: operators
order: 4
---

# 运算符与表达式

## 基本运算符
- 算术运算符
- 比较运算符
- 逻辑运算符
- 位运算符
- 赋值运算符

## 表达式
- 基本表达式
- 复合表达式
- 运算符优先级
- 类型转换
- 错误处理

## 最佳实践
- 运算符使用
- 表达式优化
- 代码可读性
- 性能考虑
- 调试技巧
EOF

# 创建1.5字符串与字符文件
cat > "$BASE_DIR/第1章-Swift基础/1.5-字符串与字符.md" << 'EOF'
---
title: 字符串与字符
icon: string-char
order: 5
---

# 字符串与字符

## 基本概念
- 字符串定义
- 字符操作
- Unicode支持
- 字符串索引
- 内存管理

## 字符串操作
- 拼接修改
- 比较搜索
- 子字符串
- 格式化
- 国际化

## 最佳实践
- 性能优化
- 内存管理
- 编码处理
- 安全考虑
- 调试技巧
EOF

# 创建1.6集合类型文件
cat > "$BASE_DIR/第1章-Swift基础/1.6-集合类型.md" << 'EOF'
---
title: 集合类型
icon: collections
order: 6
---

# 集合类型

## 数组
- 创建访问
- 增删改查
- 排序搜索
- 内存管理
- 性能优化

## 字典
- 键值对操作
- 遍历访问
- 更新修改
- 内存管理
- 性能优化

## 集合
- 基本操作
- 集合运算
- 成员关系
- 内存管理
- 性能优化
EOF

# 创建1.7控制流文件
cat > "$BASE_DIR/第1章-Swift基础/1.7-控制流.md" << 'EOF'
---
title: 控制流
icon: control-flow
order: 7
---

# 控制流

## 条件语句
- if语句
- switch语句
- guard语句
- 条件绑定
- 模式匹配

## 循环语句
- for-in循环
- while循环
- repeat-while
- 控制转移
- 标签语句

## 最佳实践
- 代码组织
- 性能优化
- 可读性
- 错误处理
- 调试技巧
EOF

# 创建第2章函数与闭包目录及其README
mkdir -p "$BASE_DIR/第2章-函数与闭包"
cat > "$BASE_DIR/第2章-函数与闭包/README.md" << 'EOF'
---
title: 函数与闭包
icon: functions-closures
order: 2
---

# 函数与闭包

本章介绍Swift中函数和闭包的概念及使用方法。
EOF

# 创建2.1函数文件
cat > "$BASE_DIR/第2章-函数与闭包/2.1-函数.md" << 'EOF'
---
title: 函数
icon: functions
order: 1
---

# 函数

## 基本概念
- 函数定义
- 参数类型
- 返回值
- 函数类型
- 嵌套函数

## 高级特性
- 参数标签
- 默认参数
- 可变参数
- 输入输出参数
- 函数重载

## 最佳实践
- 命名规范
- 参数设计
- 错误处理
- 性能优化
- 代码组织
EOF

# 创建2.2闭包文件
cat > "$BASE_DIR/第2章-函数与闭包/2.2-闭包.md" << 'EOF'
---
title: 闭包
icon: closures
order: 2
---

# 闭包

## 基本概念
- 闭包定义
- 语法结构
- 捕获值
- 逃逸闭包
- 自动闭包

## 使用场景
- 函数式编程
- 异步操作
- 回调处理
- 高阶函数
- 内存管理

## 最佳实践
- 语法简化
- 内存管理
- 性能优化
- 代码组织
- 调试技巧
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建2.3高阶函数文件
cat > "$BASE_DIR/第2章-函数与闭包/2.3-高阶函数.md" << 'EOF'
---
title: 高阶函数
icon: higher-order-functions
order: 3
---

# 高阶函数

## 基本概念
- 函数作为参数
- 函数作为返回值
- 函数组合
- 柯里化
- 部分应用

## 常用高阶函数
- map
- filter
- reduce
- flatMap
- compactMap

## 最佳实践
- 函数式思维
- 代码复用
- 性能优化
- 错误处理
- 调试技巧
EOF

# 创建2.4函数式编程概念文件
cat > "$BASE_DIR/第2章-函数与闭包/2.4-函数式编程概念.md" << 'EOF'
---
title: 函数式编程概念
icon: functional-programming
order: 4
---

# 函数式编程概念

## 基础理论
- 纯函数
- 不可变性
- 副作用
- 引用透明
- 声明式编程

## 实践应用
- 函数组合
- 数据流
- 状态管理
- 并发处理
- 错误处理

## 最佳实践
- 设计模式
- 代码组织
- 性能优化
- 测试策略
- 调试技巧
EOF

# 创建第3章类型系统目录及其README
mkdir -p "$BASE_DIR/第3章-类型系统"
cat > "$BASE_DIR/第3章-类型系统/README.md" << 'EOF'
---
title: 类型系统
icon: type-system
order: 3
---

# 类型系统

本章介绍Swift类型系统的核心概念和使用方法。
EOF

# 创建3.1枚举文件
cat > "$BASE_DIR/第3章-类型系统/3.1-枚举.md" << 'EOF'
---
title: 枚举
icon: enums
order: 1
---

# 枚举

## 基本概念
- 枚举定义
- 关联值
- 原始值
- 递归枚举
- 内存布局

## 使用场景
- 状态管理
- 数据模型
- 模式匹配
- 错误处理
- 类型安全

## 最佳实践
- 设计原则
- 代码组织
- 性能优化
- 内存管理
- 调试技巧
EOF

# 创建3.2结构体和类文件
cat > "$BASE_DIR/第3章-类型系统/3.2-结构体和类.md" << 'EOF'
---
title: 结构体和类
icon: structs-classes
order: 2
---

# 结构体和类

## 基本概念
- 定义语法
- 值类型vs引用类型
- 初始化器
- 继承
- 多态

## 使用场景
- 数据封装
- 对象建模
- 状态管理
- 内存管理
- 性能考虑

## 最佳实践
- 选择标准
- 设计模式
- 性能优化
- 内存管理
- 调试技巧
EOF

# 创建3.3属性文件
cat > "$BASE_DIR/第3章-类型系统/3.3-属性.md" << 'EOF'
---
title: 属性
icon: properties
order: 3
---

# 属性

## 基本概念
- 存储属性
- 计算属性
- 属性观察器
- 类型属性
- 延迟属性

## 使用场景
- 数据封装
- 状态管理
- 访问控制
- 性能优化
- 内存管理

## 最佳实践
- 设计原则
- 代码组织
- 性能优化
- 内存管理
- 调试技巧
EOF

# 创建3.4方法文件
cat > "$BASE_DIR/第3章-类型系统/3.4-方法.md" << 'EOF'
---
title: 方法
icon: methods
order: 4
---

# 方法

## 基本概念
- 实例方法
- 类型方法
- 方法重载
- 方法继承
- 方法调度

## 使用场景
- 行为封装
- 接口设计
- 多态实现
- 扩展功能
- 性能优化

## 最佳实践
- 设计原则
- 代码组织
- 性能优化
- 内存管理
- 调试技巧
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建3.5下标文件
cat > "$BASE_DIR/第3章-类型系统/3.5-下标.md" << 'EOF'
---
title: 下标
icon: subscripts
order: 5
---

# 下标

## 基本概念
- 下标语法
- 读写访问
- 类型约束
- 多维下标
- 默认下标

## 使用场景
- 集合访问
- 序列操作
- 矩阵运算
- 自定义索引
- 性能优化

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 内存管理
- 调试方法
EOF

# 创建3.6继承文件
cat > "$BASE_DIR/第3章-类型系统/3.6-继承.md" << 'EOF'
---
title: 继承
icon: inheritance
order: 6
---

# 继承

## 基本概念
- 继承语法
- 方法重写
- 属性重写
- 初始化继承
- 访问控制

## 使用场景
- 代码复用
- 多态实现
- 框架设计
- 扩展性
- 维护性

## 最佳实践
- 设计原则
- 继承层次
- 性能优化
- 内存管理
- 调试技巧
EOF

# 创建3.7构造过程文件
cat > "$BASE_DIR/第3章-类型系统/3.7-构造过程.md" << 'EOF'
---
title: 构造过程
icon: initialization
order: 7
---

# 构造过程

## 基本概念
- 构造器类型
- 初始化流程
- 构造器委托
- 失败构造器
- 必需构造器

## 实现机制
- 两阶段构造
- 安全检查
- 属性初始化
- 继承关系
- 内存管理

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 错误处理
- 调试方法
EOF

# 创建3.8析构过程文件
cat > "$BASE_DIR/第3章-类型系统/3.8-析构过程.md" << 'EOF'
---
title: 析构过程
icon: deinitialization
order: 8
---

# 析构过程

## 基本概念
- 析构器定义
- 执行时机
- 资源释放
- 继承关系
- 内存管理

## 实现机制
- 析构顺序
- 资源清理
- 循环引用
- 安全考虑
- 性能影响

## 最佳实践
- 设计原则
- 实现技巧
- 内存管理
- 调试方法
- 性能优化
EOF

# 创建3.9类型转换文件
cat > "$BASE_DIR/第3章-类型系统/3.9-类型转换.md" << 'EOF'
---
title: 类型转换
icon: type-casting
order: 9
---

# 类型转换

## 基本概念
- 向上转型
- 向下转型
- 类型检查
- Any和AnyObject
- 类型擦除

## 使用场景
- 多态实现
- 类型安全
- 泛型约束
- 协议遵循
- 错误处理

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 安全考虑
- 调试方法
EOF

# 创建3.10嵌套类型文件
cat > "$BASE_DIR/第3章-类型系统/3.10-嵌套类型.md" << 'EOF'
---
title: 嵌套类型
icon: nested-types
order: 10
---

# 嵌套类型

## 基本概念
- 嵌套定义
- 访问控制
- 类型关系
- 命名空间
- 内存布局

## 使用场景
- 代码组织
- 封装实现
- 命名空间
- 类型关联
- 访问控制

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 内存管理
- 调试方法
EOF

# 创建第4章高级特性目录及其README
mkdir -p "$BASE_DIR/第4章-高级特性"
cat > "$BASE_DIR/第4章-高级特性/README.md" << 'EOF'
---
title: 高级特性
icon: advanced-features
order: 4
---

# 高级特性

本章介绍Swift语言的高级特性和使用技巧。
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建4.1可选链式调用文件
cat > "$BASE_DIR/第4章-高级特性/4.1-可选链式调用.md" << 'EOF'
---
title: 可选链式调用
icon: optional-chaining
order: 1
---

# 可选链式调用

## 基本概念
- 可选链定义
- 链式调用
- 空值处理
- 安全访问
- 性能影响

## 使用场景
- 属性访问
- 方法调用
- 下标操作
- 多层调用
- 错误处理

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 代码简化
- 调试方法
EOF

# 创建4.2错误处理文件
cat > "$BASE_DIR/第4章-高级特性/4.2-错误处理.md" << 'EOF'
---
title: 错误处理
icon: error-handling
order: 2
---

# 错误处理

## 基本概念
- 错误类型
- 抛出错误
- 捕获处理
- 错误传播
- 清理操作

## 实现机制
- 错误定义
- 异常处理
- 资源管理
- 错误恢复
- 性能影响

## 最佳实践
- 错误设计
- 处理策略
- 性能优化
- 调试技巧
- 文档记录
EOF

# 创建4.3并发文件
cat > "$BASE_DIR/第4章-高级特性/4.3-并发.md" << 'EOF'
---
title: 并发
icon: concurrency
order: 3
---

# 并发

## 基本概念
- 线程管理
- 异步操作
- 数据同步
- 锁机制
- 内存模型

## 实现机制
- GCD使用
- Operation
- 并发队列
- 同步控制
- 性能优化

## 最佳实践
- 设计模式
- 实现策略
- 性能优化
- 调试技巧
- 问题排查
EOF

# 创建4.4宏文件
cat > "$BASE_DIR/第4章-高级特性/4.4-宏.md" << 'EOF'
---
title: 宏
icon: macros
order: 4
---

# 宏

## 基本概念
- 宏定义
- 条件编译
- 代码生成
- 编译时处理
- 性能影响

## 使用场景
- 代码复用
- 条件编译
- 调试辅助
- 平台适配
- 性能优化

## 最佳实践
- 设计原则
- 使用规范
- 性能优化
- 调试技巧
- 维护建议
EOF

# 创建4.5泛型文件
cat > "$BASE_DIR/第4章-高级特性/4.5-泛型.md" << 'EOF'
---
title: 泛型
icon: generics
order: 5
---

# 泛型

## 基本概念
- 类型参数
- 泛型约束
- 关联类型
- 类型擦除
- 性能影响

## 使用场景
- 集合类型
- 算法实现
- 接口设计
- 代码复用
- 类型安全

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 调试方法
- 文档规范
EOF

# 创建4.6不透明类型和封装协议类型文件
cat > "$BASE_DIR/第4章-高级特性/4.6-不透明类型和封装协议类型.md" << 'EOF'
---
title: 不透明类型和封装协议类型
icon: opaque-types
order: 6
---

# 不透明类型和封装协议类型

## 基本概念
- 不透明类型
- 协议类型
- 类型封装
- 反向泛型
- 性能影响

## 使用场景
- 接口设计
- 类型抽象
- 实现隐藏
- 性能优化
- 代码组织

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建4.7扩展文件
cat > "$BASE_DIR/第4章-高级特性/4.7-扩展.md" << 'EOF'
---
title: 扩展
icon: extensions
order: 7
---

# 扩展

## 基本概念
- 扩展定义
- 计算属性
- 方法添加
- 协议遵循
- 嵌套类型

## 使用场景
- 功能扩展
- 代码组织
- 协议实现
- 类型适配
- 代码复用

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 调试方法
- 维护建议
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建4.8协议文件
cat > "$BASE_DIR/第4章-高级特性/4.8-协议.md" << 'EOF'
---
title: 协议
icon: protocols
order: 8
---

# 协议

## 基本概念
- 协议定义
- 属性要求
- 方法要求
- 初始化器要求
- 协议组合

## 使用场景
- 接口设计
- 多态实现
- 依赖注入
- 代码复用
- 类型抽象

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建4.9自动引用计数文件
cat > "$BASE_DIR/第4章-高级特性/4.9-自动引用计数.md" << 'EOF'
---
title: 自动引用计数
icon: arc
order: 9
---

# 自动引用计数

## 基本概念
- ARC原理
- 强引用
- 弱引用
- 无主引用
- 循环引用

## 内存管理
- 引用计数
- 内存分配
- 资源释放
- 循环打破
- 性能优化

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 调试方法
- 内存泄漏预防
EOF

# 创建4.10内存安全文件
cat > "$BASE_DIR/第4章-高级特性/4.10-内存安全.md" << 'EOF'
---
title: 内存安全
icon: memory-safety
order: 10
---

# 内存安全

## 基本概念
- 内存访问
- 内存管理
- 线程安全
- 数据竞争
- 内存模型

## 安全机制
- 访问控制
- 边界检查
- 类型安全
- 并发安全
- 内存隔离

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 调试方法
- 安全审计
EOF

# 创建4.11访问控制文件
cat > "$BASE_DIR/第4章-高级特性/4.11-访问控制.md" << 'EOF'
---
title: 访问控制
icon: access-control
order: 11
---

# 访问控制

## 基本概念
- 访问级别
- 模块化
- 封装性
- 继承规则
- 协议遵循

## 使用场景
- 接口设计
- 模块化
- 安全控制
- 代码组织
- 框架设计

## 最佳实践
- 设计原则
- 实现技巧
- 安全考虑
- 调试方法
- 维护建议
EOF

# 创建4.12高级运算符文件
cat > "$BASE_DIR/第4章-高级特性/4.12-高级运算符.md" << 'EOF'
---
title: 高级运算符
icon: advanced-operators
order: 12
---

# 高级运算符

## 基本概念
- 位运算符
- 溢出运算符
- 自定义运算符
- 运算符重载
- 优先级规则

## 使用场景
- 数值计算
- 位操作
- 自定义类型
- 运算符扩展
- 性能优化

## 最佳实践
- 设计原则
- 实现技巧
- 性能优化
- 调试方法
- 维护建议
EOF

# 创建第5章Swift生态系统目录及其README
mkdir -p "$BASE_DIR/第5章-Swift生态系统"
cat > "$BASE_DIR/第5章-Swift生态系统/README.md" << 'EOF'
---
title: Swift生态系统
icon: swift-ecosystem
order: 5
---

# Swift生态系统

本章介绍Swift生态系统中的重要组件和开发框架。
EOF

# 创建5.1SwiftUI开发文件
cat > "$BASE_DIR/第5章-Swift生态系统/5.1-SwiftUI开发.md" << 'EOF'
---
title: SwiftUI开发
icon: swiftui
order: 1
---

# SwiftUI开发

## 基本概念
- 声明式UI
- 视图结构
- 数据流
- 状态管理
- 生命周期

## 核心组件
- 基础控件
- 布局系统
- 动画系统
- 手势识别
- 数据绑定

## 最佳实践
- 架构设计
- 性能优化
- 代码组织
- 调试技巧
- 测试策略
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建5.2Combine框架文件
cat > "$BASE_DIR/第5章-Swift生态系统/5.2-Combine框架.md" << 'EOF'
---
title: Combine框架
icon: combine
order: 2
---

# Combine框架

## 基本概念
- 响应式编程
- 发布者订阅者
- 操作符
- 调度器
- 错误处理

## 核心组件
- Publisher
- Subscriber
- Subscription
- Operators
- Schedulers

## 最佳实践
- 异步处理
- 数据流管理
- 内存管理
- 错误处理
- 性能优化
EOF

# 创建5.3SwiftPackageManager文件
cat > "$BASE_DIR/第5章-Swift生态系统/5.3-SwiftPackageManager.md" << 'EOF'
---
title: Swift Package Manager
icon: spm
order: 3
---

# Swift Package Manager

## 基本概念
- 包管理
- 依赖解析
- 版本控制
- 构建系统
- 模块化

## 使用方法
- 包创建
- 依赖管理
- 版本控制
- 构建配置
- 发布部署

## 最佳实践
- 项目组织
- 依赖管理
- 版本控制
- 构建优化
- 团队协作
EOF

# 创建5.4Swift与Objective-C互操作文件
cat > "$BASE_DIR/第5章-Swift生态系统/5.4-Swift与Objective-C互操作.md" << 'EOF'
---
title: Swift与Objective-C互操作
icon: interop
order: 4
---

# Swift与Objective-C互操作

## 基本概念
- 桥接原理
- 类型映射
- 命名规则
- 内存管理
- 异常处理

## 互操作机制
- 混编设置
- 类型转换
- 方法调用
- 属性访问
- 协议遵循

## 最佳实践
- 代码组织
- 性能优化
- 内存管理
- 调试技巧
- 迁移策略
EOF

# 创建5.5SwiftonServer文件
cat > "$BASE_DIR/第5章-Swift生态系统/5.5-SwiftonServer.md" << 'EOF'
---
title: Swift on Server
icon: server-side
order: 5
---

# Swift on Server

## 基本概念
- 服务端Swift
- Web框架
- 性能特性
- 并发模型
- 生态系统

## 开发框架
- Vapor
- Kitura
- Perfect
- 性能优化
- 部署策略

## 最佳实践
- 架构设计
- 性能优化
- 安全考虑
- 部署运维
- 监控调试
EOF

# 创建第6章实战与最佳实践目录及其README
mkdir -p "$BASE_DIR/第6章-实战与最佳实践"
cat > "$BASE_DIR/第6章-实战与最佳实践/README.md" << 'EOF'
---
title: 实战与最佳实践
icon: best-practices
order: 6
---

# 实战与最佳实践

本章介绍Swift开发中的实战经验和最佳实践。
EOF

# 创建6.1Swift设计模式文件
cat > "$BASE_DIR/第6章-实战与最佳实践/6.1-Swift设计模式.md" << 'EOF'
---
title: Swift设计模式
icon: design-patterns
order: 1
---

# Swift设计模式

## 创建型模式
- 单例模式
- 工厂模式
- 建造者模式
- 原型模式
- 抽象工厂

## 结构型模式
- 适配器模式
- 桥接模式
- 组合模式
- 装饰器模式
- 外观模式

## 行为型模式
- 观察者模式
- 策略模式
- 命令模式
- 状态模式
- 模板方法
EOF

# 创建6.2函数式编程实践文件
cat > "$BASE_DIR/第6章-实战与最佳实践/6.2-函数式编程实践.md" << 'EOF'
---
title: 函数式编程实践
icon: functional
order: 2
---

# 函数式编程实践

## 基本概念
- 纯函数
- 不可变性
- 高阶函数
- 函数组合
- 副作用管理

## 实践技巧
- 函数式设计
- 状态管理
- 错误处理
- 并发处理
- 测试策略

## 最佳实践
- 代码组织
- 性能优化
- 调试技巧
- 测试方法
- 维护策略
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建6.3性能优化技巧文件
cat > "$BASE_DIR/第6章-实战与最佳实践/6.3-性能优化技巧.md" << 'EOF'
---
title: 性能优化技巧
icon: performance
order: 3
---

# 性能优化技巧

## 内存优化
- 内存分配
- 引用计数
- 内存泄漏
- 循环引用
- 缓存策略

## 算法优化
- 数据结构
- 时间复杂度
- 空间复杂度
- 并发优化
- 缓存利用

## 编译优化
- 编译选项
- 代码生成
- 链接优化
- 静态分析
- 优化标记
EOF

# 创建6.4测试与调试文件
cat > "$BASE_DIR/第6章-实战与最佳实践/6.4-测试与调试.md" << 'EOF'
---
title: 测试与调试
icon: testing-debugging
order: 4
---

# 测试与调试

## 单元测试
- 测试框架
- 测试用例
- 模拟对象
- 测试覆盖
- 性能测试

## 调试技巧
- 断点使用
- 日志分析
- 内存分析
- 性能分析
- 崩溃分析

## 持续集成
- CI/CD流程
- 自动化测试
- 代码质量
- 部署策略
- 监控反馈
EOF

# 创建6.5代码规范与风格指南文件
cat > "$BASE_DIR/第6章-实战与最佳实践/6.5-代码规范与风格指南.md" << 'EOF'
---
title: 代码规范与风格指南
icon: code-style
order: 5
---

# 代码规范与风格指南

## 命名规范
- 变量命名
- 函数命名
- 类型命名
- 协议命名
- 文件组织

## 代码组织
- 文件结构
- 代码分层
- 注释规范
- 文档生成
- 版本控制

## 最佳实践
- 代码审查
- 重构原则
- 性能考虑
- 安全规范
- 团队协作
EOF

# 创建第7章高级主题目录及其README
mkdir -p "$BASE_DIR/第7章-高级主题"
cat > "$BASE_DIR/第7章-高级主题/README.md" << 'EOF'
---
title: 高级主题
icon: advanced-topics
order: 7
---

# 高级主题

本章深入探讨Swift语言的高级特性和实现原理。
EOF

# 创建7.1Swift并发编程深入文件
cat > "$BASE_DIR/第7章-高级主题/7.1-Swift并发编程深入.md" << 'EOF'
---
title: Swift并发编程深入
icon: concurrency
order: 1
---

# Swift并发编程深入

## 并发模型
- Actor模型
- 结构化并发
- 异步函数
- 任务管理
- 错误处理

## 内存模型
- 内存屏障
- 原子操作
- 内存排序
- 数据竞争
- 死锁预防

## 性能优化
- 线程调度
- 资源管理
- 负载均衡
- 性能监控
- 调试技巧
EOF

# 创建7.2Swift元编程文件
cat > "$BASE_DIR/第7章-高级主题/7.2-Swift元编程.md" << 'EOF'
---
title: Swift元编程
icon: metaprogramming
order: 2
---

# Swift元编程

## 反射机制
- 类型反射
- 属性镜像
- 方法调用
- 动态创建
- 运行时信息

## 代码生成
- 宏系统
- 源代码生成
- 编译时处理
- 注解处理
- 代码转换

## 最佳实践
- 性能考虑
- 安全限制
- 调试技巧
- 应用场景
- 维护建议
EOF

# 创建7.3底层实现原理文件
cat > "$BASE_DIR/第7章-高级主题/7.3-底层实现原理.md" << 'EOF'
---
title: 底层实现原理
icon: implementation
order: 3
---

# 底层实现原理

## 运行时系统
- 对象模型
- 消息传递
- 方法调度
- 内存管理
- 异常处理

## 编译系统
- 编译流程
- 优化策略
- 代码生成
- 链接过程
- 调试信息

## 性能特性
- 内存布局
- 调用约定
- 指针优化
- 内联优化
- 静态分析
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建7.4Swift演进历史与版本特性文件
cat > "$BASE_DIR/第7章-高级主题/7.4-Swift演进历史与版本特性.md" << 'EOF'
---
title: Swift演进历史与版本特性
icon: swift-history
order: 4
---

# Swift演进历史与版本特性

## 早期版本
- Swift 1.0
- Swift 2.0
- 主要特性
- 语言改进
- 工具链演进

## 现代特性
- Swift 3.0
- Swift 4.0
- Swift 5.0
- ABI稳定性
- 模块稳定性

## 最新发展
- 并发特性
- 泛型改进
- 宏系统
- 性能优化
- 工具链增强
EOF

# 创建7.5Swift与LLVM文件
cat > "$BASE_DIR/第7章-高级主题/7.5-Swift与LLVM.md" << 'EOF'
---
title: Swift与LLVM
icon: llvm
order: 5
---

# Swift与LLVM

## 编译流程
- 词法分析
- 语法分析
- IR生成
- 优化过程
- 代码生成

## LLVM集成
- 前端实现
- 中间表示
- 后端优化
- 目标代码
- 调试支持

## 性能优化
- 编译优化
- 链接优化
- 运行时优化
- 内存优化
- 代码生成
EOF

# 创建第8章应用场景目录及其README
mkdir -p "$BASE_DIR/第8章-应用场景"
cat > "$BASE_DIR/第8章-应用场景/README.md" << 'EOF'
---
title: 应用场景
icon: applications
order: 8
---

# 应用场景

本章介绍Swift在不同平台上的应用开发实践。
EOF

# 创建8.1iOS/iPadOS应用开发文件
cat > "$BASE_DIR/第8章-应用场景/8.1-iOS与iPadOS应用开发.md" << 'EOF'
---
title: iOS与iPadOS应用开发
icon: ios-dev
order: 1
---

# iOS与iPadOS应用开发

## 基础框架
- UIKit
- SwiftUI
- Foundation
- Core Data
- Core Graphics

## 开发实践
- 界面设计
- 数据管理
- 网络通信
- 性能优化
- 调试部署

## 最佳实践
- 架构设计
- 代码组织
- 性能优化
- 安全考虑
- 发布流程
EOF

# 创建8.2macOS应用开发文件
cat > "$BASE_DIR/第8章-应用场景/8.2-macOS应用开发.md" << 'EOF'
---
title: macOS应用开发
icon: macos-dev
order: 2
---

# macOS应用开发

## 基础框架
- AppKit
- SwiftUI
- Foundation
- Core Data
- Core Graphics

## 开发实践
- 界面设计
- 数据管理
- 系统集成
- 性能优化
- 调试部署

## 最佳实践
- 架构设计
- 代码组织
- 性能优化
- 安全考虑
- 发布流程
EOF

# 创建8.3watchOS与tvOS开发文件
cat > "$BASE_DIR/第8章-应用场景/8.3-watchOS与tvOS开发.md" << 'EOF'
---
title: watchOS与tvOS开发
icon: watch-tv-dev
order: 3
---

# watchOS与tvOS开发

## watchOS开发
- WatchKit
- 界面设计
- 数据同步
- 性能优化
- 电池管理

## tvOS开发
- TVML
- TVUIKit
- 界面交互
- 媒体处理
- 性能优化

## 最佳实践
- 架构设计
- 代码组织
- 性能优化
- 用户体验
- 发布流程
EOF

# 创建8.4跨平台Swift应用文件
cat > "$BASE_DIR/第8章-应用场景/8.4-跨平台Swift应用.md" << 'EOF'
---
title: 跨平台Swift应用
icon: cross-platform
order: 4
---

# 跨平台Swift应用

## 技术选型
- 框架选择
- 代码共享
- 平台差异
- 性能考虑
- 维护策略

## 开发实践
- 架构设计
- 代码组织
- 平台适配
- 性能优化
- 测试策略

## 最佳实践
- 项目管理
- 代码复用
- 性能优化
- 部署策略
- 维护更新
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建第9章语言参考目录及其README
mkdir -p "$BASE_DIR/第9章-语言参考"
cat > "$BASE_DIR/第9章-语言参考/README.md" << 'EOF'
---
title: 语言参考
icon: language-reference
order: 9
---

# 语言参考

本章提供Swift语言的完整参考文档。
EOF

# 创建9.1关于语言参考文件
cat > "$BASE_DIR/第9章-语言参考/9.1-关于语言参考.md" << 'EOF'
---
title: 关于语言参考
icon: about-reference
order: 1
---

# 关于语言参考

## 文档结构
- 组织方式
- 使用说明
- 约定规范
- 示例说明
- 版本信息

## 使用指南
- 查找方法
- 交叉引用
- 版本对应
- 实践建议
- 更新说明
EOF

# 创建9.2词法结构文件
cat > "$BASE_DIR/第9章-语言参考/9.2-词法结构.md" << 'EOF'
---
title: 词法结构
icon: lexical-structure
order: 2
---

# 词法结构

## 基本元素
- 空白与注释
- 标识符
- 关键字
- 字面量
- 运算符

## 语法规则
- 词法分析
- 标记规则
- 特殊字符
- 转义序列
- 源文件结构
EOF

# 创建9.3类型文件
cat > "$BASE_DIR/第9章-语言参考/9.3-类型.md" << 'EOF'
---
title: 类型
icon: types
order: 3
---

# 类型

## 类型系统
- 基本类型
- 复合类型
- 类型推断
- 类型转换
- 类型检查

## 类型特性
- 值类型
- 引用类型
- 可选类型
- 集合类型
- 协议类型
EOF

# 创建9.4表达式文件
cat > "$BASE_DIR/第9章-语言参考/9.4-表达式.md" << 'EOF'
---
title: 表达式
icon: expressions
order: 4
---

# 表达式

## 基本表达式
- 字面量
- 运算符
- 函数调用
- 成员访问
- 闭包表达式

## 高级表达式
- 条件表达式
- 类型检查
- 模式匹配
- 键路径
- 选择器表达式
EOF

# 创建9.5声明文件
cat > "$BASE_DIR/第9章-语言参考/9.5-声明.md" << 'EOF'
---
title: 声明
icon: declarations
order: 5
---

# 声明

## 基本声明
- 变量声明
- 常量声明
- 函数声明
- 类型声明
- 协议声明

## 高级声明
- 泛型声明
- 运算符声明
- 属性声明
- 扩展声明
- 访问控制
EOF

# 创建9.6特性文件
cat > "$BASE_DIR/第9章-语言参考/9.6-特性.md" << 'EOF'
---
title: 特性
icon: attributes
order: 6
---

# 特性

## 声明特性
- 访问控制
- 可用性
- 动态成员查找
- 代码优化
- 运行时检查

## 类型特性
- 类型推断
- 类型擦除
- 类型约束
- 类型转换
- 类型元数据
EOF
BASE_DIR="c:\project\kphub\src\swift"

# 创建9.7模式文件
cat > "$BASE_DIR/第9章-语言参考/9.7-模式.md" << 'EOF'
---
title: 模式
icon: patterns
order: 7
---

# 模式

## 基本模式
- 通配符模式
- 标识符模式
- 值绑定模式
- 元组模式
- 枚举模式

## 高级模式
- 类型转换模式
- 表达式模式
- 可选模式
- 结构体模式
- 数组模式

## 使用场景
- 模式匹配
- 解构赋值
- 错误处理
- 类型检查
- 数据提取
EOF

# 创建9.8语法总结文件
cat > "$BASE_DIR/第9章-语言参考/9.8-语法总结.md" << 'EOF'
---
title: 语法总结
icon: syntax-summary
order: 8
---

# 语法总结

## 语言基础
- 词法规则
- 类型系统
- 表达式
- 语句
- 声明

## 高级特性
- 泛型语法
- 协议语法
- 运算符语法
- 属性语法
- 模块语法

## 最佳实践
- 语法规范
- 代码风格
- 性能考虑
- 调试技巧
- 文档规范
EOF