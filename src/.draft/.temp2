
### 第1章 流
1.1 从迭代到流的操作  
1.2 流的创建  
1.3 filter、map 和 flatMap 方法  
1.4 抽取子流和组合流  
1.5 其他的流转换  
1.6 简单约简  
1.7 Optional 类型  
1.7.1 获取 Optional 值  
1.7.2 消费 Optional 值  
1.7.3 管道化 Optional 值  
1.7.4 不适合使用 Optional 值的方式  
1.7.5 创建 Optional 值 17  
1.7.6 用 flatMap 构建 Optional 值的函数  
1.7.7 将 Optional 转换为流  
1.8 收集结果  
1.9 收集到映射表中  
1.10 群组和分区  
1.11 下游收集器  
1.12 约简操作  
1.13 基本类型流  
1.14 并行流  

### 第2章 输入与输出
2.1 输入 / 输出流  
2.1.1 读写字节  
2.1.2 完整的流家族  
2.1.3 组合输入 / 输出流过滤器  
2.1.4 文本输入与输出  
2.1.5 如何写出文本输出  
2.1.6 如何读入文本输入  
2.1.7 以文本格式存储对象  
2.1.8 字符编码方式  
2.2 读写二进制数据  
2.2.1 DataInput 和 DataOutput 接口  
2.2.2 随机访问文件  
2.2.3 ZIP 文档  
2.3 对象输入 / 输出流与序列化  
2.3.1 保存和加载序列化对象  
2.3.2 理解对象序列化的文件格式  
2.3.3 修改默认的序列化机制  
2.3.4 readResolve 和 writeReplace 方法  
2.3.5 版本管理  
2.3.6 为克隆使用序列化  
2.3.7 反序列化和安全  
2.4 操作文件  
2.4.1 Path  
2.4.2 读写文件  
2.4.3 创建文件和目录  
2.4.4 复制、移动和删除文件  
2.4.5 获取文件信息  
2.4.6 访问目录中的项  
2.4.7 使用目录流  
2.4.8 ZIP 文件系统  
2.5 内存映射文件  
2.5.1 内存映射文件的性能  
2.5.2 缓冲区数据结构  
2.6 文件加锁机制  
2.7 正则表达式  
2.7.1 正则表达式语法  
2.7.2 匹配整个字符串  
2.7.3 找出字符串中的所有匹配  
2.7.4 群组  
2.7.5 用分隔符来分割  
2.7.6 替换匹配  
2.7.7 标志  

### 第3章 XML
3.1 XML 概述  
3.2 XML 文档的结构  
3.3 解析 XML 文档  
3.4 验证 XML 文档  
3.4.1 文档类型定义  
3.4.2 XML Schema  
3.4.3 一个实践示例  
3.5 使用 XPath 来定位信息  
3.6 使用命名空间  
3.7 流机制解析器  
3.7.1 使用 SAX 解析器  
3.7.2 使用 StAX 解析器  
3.8 生成 XML 文档  
3.8.1 不带命名空间的文档  
3.8.2 带命名空间的文档  
3.8.3 写出文档  
3.8.4 使用 StAX 写出 XML 文档  
3.8.5 示例：生成 SVG 文件  
3.9 XSL 转换  

### 第4章 网络
4.1 连接到服务器  
4.1.1 使用 telnet  
4.1.2 用 Java 连接到服务器  
4.1.3 套接字超时  
4.1.4 因特网地址  
4.2 实现服务器  
4.2.1 服务器套接字  
4.2.2 为多个客户端服务  
4.2.3 半关闭  
4.2.4 可中断套接字  
4.3 获取 Web 数据  
4.3.1 URL 和 URI  
4.3.2 使用 URLConnection 获取信息  
4.3.3 提交表单数据  
4.4 HTTP 客户端  
4.4.1 HttpClient 类  
4.4.2 HttpRequest 类和体发布器  
4.4.3 HttpResponse 接口和体处理器  
4.4.4 异步处理  
4.5 发送 E-mail  

### 第5章 数据库编程
5.1 JDBC 的设计  
5.1.1 JDBC 驱动程序类型  
5.1.2 JDBC 的典型用法  
5.2 结构化查询语言  
5.3 JDBC 配置  
5.3.1 数据库 URL  
5.3.2 驱动程序 JAR 文件  
5.3.3 启动数据库  
5.3.4 注册驱动器类  
5.3.5 连接到数据库  
5.4 使用 JDBC 语句  
5.4.1 执行 SQL 语句  
5.4.2 管理连接、语句和结果集  
5.4.3 分析 SQL 异常  
5.4.4 组装数据库  
5.5 执行查询操作  
5.5.1 预备语句  
5.5.2 读写 LOB  
5.5.3 SQL 转义  
5.5.4 多结果集  
5.5.5 获取自动生成的键  
5.6 可滚动和可更新的结果集  
5.6.1 可滚动的结果集  
5.6.2 可更新的结果集  
5.7 行集  
5.7.1 构建行集  
5.7.2 被缓存的行集  
5.8 元数据  
5.9 事务  
5.9.1 用 JDBC 对事务编程  
5.9.2 保存点  
5.9.3 批量更新  
5.9.4 高级 SQL 类型  
5.10 Web 与企业应用中的连接管理  

### 第6章 日期和时间 API
6.1 时间线  
6.2 本地日期  
6.3 日期调整器  
6.4 本地时间  
6.5 时区时间  
6.6 格式化和解析  
6.7 与遗留代码的互操作  

### 第7章 国际化
7.1 locale  
7.1.1 为什么需要 locale  
7.1.2 指定 locale  
7.1.3 默认 locale  
7.1.4 显示名字  
7.2 数字格式  
7.2.1 格式化数字值  
7.2.2 DecimalFormat 类  
7.2.3 货币  
7.3 日期和时间  
7.4 排序和规范化  
7.5 消息格式化  
7.5.1 格式化数字和日期  
7.5.2 选择格式  
7.6 文本输入和输出  
7.6.1 文本文件  
7.6.2 行结束符  
7.6.3 控制台  
7.6.4 日志文件  
7.6.5 UTF-8 字节顺序标志  
7.6.6 源文件的字符编码  
7.7 资源包  
7.7.1 定位资源包  
7.7.2 属性文件  
7.7.3 包类  
7.8 一个完整的例子  

### 第8章 脚本、编译与注解处理
8.1 Java 平台的脚本机制  
8.1.1 获取脚本引擎  
8.1.2 脚本计算与绑定  
8.1.3 重定向输入和输出  
8.1.4 调用脚本的函数和方法  
8.1.5 编译脚本  
8.1.6 示例：用脚本处理 GUI 事件  
8.2 编译器 API  
8.2.1 调用编译器  
8.2.2 发起编译任务  
8.2.3 捕获诊断消息  
8.2.4 从内存中读取源文件  
8.2.5 将字节码写出到内存中  
8.2.6 示例：动态 Java 代码生成  
8.3 使用注解  
8.3.1 注解简介  
8.3.2 示例：注解事件处理器  
8.4 注解语法  
8.4.1 注解接口  
8.4.2 注解  
8.4.3 注解各类声明  
8.4.4 注解类型用法  
8.4.5 注解 this  
8.5 标准注解  
8.5.1 用于编译的注解  
8.5.2 元注解  
8.6 源码级注解处理  
8.6.1 注解处理器  
8.6.2 语言模型 API  
8.6.3 使用注解来生成源码  
8.7 字节码工程  
8.7.1 修改类文件  
8.7.2 在加载时修改字节码  

### 第9章 Java平台模块系统
9.1 模块的概念  
9.2 对模块命名  
9.3 模块化的 “Hello, World!” 程序  
9.4 对模块的需求  
9.5 导出包  
9.6 模块化的 JAR  
9.7 模块和反射式访问  
9.8 自动模块  
9.9 不具名模块  
9.10 用于迁移的命令行标识  
9.11 传递的需求和静态的需求  
9.12 限定导出和开放  
9.13 服务加载  
9.14 操作模块的工具  

### 第10章 安全
10.1 类加载器  
10.1.1 类加载过程  
10.1.2 类加载器的层次结构  
10.1.3 将类加载器用作命名空间  
10.1.4 编写你自己的类加载器  
10.1.5 字节码校验  
10.2 用户认证  
10.2.1 JAAS 框架  
10.2.2 JAAS 登录模块  
10.3 数字签名  
10.3.1 消息摘要  
10.3.2 消息签名  
10.3.3 校验签名  
10.3.4 认证问题  
10.3.5 证书签名  
10.3.6 证书请求  
10.3.7 代码签名  
10.4 加密  
10.4.1 对称密码  
10.4.2 密钥生成  
10.4.3 密码流  
10.4.4 公开密钥密码  

第11章 本地方法
11.1 从 Java 程序中调用 C 函数
11.2 数值参数与返回值
11.3 字符串参数
11.4 访问域
11.4.1 访问实例域
11.4.2 访问静态域
11.5 编码签名
11.6 调用 Java 方法
11.6.1 实例方法
11.6.2 静态方法
11.6.3 构造器
11.6.4 另一种方法调用
11.7 访问数组元素
11.8 错误处理
11.9 使用调用 API
11.10 完整的示例：访问 Windows 注册表
11.10.1 Windows 注册表概述
11.10.2 访问注册表的 Java 平台接口
11.10.3 以本地方法实现注册表访问函数
11.11 外部函数：展望未来