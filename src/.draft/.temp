# TypeScript 知识库

## 第1章 TypeScript 基础
1.1 TypeScript 简介
   1.1.1 什么是 TypeScript
   1.1.2 TypeScript 与 JavaScript 的关系
   1.1.3 TypeScript 的优势与应用场景
1.2 开发环境搭建
   1.2.1 安装 TypeScript
   1.2.2 编辑器配置（VS Code/WebStorm）
   1.2.3 TypeScript 编译器（tsc）
   1.2.4 5分钟上手 TypeScript
1.3 基础类型
   1.3.1 布尔值、数字和字符串
   1.3.2 数组和元组
   1.3.3 枚举
   1.3.4 any、unknown 和 void
   1.3.5 null 和 undefined
   1.3.6 never 类型
   1.3.7 object 类型
1.4 变量声明
   1.4.1 var 声明
   1.4.2 let 声明
   1.4.3 const 声明
   1.4.4 解构赋值
   1.4.5 展开运算符

## 第2章 TypeScript 类型系统
2.1 接口
   2.1.1 接口基础
   2.1.2 可选属性与只读属性
   2.1.3 函数类型接口
   2.1.4 索引签名
   2.1.5 类类型接口
   2.1.6 接口继承
   2.1.7 混合类型接口
   2.1.8 接口与类型别名的区别
2.2 类
   2.2.1 类的基本语法
   2.2.2 继承
   2.2.3 公共、私有与受保护的修饰符
   2.2.4 readonly 修饰符
   2.2.5 存取器
   2.2.6 静态属性
   2.2.7 抽象类
   2.2.8 类与接口结合
2.3 函数
   2.3.1 函数类型
   2.3.2 可选参数和默认参数
   2.3.3 剩余参数
   2.3.4 函数重载
   2.3.5 this 参数
   2.3.6 箭头函数与 this
2.4 泛型
   2.4.1 泛型基础
   2.4.2 泛型函数
   2.4.3 泛型接口
   2.4.4 泛型类
   2.4.5 泛型约束
   2.4.6 泛型参数默认值
   2.4.7 泛型条件类型
   2.4.8 实用泛型工具类型
2.5 高级类型
   2.5.1 交叉类型
   2.5.2 联合类型
   2.5.3 类型保护与区分类型
   2.5.4 类型别名
   2.5.5 字面量类型
   2.5.6 可辨识联合
   2.5.7 索引类型
   2.5.8 映射类型
   2.5.9 条件类型
   2.5.10 infer 关键字

## 第3章 TypeScript 模块与命名空间
3.1 模块
   3.1.1 导出
   3.1.2 导入
   3.1.3 默认导出
   3.1.4 重新导出
   3.1.5 动态导入
3.2 命名空间
   3.2.1 命名空间基础
   3.2.2 嵌套命名空间
   3.2.3 命名空间别名
   3.2.4 多文件中的命名空间
3.3 命名空间与模块
   3.3.1 命名空间和模块的区别
   3.3.2 何时使用命名空间
   3.3.3 何时使用模块
3.4 模块解析
   3.4.1 相对与非相对模块导入
   3.4.2 模块解析策略
   3.4.3 路径映射
   3.4.4 解析 JSON 模块
   3.4.5 解决模块解析问题

## 第4章 TypeScript 声明文件
4.1 声明文件介绍
   4.1.1 什么是声明文件
   4.1.2 声明文件的作用
   4.1.3 .d.ts 文件
4.2 声明文件结构
   4.2.1 全局变量
   4.2.2 全局函数
   4.2.3 带属性的对象
   4.2.4 函数重载
   4.2.5 可索引类型
   4.2.6 类类型
   4.2.7 命名空间
4.3 编写声明文件
   4.3.1 全局库
   4.3.2 模块库
   4.3.3 UMD 库
   4.3.4 模块插件
   4.3.5 全局插件
4.4 使用声明文件
   4.4.1 使用 @types
   4.4.2 查找声明文件
   4.4.3 自动生成声明文件
   4.4.4 发布声明文件
   4.4.5 声明文件最佳实践

## 第5章 TypeScript 高级特性
5.1 装饰器
   5.1.1 装饰器基础
   5.1.2 类装饰器
   5.1.3 方法装饰器
   5.1.4 访问器装饰器
   5.1.5 属性装饰器
   5.1.6 参数装饰器
   5.1.7 装饰器工厂
   5.1.8 装饰器组合
5.2 Mixins
   5.2.1 Mixin 模式
   5.2.2 构造函数的类型
   5.2.3 实现 Mixin
   5.2.4 约束 Mixin
5.3 三斜线指令
   5.3.1 /// <reference path="..." />
   5.3.2 /// <reference types="..." />
   5.3.3 /// <reference lib="..." />
   5.3.4 /// <amd-module />
   5.3.5 /// <amd-dependency />
5.4 Symbols
   5.4.1 Symbol 基础
   5.4.2 唯一性与描述
   5.4.3 内置 Symbols
   5.4.4 Symbol 作为属性键
5.5 迭代器和生成器
   5.5.1 可迭代性
   5.5.2 for..of 语句
   5.5.3 迭代器接口
   5.5.4 生成器函数
   5.5.5 异步迭代器

## 第6章 TypeScript 项目配置
6.1 tsconfig.json
   6.1.1 文件结构
   6.1.2 常用配置选项
   6.1.3 extends 配置继承
   6.1.4 文件包含与排除
6.2 编译选项详解
   6.2.1 基本选项
   6.2.2 严格类型检查选项
   6.2.3 模块解析选项
   6.2.4 源映射选项
   6.2.5 实验性选项
6.3 项目引用
   6.3.1 项目引用基础
   6.3.2 复合项目
   6.3.3 构建模式
   6.3.4 项目引用的最佳实践
6.4 构建工具集成
   6.4.1 Webpack 集成
   6.4.2 Rollup 集成
   6.4.3 Gulp 集成
   6.4.4 Babel 集成
   6.4.5 ESLint 集成

## 第7章 TypeScript 与框架集成
7.1 TypeScript 与 React
   7.1.1 创建 React + TypeScript 项目
   7.1.2 组件类型定义
   7.1.3 Props 与 State 类型
   7.1.4 事件处理
   7.1.5 Hooks 类型定义
   7.1.6 高阶组件类型
   7.1.7 Context API 类型
   7.1.8 Redux 与 TypeScript
7.2 TypeScript 与 Vue
   7.2.1 Vue 3 与 TypeScript
   7.2.2 组件定义
   7.2.3 Props 类型
   7.2.4 Composition API 类型
   7.2.5 Vuex 与 TypeScript
7.3 TypeScript 与 Angular
   7.3.1 Angular 中的 TypeScript
   7.3.2 组件与服务类型
   7.3.3 依赖注入类型
   7.3.4 RxJS 与 TypeScript
7.4 TypeScript 与 Node.js
   7.4.1 Node.js 项目配置
   7.4.2 Express 与 TypeScript
   7.4.3 NestJS 框架
   7.4.4 TypeORM 与数据库交互

## 第8章 TypeScript 最佳实践
8.1 类型设计原则
   8.1.1 类型优先设计
   8.1.2 接口与类型别名选择
   8.1.3 泛型设计模式
   8.1.4 类型安全的 API 设计
8.2 代码组织
   8.2.1 目录结构
   8.2.2 模块化设计
   8.2.3 barrel 文件
   8.2.4 类型定义文件组织
8.3 错误处理
   8.3.1 类型化错误
   8.3.2 异常处理模式
   8.3.3 Result 类型模式
   8.3.4 可空类型处理
8.4 性能优化
   8.4.1 类型系统性能考量
   8.4.2 编译性能优化
   8.4.3 类型检查优化
   8.4.4 增量编译
8.5 迁移策略
   8.5.1 JavaScript 到 TypeScript 渐进式迁移
   8.5.2 any 类型的合理使用
   8.5.3 严格模式迁移
   8.5.4 遗留代码处理

## 第9章 TypeScript 高级模式与技巧
9.1 类型体操
   9.1.1 递归类型
   9.1.2 分布式条件类型
   9.1.3 类型推导与提取
   9.1.4 高级映射类型
   9.1.5 模板字面量类型
9.2 函数式编程
   9.2.1 函数式编程基础
   9.2.2 高阶函数类型
   9.2.3 函数组合
   9.2.4 不可变数据结构
   9.2.5 函数式库与 TypeScript
9.3 设计模式
   9.3.1 单例模式
   9.3.2 工厂模式
   9.3.3 观察者模式
   9.3.4 策略模式
   9.3.5 装饰器模式
9.4 测试
   9.4.1 单元测试
   9.4.2 Jest 与 TypeScript
   9.4.3 类型测试
   9.4.4 模拟与存根类型
9.5 工具类型实现
   9.5.1 Partial 实现
   9.5.2 Required 实现
   9.5.3 Pick 与 Omit 实现
   9.5.4 ReturnType 实现
   9.5.5 自定义工具类型

## 第10章 TypeScript 生态系统
10.1 类型定义仓库
   10.1.1 DefinitelyTyped
   10.1.2 @types 包
   10.1.3 贡献类型定义
10.2 TypeScript 工具
   10.2.1 ts-node
   10.2.2 tsc-watch
   10.2.3 ts-jest
   10.2.4 typescript-eslint
   10.2.5 type-fest
10.3 编辑器支持
   10.3.1 VS Code 与 TypeScript
   10.3.2 WebStorm 与 TypeScript
   10.3.3 编辑器插件
   10.3.4 代码片段与快捷方式
10.4 社区资源
   10.4.1 学习资源
   10.4.2 博客与文章
   10.4.3 视频教程
   10.4.4 开源项目
   10.4.5 TypeScript 会议与活动