import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as i,a,e as t,b as h,r as p,o as k,f as l}from"./app-BY5DZzfM.js";const o={},d={id:"promise概念与状态",tabindex:"-1"},m={class:"header-anchor",href:"#promise概念与状态"},A={id:"promise链式调用",tabindex:"-1"},g={class:"header-anchor",href:"#promise链式调用"},c={id:"promise组合",tabindex:"-1"},B={class:"header-anchor",href:"#promise组合"};function y(u,s){const e=p("RouteLink");return k(),r("div",null,[s[3]||(s[3]=i("h1",{id:"promise基础",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#promise基础"},[i("span",null,"Promise基础")])],-1)),s[4]||(s[4]=i("p",null,"Promise是JavaScript中处理异步操作的标准方式，它提供了比传统回调函数更优雅的语法和更强大的功能。本节将介绍Promise的基本概念、使用方法和常见模式。",-1)),s[5]||(s[5]=i("h2",{id:"内容概览",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#内容概览"},[i("span",null,"内容概览")])],-1)),s[6]||(s[6]=i("p",null,"Promise 是 JavaScript 中处理异步操作的一种方式，它提供了比传统回调函数更优雅的解决方案。通过 Promise，我们可以避免回调地狱（callback hell），使异步代码更易于理解和维护。",-1)),s[7]||(s[7]=i("p",null,"本章节将从以下几个方面详细介绍 Promise：",-1)),i("h3",d,[i("a",m,[i("span",null,[a(e,{to:"/frontend/JavaScript/01-%E5%9F%BA%E7%A1%80%E6%8C%87%E5%8D%97/1.13-Promise%E5%9F%BA%E7%A1%80/1.13.1-Promise%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%8A%B6%E6%80%81.html"},{default:t(()=>s[0]||(s[0]=[l("Promise概念与状态")])),_:1})])])]),s[8]||(s[8]=i("ul",null,[i("li",null,"Promise 的基本概念和特点"),i("li",null,"Promise 的三种状态：pending、fulfilled、rejected"),i("li",null,"创建和使用 Promise 对象"),i("li",null,"Promise 的实例方法和静态方法"),i("li",null,"Promise 的状态检查和常见错误")],-1)),i("h3",A,[i("a",g,[i("span",null,[a(e,{to:"/frontend/JavaScript/01-%E5%9F%BA%E7%A1%80%E6%8C%87%E5%8D%97/1.13-Promise%E5%9F%BA%E7%A1%80/1.13.2-Promise%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8.html"},{default:t(()=>s[1]||(s[1]=[l("Promise链式调用")])),_:1})])])]),s[9]||(s[9]=i("ul",null,[i("li",null,"Promise 链的基本概念"),i("li",null,"then() 方法详解和值传递"),i("li",null,"catch() 方法详解和错误处理模式"),i("li",null,"构建复杂的 Promise 链"),i("li",null,"Promise 链的最佳实践")],-1)),i("h3",c,[i("a",B,[i("span",null,[a(e,{to:"/frontend/JavaScript/01-%E5%9F%BA%E7%A1%80%E6%8C%87%E5%8D%97/1.13-Promise%E5%9F%BA%E7%A1%80/1.13.3-Promise%E7%BB%84%E5%90%88.html"},{default:t(()=>s[2]||(s[2]=[l("Promise组合")])),_:1})])])]),s[10]||(s[10]=h(`<ul><li>Promise.all() - 等待所有 Promise 都成功</li><li>Promise.race() - 返回最快完成的 Promise 结果</li><li>Promise.allSettled() - 等待所有 Promise 完成，无论成功失败</li><li>Promise.any() - 返回第一个成功的 Promise 结果</li><li>其他 Promise 静态方法和自定义 Promise 组合</li></ul><h2 id="为什么需要学习-promise" tabindex="-1"><a class="header-anchor" href="#为什么需要学习-promise"><span>为什么需要学习 Promise？</span></a></h2><p>在现代 JavaScript 开发中，异步操作无处不在：</p><ul><li>网络请求（API 调用）</li><li>文件操作（在 Node.js 环境中）</li><li>定时器和动画</li><li>事件处理</li></ul><p>传统的回调函数在处理复杂异步流程时会导致代码嵌套过深，难以维护：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  getMoreData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    getMoreData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 回调地狱...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用 Promise 可以将上述代码改写为更加清晰的形式：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getMoreData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getMoreData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 统一处理错误</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise-的核心优势" tabindex="-1"><a class="header-anchor" href="#promise-的核心优势"><span>Promise 的核心优势</span></a></h2><ol><li><strong>状态不可逆</strong>：Promise 一旦从等待状态变成其他状态就不能再改变</li><li><strong>链式调用</strong>：Promise 可以通过 <code>.then()</code> 方法链式调用，简化异步流程</li><li><strong>错误处理</strong>：Promise 提供统一的错误处理机制</li><li><strong>组合能力</strong>：Promise 提供多种静态方法用于组合和管理多个异步操作</li></ol><p>通过学习本章节，你将能够熟练使用 Promise 处理各种异步场景，编写出更加清晰、可维护的异步代码。</p>`,11))])}const E=n(o,[["render",y],["__file","index.html.vue"]]),P=JSON.parse('{"path":"/frontend/JavaScript/01-%E5%9F%BA%E7%A1%80%E6%8C%87%E5%8D%97/1.13-Promise%E5%9F%BA%E7%A1%80/","title":"Promise基础","lang":"zh-CN","frontmatter":{"title":"Promise基础","icon":"javascript","index":false,"dir":{"expanded":false,"order":13,"link":true},"description":"Promise基础 Promise是JavaScript中处理异步操作的标准方式，它提供了比传统回调函数更优雅的语法和更强大的功能。本节将介绍Promise的基本概念、使用方法和常见模式。 内容概览 Promise 是 JavaScript 中处理异步操作的一种方式，它提供了比传统回调函数更优雅的解决方案。通过 Promise，我们可以避免回调地狱（c...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/kphub/frontend/JavaScript/01-%E5%9F%BA%E7%A1%80%E6%8C%87%E5%8D%97/1.13-Promise%E5%9F%BA%E7%A1%80/"}],["meta",{"property":"og:site_name","content":"全栈开发知识库"}],["meta",{"property":"og:title","content":"Promise基础"}],["meta",{"property":"og:description","content":"Promise基础 Promise是JavaScript中处理异步操作的标准方式，它提供了比传统回调函数更优雅的语法和更强大的功能。本节将介绍Promise的基本概念、使用方法和常见模式。 内容概览 Promise 是 JavaScript 中处理异步操作的一种方式，它提供了比传统回调函数更优雅的解决方案。通过 Promise，我们可以避免回调地狱（c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-11T05:26:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-11T05:26:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-11T05:26:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kpsmart\\",\\"url\\":\\"https://studyup.tech\\"}]}"]]},"headers":[{"level":2,"title":"内容概览","slug":"内容概览","link":"#内容概览","children":[{"level":3,"title":"Promise概念与状态","slug":"promise概念与状态","link":"#promise概念与状态","children":[]},{"level":3,"title":"Promise链式调用","slug":"promise链式调用","link":"#promise链式调用","children":[]},{"level":3,"title":"Promise组合","slug":"promise组合","link":"#promise组合","children":[]}]},{"level":2,"title":"为什么需要学习 Promise？","slug":"为什么需要学习-promise","link":"#为什么需要学习-promise","children":[]},{"level":2,"title":"Promise 的核心优势","slug":"promise-的核心优势","link":"#promise-的核心优势","children":[]}],"git":{"createdTime":1741391121000,"updatedTime":1741670777000,"contributors":[{"name":"guanrunbai","username":"guanrunbai","email":"470626708@qq.com","commits":3,"url":"https://github.com/guanrunbai"}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"frontend/JavaScript/01-基础指南/1.13-Promise基础/README.md","localizedDate":"2025年3月7日","autoDesc":true}');export{E as comp,P as data};
